
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20002780 	.word	0x20002780
}
   4:	00002a69 	.word	0x00002a69
   8:	000084df 	.word	0x000084df
   c:	00002a3d 	.word	0x00002a3d
  10:	00002a3d 	.word	0x00002a3d
  14:	00002a3d 	.word	0x00002a3d
  18:	00002a3d 	.word	0x00002a3d
	...
  2c:	00002699 	.word	0x00002699
  30:	00002a3d 	.word	0x00002a3d
  34:	00000000 	.word	0x00000000
  38:	00002645 	.word	0x00002645
  3c:	00002a3d 	.word	0x00002a3d

00000040 <_irq_vector_table>:
  40:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  50:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  60:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  70:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  80:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  90:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  a0:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  b0:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  c0:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  d0:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  e0:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..
  f0:	00002751 00002751 00002751 00002751     Q'..Q'..Q'..Q'..

Disassembly of section text:

00000100 <__aeabi_frsub>:
     100:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__addsf3>
     106:	bf00      	nop

00000108 <__aeabi_fsub>:
     108:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000010c <__addsf3>:
     10c:	0042      	lsls	r2, r0, #1
     10e:	bf1f      	itttt	ne
     110:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     114:	ea92 0f03 	teqne	r2, r3
     118:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     11c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     120:	d06a      	beq.n	1f8 <__data_size+0x14>
     122:	ea4f 6212 	mov.w	r2, r2, lsr #24
     126:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     12a:	bfc1      	itttt	gt
     12c:	18d2      	addgt	r2, r2, r3
     12e:	4041      	eorgt	r1, r0
     130:	4048      	eorgt	r0, r1
     132:	4041      	eorgt	r1, r0
     134:	bfb8      	it	lt
     136:	425b      	neglt	r3, r3
     138:	2b19      	cmp	r3, #25
     13a:	bf88      	it	hi
     13c:	4770      	bxhi	lr
     13e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     142:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     146:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     14a:	bf18      	it	ne
     14c:	4240      	negne	r0, r0
     14e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     152:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     156:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     15a:	bf18      	it	ne
     15c:	4249      	negne	r1, r1
     15e:	ea92 0f03 	teq	r2, r3
     162:	d03f      	beq.n	1e4 <__data_size>
     164:	f1a2 0201 	sub.w	r2, r2, #1
     168:	fa41 fc03 	asr.w	ip, r1, r3
     16c:	eb10 000c 	adds.w	r0, r0, ip
     170:	f1c3 0320 	rsb	r3, r3, #32
     174:	fa01 f103 	lsl.w	r1, r1, r3
     178:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     17c:	d502      	bpl.n	184 <CONFIG_IDLE_STACK_SIZE+0x44>
     17e:	4249      	negs	r1, r1
     180:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     184:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     188:	d313      	bcc.n	1b2 <CONFIG_IDLE_STACK_SIZE+0x72>
     18a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     18e:	d306      	bcc.n	19e <CONFIG_IDLE_STACK_SIZE+0x5e>
     190:	0840      	lsrs	r0, r0, #1
     192:	ea4f 0131 	mov.w	r1, r1, rrx
     196:	f102 0201 	add.w	r2, r2, #1
     19a:	2afe      	cmp	r2, #254	; 0xfe
     19c:	d251      	bcs.n	242 <__data_size+0x5e>
     19e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     1a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     1a6:	bf08      	it	eq
     1a8:	f020 0001 	biceq.w	r0, r0, #1
     1ac:	ea40 0003 	orr.w	r0, r0, r3
     1b0:	4770      	bx	lr
     1b2:	0049      	lsls	r1, r1, #1
     1b4:	eb40 0000 	adc.w	r0, r0, r0
     1b8:	3a01      	subs	r2, #1
     1ba:	bf28      	it	cs
     1bc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     1c0:	d2ed      	bcs.n	19e <CONFIG_IDLE_STACK_SIZE+0x5e>
     1c2:	fab0 fc80 	clz	ip, r0
     1c6:	f1ac 0c08 	sub.w	ip, ip, #8
     1ca:	ebb2 020c 	subs.w	r2, r2, ip
     1ce:	fa00 f00c 	lsl.w	r0, r0, ip
     1d2:	bfaa      	itet	ge
     1d4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     1d8:	4252      	neglt	r2, r2
     1da:	4318      	orrge	r0, r3
     1dc:	bfbc      	itt	lt
     1de:	40d0      	lsrlt	r0, r2
     1e0:	4318      	orrlt	r0, r3
     1e2:	4770      	bx	lr
     1e4:	f092 0f00 	teq	r2, #0
     1e8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1ec:	bf06      	itte	eq
     1ee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1f2:	3201      	addeq	r2, #1
     1f4:	3b01      	subne	r3, #1
     1f6:	e7b5      	b.n	164 <CONFIG_IDLE_STACK_SIZE+0x24>
     1f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     1fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     200:	bf18      	it	ne
     202:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     206:	d021      	beq.n	24c <__data_size+0x68>
     208:	ea92 0f03 	teq	r2, r3
     20c:	d004      	beq.n	218 <__data_size+0x34>
     20e:	f092 0f00 	teq	r2, #0
     212:	bf08      	it	eq
     214:	4608      	moveq	r0, r1
     216:	4770      	bx	lr
     218:	ea90 0f01 	teq	r0, r1
     21c:	bf1c      	itt	ne
     21e:	2000      	movne	r0, #0
     220:	4770      	bxne	lr
     222:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     226:	d104      	bne.n	232 <__data_size+0x4e>
     228:	0040      	lsls	r0, r0, #1
     22a:	bf28      	it	cs
     22c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     230:	4770      	bx	lr
     232:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     236:	bf3c      	itt	cc
     238:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     23c:	4770      	bxcc	lr
     23e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     242:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     246:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     24a:	4770      	bx	lr
     24c:	ea7f 6222 	mvns.w	r2, r2, asr #24
     250:	bf16      	itet	ne
     252:	4608      	movne	r0, r1
     254:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     258:	4601      	movne	r1, r0
     25a:	0242      	lsls	r2, r0, #9
     25c:	bf06      	itte	eq
     25e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     262:	ea90 0f01 	teqeq	r0, r1
     266:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     26a:	4770      	bx	lr

0000026c <__aeabi_ui2f>:
     26c:	f04f 0300 	mov.w	r3, #0
     270:	e004      	b.n	27c <__aeabi_i2f+0x8>
     272:	bf00      	nop

00000274 <__aeabi_i2f>:
     274:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     278:	bf48      	it	mi
     27a:	4240      	negmi	r0, r0
     27c:	ea5f 0c00 	movs.w	ip, r0
     280:	bf08      	it	eq
     282:	4770      	bxeq	lr
     284:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     288:	4601      	mov	r1, r0
     28a:	f04f 0000 	mov.w	r0, #0
     28e:	e01c      	b.n	2ca <__aeabi_l2f+0x2a>

00000290 <__aeabi_ul2f>:
     290:	ea50 0201 	orrs.w	r2, r0, r1
     294:	bf08      	it	eq
     296:	4770      	bxeq	lr
     298:	f04f 0300 	mov.w	r3, #0
     29c:	e00a      	b.n	2b4 <__aeabi_l2f+0x14>
     29e:	bf00      	nop

000002a0 <__aeabi_l2f>:
     2a0:	ea50 0201 	orrs.w	r2, r0, r1
     2a4:	bf08      	it	eq
     2a6:	4770      	bxeq	lr
     2a8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     2ac:	d502      	bpl.n	2b4 <__aeabi_l2f+0x14>
     2ae:	4240      	negs	r0, r0
     2b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2b4:	ea5f 0c01 	movs.w	ip, r1
     2b8:	bf02      	ittt	eq
     2ba:	4684      	moveq	ip, r0
     2bc:	4601      	moveq	r1, r0
     2be:	2000      	moveq	r0, #0
     2c0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2c4:	bf08      	it	eq
     2c6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2ca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2ce:	fabc f28c 	clz	r2, ip
     2d2:	3a08      	subs	r2, #8
     2d4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2d8:	db10      	blt.n	2fc <__aeabi_l2f+0x5c>
     2da:	fa01 fc02 	lsl.w	ip, r1, r2
     2de:	4463      	add	r3, ip
     2e0:	fa00 fc02 	lsl.w	ip, r0, r2
     2e4:	f1c2 0220 	rsb	r2, r2, #32
     2e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2ec:	fa20 f202 	lsr.w	r2, r0, r2
     2f0:	eb43 0002 	adc.w	r0, r3, r2
     2f4:	bf08      	it	eq
     2f6:	f020 0001 	biceq.w	r0, r0, #1
     2fa:	4770      	bx	lr
     2fc:	f102 0220 	add.w	r2, r2, #32
     300:	fa01 fc02 	lsl.w	ip, r1, r2
     304:	f1c2 0220 	rsb	r2, r2, #32
     308:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     30c:	fa21 f202 	lsr.w	r2, r1, r2
     310:	eb43 0002 	adc.w	r0, r3, r2
     314:	bf08      	it	eq
     316:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     31a:	4770      	bx	lr

0000031c <__aeabi_fmul>:
     31c:	f04f 0cff 	mov.w	ip, #255	; 0xff
     320:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     324:	bf1e      	ittt	ne
     326:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     32a:	ea92 0f0c 	teqne	r2, ip
     32e:	ea93 0f0c 	teqne	r3, ip
     332:	d06f      	beq.n	414 <CONFIG_FLASH_SIZE+0x14>
     334:	441a      	add	r2, r3
     336:	ea80 0c01 	eor.w	ip, r0, r1
     33a:	0240      	lsls	r0, r0, #9
     33c:	bf18      	it	ne
     33e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     342:	d01e      	beq.n	382 <__aeabi_fmul+0x66>
     344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     348:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     34c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     350:	fba0 3101 	umull	r3, r1, r0, r1
     354:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     358:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     35c:	bf3e      	ittt	cc
     35e:	0049      	lslcc	r1, r1, #1
     360:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     364:	005b      	lslcc	r3, r3, #1
     366:	ea40 0001 	orr.w	r0, r0, r1
     36a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     36e:	2afd      	cmp	r2, #253	; 0xfd
     370:	d81d      	bhi.n	3ae <__aeabi_fmul+0x92>
     372:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     376:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     37a:	bf08      	it	eq
     37c:	f020 0001 	biceq.w	r0, r0, #1
     380:	4770      	bx	lr
     382:	f090 0f00 	teq	r0, #0
     386:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     38a:	bf08      	it	eq
     38c:	0249      	lsleq	r1, r1, #9
     38e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     392:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     396:	3a7f      	subs	r2, #127	; 0x7f
     398:	bfc2      	ittt	gt
     39a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     39e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     3a2:	4770      	bxgt	lr
     3a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3a8:	f04f 0300 	mov.w	r3, #0
     3ac:	3a01      	subs	r2, #1
     3ae:	dc5d      	bgt.n	46c <CONFIG_FLASH_SIZE+0x6c>
     3b0:	f112 0f19 	cmn.w	r2, #25
     3b4:	bfdc      	itt	le
     3b6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     3ba:	4770      	bxle	lr
     3bc:	f1c2 0200 	rsb	r2, r2, #0
     3c0:	0041      	lsls	r1, r0, #1
     3c2:	fa21 f102 	lsr.w	r1, r1, r2
     3c6:	f1c2 0220 	rsb	r2, r2, #32
     3ca:	fa00 fc02 	lsl.w	ip, r0, r2
     3ce:	ea5f 0031 	movs.w	r0, r1, rrx
     3d2:	f140 0000 	adc.w	r0, r0, #0
     3d6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3da:	bf08      	it	eq
     3dc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3e0:	4770      	bx	lr
     3e2:	f092 0f00 	teq	r2, #0
     3e6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3ea:	bf02      	ittt	eq
     3ec:	0040      	lsleq	r0, r0, #1
     3ee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3f2:	3a01      	subeq	r2, #1
     3f4:	d0f9      	beq.n	3ea <__aeabi_fmul+0xce>
     3f6:	ea40 000c 	orr.w	r0, r0, ip
     3fa:	f093 0f00 	teq	r3, #0
     3fe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     402:	bf02      	ittt	eq
     404:	0049      	lsleq	r1, r1, #1
     406:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     40a:	3b01      	subeq	r3, #1
     40c:	d0f9      	beq.n	402 <CONFIG_FLASH_SIZE+0x2>
     40e:	ea41 010c 	orr.w	r1, r1, ip
     412:	e78f      	b.n	334 <__aeabi_fmul+0x18>
     414:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     418:	ea92 0f0c 	teq	r2, ip
     41c:	bf18      	it	ne
     41e:	ea93 0f0c 	teqne	r3, ip
     422:	d00a      	beq.n	43a <CONFIG_FLASH_SIZE+0x3a>
     424:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     428:	bf18      	it	ne
     42a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     42e:	d1d8      	bne.n	3e2 <__aeabi_fmul+0xc6>
     430:	ea80 0001 	eor.w	r0, r0, r1
     434:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     438:	4770      	bx	lr
     43a:	f090 0f00 	teq	r0, #0
     43e:	bf17      	itett	ne
     440:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     444:	4608      	moveq	r0, r1
     446:	f091 0f00 	teqne	r1, #0
     44a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     44e:	d014      	beq.n	47a <CONFIG_FLASH_SIZE+0x7a>
     450:	ea92 0f0c 	teq	r2, ip
     454:	d101      	bne.n	45a <CONFIG_FLASH_SIZE+0x5a>
     456:	0242      	lsls	r2, r0, #9
     458:	d10f      	bne.n	47a <CONFIG_FLASH_SIZE+0x7a>
     45a:	ea93 0f0c 	teq	r3, ip
     45e:	d103      	bne.n	468 <CONFIG_FLASH_SIZE+0x68>
     460:	024b      	lsls	r3, r1, #9
     462:	bf18      	it	ne
     464:	4608      	movne	r0, r1
     466:	d108      	bne.n	47a <CONFIG_FLASH_SIZE+0x7a>
     468:	ea80 0001 	eor.w	r0, r0, r1
     46c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     470:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     474:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     478:	4770      	bx	lr
     47a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     47e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     482:	4770      	bx	lr

00000484 <__aeabi_fdiv>:
     484:	f04f 0cff 	mov.w	ip, #255	; 0xff
     488:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     48c:	bf1e      	ittt	ne
     48e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     492:	ea92 0f0c 	teqne	r2, ip
     496:	ea93 0f0c 	teqne	r3, ip
     49a:	d069      	beq.n	570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
     49c:	eba2 0203 	sub.w	r2, r2, r3
     4a0:	ea80 0c01 	eor.w	ip, r0, r1
     4a4:	0249      	lsls	r1, r1, #9
     4a6:	ea4f 2040 	mov.w	r0, r0, lsl #9
     4aa:	d037      	beq.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     4ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     4b0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     4b4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     4b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     4bc:	428b      	cmp	r3, r1
     4be:	bf38      	it	cc
     4c0:	005b      	lslcc	r3, r3, #1
     4c2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4c6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4ca:	428b      	cmp	r3, r1
     4cc:	bf24      	itt	cs
     4ce:	1a5b      	subcs	r3, r3, r1
     4d0:	ea40 000c 	orrcs.w	r0, r0, ip
     4d4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4d8:	bf24      	itt	cs
     4da:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4de:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4e2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4e6:	bf24      	itt	cs
     4e8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4f0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4f4:	bf24      	itt	cs
     4f6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4fa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4fe:	011b      	lsls	r3, r3, #4
     500:	bf18      	it	ne
     502:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     506:	d1e0      	bne.n	4ca <__aeabi_fdiv+0x46>
     508:	2afd      	cmp	r2, #253	; 0xfd
     50a:	f63f af50 	bhi.w	3ae <__aeabi_fmul+0x92>
     50e:	428b      	cmp	r3, r1
     510:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     514:	bf08      	it	eq
     516:	f020 0001 	biceq.w	r0, r0, #1
     51a:	4770      	bx	lr
     51c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     520:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     524:	327f      	adds	r2, #127	; 0x7f
     526:	bfc2      	ittt	gt
     528:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     52c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     530:	4770      	bxgt	lr
     532:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     536:	f04f 0300 	mov.w	r3, #0
     53a:	3a01      	subs	r2, #1
     53c:	e737      	b.n	3ae <__aeabi_fmul+0x92>
     53e:	f092 0f00 	teq	r2, #0
     542:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     546:	bf02      	ittt	eq
     548:	0040      	lsleq	r0, r0, #1
     54a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     54e:	3a01      	subeq	r2, #1
     550:	d0f9      	beq.n	546 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5e>
     552:	ea40 000c 	orr.w	r0, r0, ip
     556:	f093 0f00 	teq	r3, #0
     55a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     55e:	bf02      	ittt	eq
     560:	0049      	lsleq	r1, r1, #1
     562:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     566:	3b01      	subeq	r3, #1
     568:	d0f9      	beq.n	55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
     56a:	ea41 010c 	orr.w	r1, r1, ip
     56e:	e795      	b.n	49c <__aeabi_fdiv+0x18>
     570:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     574:	ea92 0f0c 	teq	r2, ip
     578:	d108      	bne.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
     57a:	0242      	lsls	r2, r0, #9
     57c:	f47f af7d 	bne.w	47a <CONFIG_FLASH_SIZE+0x7a>
     580:	ea93 0f0c 	teq	r3, ip
     584:	f47f af70 	bne.w	468 <CONFIG_FLASH_SIZE+0x68>
     588:	4608      	mov	r0, r1
     58a:	e776      	b.n	47a <CONFIG_FLASH_SIZE+0x7a>
     58c:	ea93 0f0c 	teq	r3, ip
     590:	d104      	bne.n	59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>
     592:	024b      	lsls	r3, r1, #9
     594:	f43f af4c 	beq.w	430 <CONFIG_FLASH_SIZE+0x30>
     598:	4608      	mov	r0, r1
     59a:	e76e      	b.n	47a <CONFIG_FLASH_SIZE+0x7a>
     59c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     5a0:	bf18      	it	ne
     5a2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     5a6:	d1ca      	bne.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
     5a8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     5ac:	f47f af5c 	bne.w	468 <CONFIG_FLASH_SIZE+0x68>
     5b0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     5b4:	f47f af3c 	bne.w	430 <CONFIG_FLASH_SIZE+0x30>
     5b8:	e75f      	b.n	47a <CONFIG_FLASH_SIZE+0x7a>
     5ba:	bf00      	nop

000005bc <__gesf2>:
     5bc:	f04f 3cff 	mov.w	ip, #4294967295
     5c0:	e006      	b.n	5d0 <__cmpsf2+0x4>
     5c2:	bf00      	nop

000005c4 <__lesf2>:
     5c4:	f04f 0c01 	mov.w	ip, #1
     5c8:	e002      	b.n	5d0 <__cmpsf2+0x4>
     5ca:	bf00      	nop

000005cc <__cmpsf2>:
     5cc:	f04f 0c01 	mov.w	ip, #1
     5d0:	f84d cd04 	str.w	ip, [sp, #-4]!
     5d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     5d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
     5dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     5e0:	bf18      	it	ne
     5e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     5e6:	d011      	beq.n	60c <__cmpsf2+0x40>
     5e8:	b001      	add	sp, #4
     5ea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     5ee:	bf18      	it	ne
     5f0:	ea90 0f01 	teqne	r0, r1
     5f4:	bf58      	it	pl
     5f6:	ebb2 0003 	subspl.w	r0, r2, r3
     5fa:	bf88      	it	hi
     5fc:	17c8      	asrhi	r0, r1, #31
     5fe:	bf38      	it	cc
     600:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     604:	bf18      	it	ne
     606:	f040 0001 	orrne.w	r0, r0, #1
     60a:	4770      	bx	lr
     60c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     610:	d102      	bne.n	618 <__cmpsf2+0x4c>
     612:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     616:	d105      	bne.n	624 <__cmpsf2+0x58>
     618:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     61c:	d1e4      	bne.n	5e8 <__cmpsf2+0x1c>
     61e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     622:	d0e1      	beq.n	5e8 <__cmpsf2+0x1c>
     624:	f85d 0b04 	ldr.w	r0, [sp], #4
     628:	4770      	bx	lr
     62a:	bf00      	nop

0000062c <__aeabi_cfrcmple>:
     62c:	4684      	mov	ip, r0
     62e:	4608      	mov	r0, r1
     630:	4661      	mov	r1, ip
     632:	e7ff      	b.n	634 <__aeabi_cfcmpeq>

00000634 <__aeabi_cfcmpeq>:
     634:	b50f      	push	{r0, r1, r2, r3, lr}
     636:	f7ff ffc9 	bl	5cc <__cmpsf2>
     63a:	2800      	cmp	r0, #0
     63c:	bf48      	it	mi
     63e:	f110 0f00 	cmnmi.w	r0, #0
     642:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000644 <__aeabi_fcmpeq>:
     644:	f84d ed08 	str.w	lr, [sp, #-8]!
     648:	f7ff fff4 	bl	634 <__aeabi_cfcmpeq>
     64c:	bf0c      	ite	eq
     64e:	2001      	moveq	r0, #1
     650:	2000      	movne	r0, #0
     652:	f85d fb08 	ldr.w	pc, [sp], #8
     656:	bf00      	nop

00000658 <__aeabi_fcmplt>:
     658:	f84d ed08 	str.w	lr, [sp, #-8]!
     65c:	f7ff ffea 	bl	634 <__aeabi_cfcmpeq>
     660:	bf34      	ite	cc
     662:	2001      	movcc	r0, #1
     664:	2000      	movcs	r0, #0
     666:	f85d fb08 	ldr.w	pc, [sp], #8
     66a:	bf00      	nop

0000066c <__aeabi_fcmple>:
     66c:	f84d ed08 	str.w	lr, [sp, #-8]!
     670:	f7ff ffe0 	bl	634 <__aeabi_cfcmpeq>
     674:	bf94      	ite	ls
     676:	2001      	movls	r0, #1
     678:	2000      	movhi	r0, #0
     67a:	f85d fb08 	ldr.w	pc, [sp], #8
     67e:	bf00      	nop

00000680 <__aeabi_fcmpge>:
     680:	f84d ed08 	str.w	lr, [sp, #-8]!
     684:	f7ff ffd2 	bl	62c <__aeabi_cfrcmple>
     688:	bf94      	ite	ls
     68a:	2001      	movls	r0, #1
     68c:	2000      	movhi	r0, #0
     68e:	f85d fb08 	ldr.w	pc, [sp], #8
     692:	bf00      	nop

00000694 <__aeabi_fcmpgt>:
     694:	f84d ed08 	str.w	lr, [sp, #-8]!
     698:	f7ff ffc8 	bl	62c <__aeabi_cfrcmple>
     69c:	bf34      	ite	cc
     69e:	2001      	movcc	r0, #1
     6a0:	2000      	movcs	r0, #0
     6a2:	f85d fb08 	ldr.w	pc, [sp], #8
     6a6:	bf00      	nop

000006a8 <__aeabi_f2iz>:
     6a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
     6ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     6b0:	d30f      	bcc.n	6d2 <__aeabi_f2iz+0x2a>
     6b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
     6b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     6ba:	d90d      	bls.n	6d8 <__aeabi_f2iz+0x30>
     6bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
     6c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     6c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     6c8:	fa23 f002 	lsr.w	r0, r3, r2
     6cc:	bf18      	it	ne
     6ce:	4240      	negne	r0, r0
     6d0:	4770      	bx	lr
     6d2:	f04f 0000 	mov.w	r0, #0
     6d6:	4770      	bx	lr
     6d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
     6dc:	d101      	bne.n	6e2 <__aeabi_f2iz+0x3a>
     6de:	0242      	lsls	r2, r0, #9
     6e0:	d105      	bne.n	6ee <__aeabi_f2iz+0x46>
     6e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     6e6:	bf08      	it	eq
     6e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     6ec:	4770      	bx	lr
     6ee:	f04f 0000 	mov.w	r0, #0
     6f2:	4770      	bx	lr

000006f4 <__aeabi_f2uiz>:
     6f4:	0042      	lsls	r2, r0, #1
     6f6:	d20e      	bcs.n	716 <__aeabi_f2uiz+0x22>
     6f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     6fc:	d30b      	bcc.n	716 <__aeabi_f2uiz+0x22>
     6fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
     702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     706:	d409      	bmi.n	71c <__aeabi_f2uiz+0x28>
     708:	ea4f 2300 	mov.w	r3, r0, lsl #8
     70c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     710:	fa23 f002 	lsr.w	r0, r3, r2
     714:	4770      	bx	lr
     716:	f04f 0000 	mov.w	r0, #0
     71a:	4770      	bx	lr
     71c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     720:	d101      	bne.n	726 <__aeabi_f2uiz+0x32>
     722:	0242      	lsls	r2, r0, #9
     724:	d102      	bne.n	72c <__aeabi_f2uiz+0x38>
     726:	f04f 30ff 	mov.w	r0, #4294967295
     72a:	4770      	bx	lr
     72c:	f04f 0000 	mov.w	r0, #0
     730:	4770      	bx	lr
     732:	bf00      	nop

00000734 <__aeabi_uldivmod>:
     734:	b953      	cbnz	r3, 74c <__aeabi_uldivmod+0x18>
     736:	b94a      	cbnz	r2, 74c <__aeabi_uldivmod+0x18>
     738:	2900      	cmp	r1, #0
     73a:	bf08      	it	eq
     73c:	2800      	cmpeq	r0, #0
     73e:	bf1c      	itt	ne
     740:	f04f 31ff 	movne.w	r1, #4294967295
     744:	f04f 30ff 	movne.w	r0, #4294967295
     748:	f000 b96c 	b.w	a24 <__aeabi_idiv0>
     74c:	f1ad 0c08 	sub.w	ip, sp, #8
     750:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     754:	f000 f806 	bl	764 <__udivmoddi4>
     758:	f8dd e004 	ldr.w	lr, [sp, #4]
     75c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     760:	b004      	add	sp, #16
     762:	4770      	bx	lr

00000764 <__udivmoddi4>:
     764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     768:	9e08      	ldr	r6, [sp, #32]
     76a:	460d      	mov	r5, r1
     76c:	4604      	mov	r4, r0
     76e:	468e      	mov	lr, r1
     770:	2b00      	cmp	r3, #0
     772:	f040 8082 	bne.w	87a <CONFIG_ISR_STACK_SIZE+0x7a>
     776:	428a      	cmp	r2, r1
     778:	4617      	mov	r7, r2
     77a:	d946      	bls.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     77c:	fab2 f282 	clz	r2, r2
     780:	b14a      	cbz	r2, 796 <__udivmoddi4+0x32>
     782:	f1c2 0120 	rsb	r1, r2, #32
     786:	fa05 f302 	lsl.w	r3, r5, r2
     78a:	fa20 f101 	lsr.w	r1, r0, r1
     78e:	4097      	lsls	r7, r2
     790:	ea41 0e03 	orr.w	lr, r1, r3
     794:	4094      	lsls	r4, r2
     796:	ea4f 4817 	mov.w	r8, r7, lsr #16
     79a:	0c23      	lsrs	r3, r4, #16
     79c:	fbbe fcf8 	udiv	ip, lr, r8
     7a0:	b2b9      	uxth	r1, r7
     7a2:	fb08 ee1c 	mls	lr, r8, ip, lr
     7a6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     7aa:	fb0c f001 	mul.w	r0, ip, r1
     7ae:	4298      	cmp	r0, r3
     7b0:	d90a      	bls.n	7c8 <__udivmoddi4+0x64>
     7b2:	18fb      	adds	r3, r7, r3
     7b4:	f10c 35ff 	add.w	r5, ip, #4294967295
     7b8:	f080 8116 	bcs.w	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
     7bc:	4298      	cmp	r0, r3
     7be:	f240 8113 	bls.w	9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
     7c2:	f1ac 0c02 	sub.w	ip, ip, #2
     7c6:	443b      	add	r3, r7
     7c8:	1a1b      	subs	r3, r3, r0
     7ca:	b2a4      	uxth	r4, r4
     7cc:	fbb3 f0f8 	udiv	r0, r3, r8
     7d0:	fb08 3310 	mls	r3, r8, r0, r3
     7d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     7d8:	fb00 f101 	mul.w	r1, r0, r1
     7dc:	42a1      	cmp	r1, r4
     7de:	d909      	bls.n	7f4 <__udivmoddi4+0x90>
     7e0:	193c      	adds	r4, r7, r4
     7e2:	f100 33ff 	add.w	r3, r0, #4294967295
     7e6:	f080 8101 	bcs.w	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
     7ea:	42a1      	cmp	r1, r4
     7ec:	f240 80fe 	bls.w	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
     7f0:	3802      	subs	r0, #2
     7f2:	443c      	add	r4, r7
     7f4:	1a64      	subs	r4, r4, r1
     7f6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     7fa:	2100      	movs	r1, #0
     7fc:	b11e      	cbz	r6, 806 <CONFIG_ISR_STACK_SIZE+0x6>
     7fe:	40d4      	lsrs	r4, r2
     800:	2300      	movs	r3, #0
     802:	e9c6 4300 	strd	r4, r3, [r6]
     806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     80a:	b902      	cbnz	r2, 80e <CONFIG_ISR_STACK_SIZE+0xe>
     80c:	deff      	udf	#255	; 0xff
     80e:	fab2 f282 	clz	r2, r2
     812:	2a00      	cmp	r2, #0
     814:	d14f      	bne.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
     816:	1bcb      	subs	r3, r1, r7
     818:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     81c:	fa1f f887 	uxth.w	r8, r7
     820:	2101      	movs	r1, #1
     822:	fbb3 fcfe 	udiv	ip, r3, lr
     826:	0c25      	lsrs	r5, r4, #16
     828:	fb0e 331c 	mls	r3, lr, ip, r3
     82c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     830:	fb08 f30c 	mul.w	r3, r8, ip
     834:	42ab      	cmp	r3, r5
     836:	d907      	bls.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     838:	197d      	adds	r5, r7, r5
     83a:	f10c 30ff 	add.w	r0, ip, #4294967295
     83e:	d202      	bcs.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
     840:	42ab      	cmp	r3, r5
     842:	f200 80e7 	bhi.w	a14 <CONFIG_ISR_STACK_SIZE+0x214>
     846:	4684      	mov	ip, r0
     848:	1aed      	subs	r5, r5, r3
     84a:	b2a3      	uxth	r3, r4
     84c:	fbb5 f0fe 	udiv	r0, r5, lr
     850:	fb0e 5510 	mls	r5, lr, r0, r5
     854:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     858:	fb08 f800 	mul.w	r8, r8, r0
     85c:	45a0      	cmp	r8, r4
     85e:	d907      	bls.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
     860:	193c      	adds	r4, r7, r4
     862:	f100 33ff 	add.w	r3, r0, #4294967295
     866:	d202      	bcs.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
     868:	45a0      	cmp	r8, r4
     86a:	f200 80d7 	bhi.w	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
     86e:	4618      	mov	r0, r3
     870:	eba4 0408 	sub.w	r4, r4, r8
     874:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     878:	e7c0      	b.n	7fc <__udivmoddi4+0x98>
     87a:	428b      	cmp	r3, r1
     87c:	d908      	bls.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
     87e:	2e00      	cmp	r6, #0
     880:	f000 80af 	beq.w	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
     884:	2100      	movs	r1, #0
     886:	e9c6 0500 	strd	r0, r5, [r6]
     88a:	4608      	mov	r0, r1
     88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     890:	fab3 f183 	clz	r1, r3
     894:	2900      	cmp	r1, #0
     896:	d14b      	bne.n	930 <CONFIG_ISR_STACK_SIZE+0x130>
     898:	42ab      	cmp	r3, r5
     89a:	d302      	bcc.n	8a2 <CONFIG_ISR_STACK_SIZE+0xa2>
     89c:	4282      	cmp	r2, r0
     89e:	f200 80b7 	bhi.w	a10 <CONFIG_ISR_STACK_SIZE+0x210>
     8a2:	1a84      	subs	r4, r0, r2
     8a4:	eb65 0303 	sbc.w	r3, r5, r3
     8a8:	2001      	movs	r0, #1
     8aa:	469e      	mov	lr, r3
     8ac:	2e00      	cmp	r6, #0
     8ae:	d0aa      	beq.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     8b0:	e9c6 4e00 	strd	r4, lr, [r6]
     8b4:	e7a7      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     8b6:	f1c2 0c20 	rsb	ip, r2, #32
     8ba:	fa01 f302 	lsl.w	r3, r1, r2
     8be:	4097      	lsls	r7, r2
     8c0:	fa20 f00c 	lsr.w	r0, r0, ip
     8c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     8c8:	fa21 fc0c 	lsr.w	ip, r1, ip
     8cc:	4318      	orrs	r0, r3
     8ce:	fbbc f1fe 	udiv	r1, ip, lr
     8d2:	0c05      	lsrs	r5, r0, #16
     8d4:	fb0e cc11 	mls	ip, lr, r1, ip
     8d8:	fa1f f887 	uxth.w	r8, r7
     8dc:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     8e0:	fb01 f308 	mul.w	r3, r1, r8
     8e4:	42ab      	cmp	r3, r5
     8e6:	fa04 f402 	lsl.w	r4, r4, r2
     8ea:	d909      	bls.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
     8ec:	197d      	adds	r5, r7, r5
     8ee:	f101 3cff 	add.w	ip, r1, #4294967295
     8f2:	f080 808b 	bcs.w	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
     8f6:	42ab      	cmp	r3, r5
     8f8:	f240 8088 	bls.w	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
     8fc:	3902      	subs	r1, #2
     8fe:	443d      	add	r5, r7
     900:	1aeb      	subs	r3, r5, r3
     902:	b285      	uxth	r5, r0
     904:	fbb3 f0fe 	udiv	r0, r3, lr
     908:	fb0e 3310 	mls	r3, lr, r0, r3
     90c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     910:	fb00 f308 	mul.w	r3, r0, r8
     914:	42ab      	cmp	r3, r5
     916:	d907      	bls.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
     918:	197d      	adds	r5, r7, r5
     91a:	f100 3cff 	add.w	ip, r0, #4294967295
     91e:	d271      	bcs.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
     920:	42ab      	cmp	r3, r5
     922:	d96f      	bls.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
     924:	3802      	subs	r0, #2
     926:	443d      	add	r5, r7
     928:	1aeb      	subs	r3, r5, r3
     92a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     92e:	e778      	b.n	822 <CONFIG_ISR_STACK_SIZE+0x22>
     930:	f1c1 0c20 	rsb	ip, r1, #32
     934:	408b      	lsls	r3, r1
     936:	fa22 f70c 	lsr.w	r7, r2, ip
     93a:	431f      	orrs	r7, r3
     93c:	fa20 f40c 	lsr.w	r4, r0, ip
     940:	fa05 f301 	lsl.w	r3, r5, r1
     944:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     948:	fa25 f50c 	lsr.w	r5, r5, ip
     94c:	431c      	orrs	r4, r3
     94e:	0c23      	lsrs	r3, r4, #16
     950:	fbb5 f9fe 	udiv	r9, r5, lr
     954:	fa1f f887 	uxth.w	r8, r7
     958:	fb0e 5519 	mls	r5, lr, r9, r5
     95c:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     960:	fb09 fa08 	mul.w	sl, r9, r8
     964:	45aa      	cmp	sl, r5
     966:	fa02 f201 	lsl.w	r2, r2, r1
     96a:	fa00 f301 	lsl.w	r3, r0, r1
     96e:	d908      	bls.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
     970:	197d      	adds	r5, r7, r5
     972:	f109 30ff 	add.w	r0, r9, #4294967295
     976:	d247      	bcs.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
     978:	45aa      	cmp	sl, r5
     97a:	d945      	bls.n	a08 <CONFIG_ISR_STACK_SIZE+0x208>
     97c:	f1a9 0902 	sub.w	r9, r9, #2
     980:	443d      	add	r5, r7
     982:	eba5 050a 	sub.w	r5, r5, sl
     986:	b2a4      	uxth	r4, r4
     988:	fbb5 f0fe 	udiv	r0, r5, lr
     98c:	fb0e 5510 	mls	r5, lr, r0, r5
     990:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     994:	fb00 f808 	mul.w	r8, r0, r8
     998:	45a0      	cmp	r8, r4
     99a:	d907      	bls.n	9ac <CONFIG_ISR_STACK_SIZE+0x1ac>
     99c:	193c      	adds	r4, r7, r4
     99e:	f100 35ff 	add.w	r5, r0, #4294967295
     9a2:	d22d      	bcs.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
     9a4:	45a0      	cmp	r8, r4
     9a6:	d92b      	bls.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
     9a8:	3802      	subs	r0, #2
     9aa:	443c      	add	r4, r7
     9ac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     9b0:	eba4 0408 	sub.w	r4, r4, r8
     9b4:	fba0 8902 	umull	r8, r9, r0, r2
     9b8:	454c      	cmp	r4, r9
     9ba:	46c6      	mov	lr, r8
     9bc:	464d      	mov	r5, r9
     9be:	d319      	bcc.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
     9c0:	d016      	beq.n	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
     9c2:	b15e      	cbz	r6, 9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
     9c4:	ebb3 020e 	subs.w	r2, r3, lr
     9c8:	eb64 0405 	sbc.w	r4, r4, r5
     9cc:	fa04 fc0c 	lsl.w	ip, r4, ip
     9d0:	40ca      	lsrs	r2, r1
     9d2:	ea4c 0202 	orr.w	r2, ip, r2
     9d6:	40cc      	lsrs	r4, r1
     9d8:	e9c6 2400 	strd	r2, r4, [r6]
     9dc:	2100      	movs	r1, #0
     9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9e2:	4631      	mov	r1, r6
     9e4:	4630      	mov	r0, r6
     9e6:	e70e      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     9e8:	46ac      	mov	ip, r5
     9ea:	e6ed      	b.n	7c8 <__udivmoddi4+0x64>
     9ec:	4618      	mov	r0, r3
     9ee:	e701      	b.n	7f4 <__udivmoddi4+0x90>
     9f0:	4543      	cmp	r3, r8
     9f2:	d2e6      	bcs.n	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     9f4:	ebb8 0e02 	subs.w	lr, r8, r2
     9f8:	eb69 0507 	sbc.w	r5, r9, r7
     9fc:	3801      	subs	r0, #1
     9fe:	e7e0      	b.n	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     a00:	4628      	mov	r0, r5
     a02:	e7d3      	b.n	9ac <CONFIG_ISR_STACK_SIZE+0x1ac>
     a04:	4660      	mov	r0, ip
     a06:	e78f      	b.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
     a08:	4681      	mov	r9, r0
     a0a:	e7ba      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
     a0c:	4661      	mov	r1, ip
     a0e:	e777      	b.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
     a10:	4608      	mov	r0, r1
     a12:	e74b      	b.n	8ac <CONFIG_ISR_STACK_SIZE+0xac>
     a14:	f1ac 0c02 	sub.w	ip, ip, #2
     a18:	443d      	add	r5, r7
     a1a:	e715      	b.n	848 <CONFIG_ISR_STACK_SIZE+0x48>
     a1c:	3802      	subs	r0, #2
     a1e:	443c      	add	r4, r7
     a20:	e726      	b.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
     a22:	bf00      	nop

00000a24 <__aeabi_idiv0>:
     a24:	4770      	bx	lr
     a26:	bf00      	nop

00000a28 <butpress_cbfunction>:
            flag = 0;
        }
    }
}

void butpress_cbfunction(const struct device *dev, struct gpio_callback *cb, uint32_t pins) { flag = 1; }
     a28:	4b01      	ldr	r3, [pc, #4]	; (a30 <butpress_cbfunction+0x8>)
     a2a:	2201      	movs	r2, #1
     a2c:	601a      	str	r2, [r3, #0]
     a2e:	4770      	bx	lr
     a30:	2000062c 	.word	0x2000062c

00000a34 <gpio_pin_get>:
		(const struct gpio_driver_config *)port->config;
	gpio_port_value_t value;
	int ret;

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     a34:	6843      	ldr	r3, [r0, #4]
{
     a36:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	2501      	movs	r5, #1
     a3c:	408d      	lsls	r5, r1
     a3e:	421d      	tst	r5, r3
{
     a40:	4604      	mov	r4, r0
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     a42:	d10e      	bne.n	a62 <gpio_pin_get+0x2e>
     a44:	490f      	ldr	r1, [pc, #60]	; (a84 <gpio_pin_get+0x50>)
     a46:	4a10      	ldr	r2, [pc, #64]	; (a88 <gpio_pin_get+0x54>)
     a48:	4810      	ldr	r0, [pc, #64]	; (a8c <gpio_pin_get+0x58>)
     a4a:	f44f 638c 	mov.w	r3, #1120	; 0x460
     a4e:	f007 fc5f 	bl	8310 <printk>
     a52:	480f      	ldr	r0, [pc, #60]	; (a90 <gpio_pin_get+0x5c>)
     a54:	f007 fc5c 	bl	8310 <printk>
     a58:	480b      	ldr	r0, [pc, #44]	; (a88 <gpio_pin_get+0x54>)
     a5a:	f44f 618c 	mov.w	r1, #1120	; 0x460
     a5e:	f007 fd23 	bl	84a8 <assert_post_action>
	const struct gpio_driver_data *const data =
     a62:	6926      	ldr	r6, [r4, #16]
	return api->port_get_raw(port, value);
     a64:	68a3      	ldr	r3, [r4, #8]
     a66:	a901      	add	r1, sp, #4
     a68:	685b      	ldr	r3, [r3, #4]
     a6a:	4620      	mov	r0, r4
     a6c:	4798      	blx	r3
	if (ret == 0) {
     a6e:	b930      	cbnz	r0, a7e <gpio_pin_get+0x4a>
		*value ^= data->invert;
     a70:	6832      	ldr	r2, [r6, #0]
     a72:	9b01      	ldr	r3, [sp, #4]
     a74:	4053      	eors	r3, r2
		 "Unsupported pin");

	ret = gpio_port_get(port, &value);
	if (ret == 0) {
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
     a76:	422b      	tst	r3, r5
     a78:	bf14      	ite	ne
     a7a:	2001      	movne	r0, #1
     a7c:	2000      	moveq	r0, #0
	}

	return ret;
}
     a7e:	b002      	add	sp, #8
     a80:	bd70      	pop	{r4, r5, r6, pc}
     a82:	bf00      	nop
     a84:	000090ea 	.word	0x000090ea
     a88:	000090c0 	.word	0x000090c0
     a8c:	00009128 	.word	0x00009128
     a90:	00009145 	.word	0x00009145

00000a94 <thread_E_code>:
                if (ref == 101) ref = 0;
     a94:	f8df 80b0 	ldr.w	r8, [pc, #176]	; b48 <thread_E_code+0xb4>
void thread_E_code(void *argA, void *argB, void *argC) {
     a98:	b580      	push	{r7, lr}
                ref++;
     a9a:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
                if (ref == 101) ref = 0;
     a9e:	2700      	movs	r7, #0
        if (flag) {
     aa0:	4d24      	ldr	r5, [pc, #144]	; (b34 <thread_E_code+0xa0>)
     aa2:	682b      	ldr	r3, [r5, #0]
     aa4:	2b00      	cmp	r3, #0
     aa6:	d0fc      	beq.n	aa2 <thread_E_code+0xe>
            if (!gpio_pin_get(gpio0_dev, BOARDBUT1)) mode = manual;
     aa8:	4c23      	ldr	r4, [pc, #140]	; (b38 <thread_E_code+0xa4>)
            k_msleep(10);
     aaa:	200a      	movs	r0, #10
     aac:	f007 fc08 	bl	82c0 <k_msleep>
            if (!gpio_pin_get(gpio0_dev, BOARDBUT1)) mode = manual;
     ab0:	6820      	ldr	r0, [r4, #0]
     ab2:	210b      	movs	r1, #11
     ab4:	f7ff ffbe 	bl	a34 <gpio_pin_get>
     ab8:	b908      	cbnz	r0, abe <thread_E_code+0x2a>
     aba:	4b20      	ldr	r3, [pc, #128]	; (b3c <thread_E_code+0xa8>)
     abc:	7018      	strb	r0, [r3, #0]
            if ((!gpio_pin_get(gpio0_dev, BOARDBUT2)) && mode == manual) {
     abe:	6820      	ldr	r0, [r4, #0]
     ac0:	210c      	movs	r1, #12
     ac2:	f7ff ffb7 	bl	a34 <gpio_pin_get>
     ac6:	b980      	cbnz	r0, aea <thread_E_code+0x56>
     ac8:	4b1c      	ldr	r3, [pc, #112]	; (b3c <thread_E_code+0xa8>)
     aca:	781b      	ldrb	r3, [r3, #0]
     acc:	b96b      	cbnz	r3, aea <thread_E_code+0x56>
                ref++;
     ace:	f8df 9070 	ldr.w	r9, [pc, #112]	; b40 <thread_E_code+0xac>
     ad2:	4631      	mov	r1, r6
     ad4:	f8d9 0000 	ldr.w	r0, [r9]
     ad8:	f7ff fb18 	bl	10c <__addsf3>
                if (ref == 101) ref = 0;
     adc:	4641      	mov	r1, r8
                ref++;
     ade:	4682      	mov	sl, r0
                if (ref == 101) ref = 0;
     ae0:	f7ff fdb0 	bl	644 <__aeabi_fcmpeq>
     ae4:	bb00      	cbnz	r0, b28 <thread_E_code+0x94>
                ref++;
     ae6:	f8c9 a000 	str.w	sl, [r9]
            if ((!gpio_pin_get(gpio0_dev, BOARDBUT3))) mode = automatic;
     aea:	6820      	ldr	r0, [r4, #0]
     aec:	2118      	movs	r1, #24
     aee:	f7ff ffa1 	bl	a34 <gpio_pin_get>
     af2:	b910      	cbnz	r0, afa <thread_E_code+0x66>
     af4:	4b11      	ldr	r3, [pc, #68]	; (b3c <thread_E_code+0xa8>)
     af6:	2201      	movs	r2, #1
     af8:	701a      	strb	r2, [r3, #0]
            if ((!gpio_pin_get(gpio0_dev, BOARDBUT4)) && mode == manual) {
     afa:	6820      	ldr	r0, [r4, #0]
     afc:	2119      	movs	r1, #25
     afe:	f7ff ff99 	bl	a34 <gpio_pin_get>
     b02:	b970      	cbnz	r0, b22 <thread_E_code+0x8e>
     b04:	4b0d      	ldr	r3, [pc, #52]	; (b3c <thread_E_code+0xa8>)
     b06:	781b      	ldrb	r3, [r3, #0]
     b08:	b95b      	cbnz	r3, b22 <thread_E_code+0x8e>
                ref--;
     b0a:	4c0d      	ldr	r4, [pc, #52]	; (b40 <thread_E_code+0xac>)
     b0c:	4631      	mov	r1, r6
     b0e:	6820      	ldr	r0, [r4, #0]
     b10:	f7ff fafa 	bl	108 <__aeabi_fsub>
                if (ref == -1) ref = 0;
     b14:	490b      	ldr	r1, [pc, #44]	; (b44 <thread_E_code+0xb0>)
                ref--;
     b16:	4681      	mov	r9, r0
                if (ref == -1) ref = 0;
     b18:	f7ff fd94 	bl	644 <__aeabi_fcmpeq>
     b1c:	b938      	cbnz	r0, b2e <thread_E_code+0x9a>
                ref--;
     b1e:	f8c4 9000 	str.w	r9, [r4]
            flag = 0;
     b22:	2300      	movs	r3, #0
     b24:	602b      	str	r3, [r5, #0]
     b26:	e7bb      	b.n	aa0 <thread_E_code+0xc>
                if (ref == 101) ref = 0;
     b28:	f8c9 7000 	str.w	r7, [r9]
     b2c:	e7dd      	b.n	aea <thread_E_code+0x56>
                if (ref == -1) ref = 0;
     b2e:	6027      	str	r7, [r4, #0]
     b30:	e7f7      	b.n	b22 <thread_E_code+0x8e>
     b32:	bf00      	nop
     b34:	2000062c 	.word	0x2000062c
     b38:	20000630 	.word	0x20000630
     b3c:	20000d0a 	.word	0x20000d0a
     b40:	2000009c 	.word	0x2000009c
     b44:	bf800000 	.word	0xbf800000
     b48:	42ca0000 	.word	0x42ca0000

00000b4c <z_impl_gpio_pin_configure.constprop.0>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b4c:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_configure(const struct device *port,
     b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b52:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
     b54:	f8d0 8008 	ldr.w	r8, [r0, #8]
	struct gpio_driver_data *data =
     b58:	6907      	ldr	r7, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b5a:	2601      	movs	r6, #1
     b5c:	408e      	lsls	r6, r1
     b5e:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_configure(const struct device *port,
     b60:	4604      	mov	r4, r0
     b62:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     b64:	d10e      	bne.n	b84 <z_impl_gpio_pin_configure.constprop.0+0x38>
     b66:	490e      	ldr	r1, [pc, #56]	; (ba0 <z_impl_gpio_pin_configure.constprop.0+0x54>)
     b68:	4a0e      	ldr	r2, [pc, #56]	; (ba4 <z_impl_gpio_pin_configure.constprop.0+0x58>)
     b6a:	480f      	ldr	r0, [pc, #60]	; (ba8 <z_impl_gpio_pin_configure.constprop.0+0x5c>)
     b6c:	f240 23fd 	movw	r3, #765	; 0x2fd
     b70:	f007 fbce 	bl	8310 <printk>
     b74:	480d      	ldr	r0, [pc, #52]	; (bac <z_impl_gpio_pin_configure.constprop.0+0x60>)
     b76:	f007 fbcb 	bl	8310 <printk>
     b7a:	480a      	ldr	r0, [pc, #40]	; (ba4 <z_impl_gpio_pin_configure.constprop.0+0x58>)
     b7c:	f240 21fd 	movw	r1, #765	; 0x2fd
     b80:	f007 fc92 	bl	84a8 <assert_post_action>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     b84:	683b      	ldr	r3, [r7, #0]
     b86:	ea23 0606 	bic.w	r6, r3, r6
     b8a:	603e      	str	r6, [r7, #0]
	return api->pin_configure(port, pin, flags);
     b8c:	f8d8 3000 	ldr.w	r3, [r8]
     b90:	4629      	mov	r1, r5
     b92:	4620      	mov	r0, r4
     b94:	f44f 7288 	mov.w	r2, #272	; 0x110
}
     b98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
     b9c:	4718      	bx	r3
     b9e:	bf00      	nop
     ba0:	000090ea 	.word	0x000090ea
     ba4:	000090c0 	.word	0x000090c0
     ba8:	00009128 	.word	0x00009128
     bac:	00009145 	.word	0x00009145

00000bb0 <z_impl_gpio_pin_interrupt_configure.constprop.0>:
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bb0:	6843      	ldr	r3, [r0, #4]
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
     bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bb6:	681b      	ldr	r3, [r3, #0]
	const struct gpio_driver_api *api =
     bb8:	6887      	ldr	r7, [r0, #8]
	const struct gpio_driver_data *const data =
     bba:	f8d0 8010 	ldr.w	r8, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bbe:	2601      	movs	r6, #1
     bc0:	408e      	lsls	r6, r1
     bc2:	421e      	tst	r6, r3
static inline int z_impl_gpio_pin_interrupt_configure(const struct device *port,
     bc4:	4604      	mov	r4, r0
     bc6:	460d      	mov	r5, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     bc8:	d10e      	bne.n	be8 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x38>
     bca:	4910      	ldr	r1, [pc, #64]	; (c0c <z_impl_gpio_pin_interrupt_configure.constprop.0+0x5c>)
     bcc:	4a10      	ldr	r2, [pc, #64]	; (c10 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
     bce:	4811      	ldr	r0, [pc, #68]	; (c14 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x64>)
     bd0:	f240 239d 	movw	r3, #669	; 0x29d
     bd4:	f007 fb9c 	bl	8310 <printk>
     bd8:	480f      	ldr	r0, [pc, #60]	; (c18 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x68>)
     bda:	f007 fb99 	bl	8310 <printk>
     bde:	480c      	ldr	r0, [pc, #48]	; (c10 <z_impl_gpio_pin_interrupt_configure.constprop.0+0x60>)
     be0:	f240 219d 	movw	r1, #669	; 0x29d
     be4:	f007 fc60 	bl	84a8 <assert_post_action>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     be8:	f8d8 3000 	ldr.w	r3, [r8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
     bec:	421e      	tst	r6, r3
	return api->pin_interrupt_configure(port, pin, mode, trig);
     bee:	69be      	ldr	r6, [r7, #24]
     bf0:	4629      	mov	r1, r5
     bf2:	4620      	mov	r0, r4
     bf4:	46b4      	mov	ip, r6
     bf6:	bf18      	it	ne
     bf8:	f44f 2380 	movne.w	r3, #262144	; 0x40000
}
     bfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_interrupt_configure(port, pin, mode, trig);
     c00:	bf08      	it	eq
     c02:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
     c06:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
     c0a:	4760      	bx	ip
     c0c:	000090ea 	.word	0x000090ea
     c10:	000090c0 	.word	0x000090c0
     c14:	00009128 	.word	0x00009128
     c18:	00009145 	.word	0x00009145

00000c1c <thread_D_code>:
void thread_D_code(void *argA, void *argB, void *argC) {
     c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     c20:	4f2f      	ldr	r7, [pc, #188]	; (ce0 <thread_D_code+0xc4>)
        display++;
     c22:	4d30      	ldr	r5, [pc, #192]	; (ce4 <thread_D_code+0xc8>)
     c24:	4e30      	ldr	r6, [pc, #192]	; (ce8 <thread_D_code+0xcc>)
void thread_D_code(void *argA, void *argB, void *argC) {
     c26:	b085      	sub	sp, #20
     c28:	f04f 32ff 	mov.w	r2, #4294967295
     c2c:	f04f 33ff 	mov.w	r3, #4294967295
     c30:	4638      	mov	r0, r7
     c32:	f005 fb13 	bl	625c <z_impl_k_sem_take>
        display++;
     c36:	682b      	ldr	r3, [r5, #0]
     c38:	220a      	movs	r2, #10
     c3a:	1c59      	adds	r1, r3, #1
     c3c:	fb91 f0f2 	sdiv	r0, r1, r2
     c40:	fb02 1010 	mls	r0, r2, r0, r1
        if (display % 10 == 0) {
     c44:	b108      	cbz	r0, c4a <thread_D_code+0x2e>
        display++;
     c46:	6029      	str	r1, [r5, #0]
     c48:	e7ee      	b.n	c28 <thread_D_code+0xc>
            display++;
     c4a:	3302      	adds	r3, #2
     c4c:	602b      	str	r3, [r5, #0]
     c4e:	fb93 f1f2 	sdiv	r1, r3, r2
     c52:	fb02 3311 	mls	r3, r2, r1, r3
     c56:	f8df b0b0 	ldr.w	fp, [pc, #176]	; d08 <thread_D_code+0xec>
     c5a:	4c24      	ldr	r4, [pc, #144]	; (cec <thread_D_code+0xd0>)
     c5c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; d0c <thread_D_code+0xf0>
            if (display % 10 == 0) printk("ref:%d,error:%d,u:%d,feedback:%d \r\n", (int)ref, (int)error, (int)u, (int)feedBack);
     c60:	b9bb      	cbnz	r3, c92 <thread_D_code+0x76>
     c62:	6830      	ldr	r0, [r6, #0]
     c64:	f7ff fd20 	bl	6a8 <__aeabi_f2iz>
     c68:	9003      	str	r0, [sp, #12]
     c6a:	f8db 0000 	ldr.w	r0, [fp]
     c6e:	f7ff fd1b 	bl	6a8 <__aeabi_f2iz>
     c72:	4682      	mov	sl, r0
     c74:	6820      	ldr	r0, [r4, #0]
     c76:	f7ff fd17 	bl	6a8 <__aeabi_f2iz>
     c7a:	4680      	mov	r8, r0
     c7c:	f8d9 0000 	ldr.w	r0, [r9]
     c80:	f7ff fd12 	bl	6a8 <__aeabi_f2iz>
     c84:	9b03      	ldr	r3, [sp, #12]
     c86:	9000      	str	r0, [sp, #0]
     c88:	4652      	mov	r2, sl
     c8a:	4819      	ldr	r0, [pc, #100]	; (cf0 <thread_D_code+0xd4>)
     c8c:	4641      	mov	r1, r8
     c8e:	f007 fb3f 	bl	8310 <printk>
            printk("\e[1;1H\e[2J");
     c92:	4818      	ldr	r0, [pc, #96]	; (cf4 <thread_D_code+0xd8>)
     c94:	f007 fb3c 	bl	8310 <printk>
            printk("*-----* Projeto SETR *-----*\r\n");
     c98:	4817      	ldr	r0, [pc, #92]	; (cf8 <thread_D_code+0xdc>)
     c9a:	f007 fb39 	bl	8310 <printk>
            if (mode == automatic) {
     c9e:	4b17      	ldr	r3, [pc, #92]	; (cfc <thread_D_code+0xe0>)
     ca0:	781b      	ldrb	r3, [r3, #0]
     ca2:	2b01      	cmp	r3, #1
                printk("Modo automático\r\n");
     ca4:	bf0c      	ite	eq
     ca6:	4816      	ldreq	r0, [pc, #88]	; (d00 <thread_D_code+0xe4>)
                printk("Modo manual\r\n");
     ca8:	4816      	ldrne	r0, [pc, #88]	; (d04 <thread_D_code+0xe8>)
     caa:	f007 fb31 	bl	8310 <printk>
            printk("ref:%d,error:%d,u:%d,feedback:%d \r\n", (int)ref, (int)error, (int)u, (int)feedBack);
     cae:	6830      	ldr	r0, [r6, #0]
     cb0:	f7ff fcfa 	bl	6a8 <__aeabi_f2iz>
     cb4:	4682      	mov	sl, r0
     cb6:	f8db 0000 	ldr.w	r0, [fp]
     cba:	f7ff fcf5 	bl	6a8 <__aeabi_f2iz>
     cbe:	4680      	mov	r8, r0
     cc0:	6820      	ldr	r0, [r4, #0]
     cc2:	f7ff fcf1 	bl	6a8 <__aeabi_f2iz>
     cc6:	4604      	mov	r4, r0
     cc8:	f8d9 0000 	ldr.w	r0, [r9]
     ccc:	f7ff fcec 	bl	6a8 <__aeabi_f2iz>
     cd0:	4653      	mov	r3, sl
     cd2:	9000      	str	r0, [sp, #0]
     cd4:	4642      	mov	r2, r8
     cd6:	4806      	ldr	r0, [pc, #24]	; (cf0 <thread_D_code+0xd4>)
     cd8:	4621      	mov	r1, r4
     cda:	f007 fb19 	bl	8310 <printk>
    while (1) {
     cde:	e7a3      	b.n	c28 <thread_D_code+0xc>
     ce0:	20000664 	.word	0x20000664
     ce4:	20000618 	.word	0x20000618
     ce8:	20000698 	.word	0x20000698
     cec:	2000009c 	.word	0x2000009c
     cf0:	00009157 	.word	0x00009157
     cf4:	0000917b 	.word	0x0000917b
     cf8:	00009186 	.word	0x00009186
     cfc:	20000d0a 	.word	0x20000d0a
     d00:	000091a5 	.word	0x000091a5
     d04:	000091b8 	.word	0x000091b8
     d08:	20000620 	.word	0x20000620
     d0c:	20000624 	.word	0x20000624

00000d10 <thread_A_code>:
void thread_A_code(void *argA, void *argB, void *argC) {
     d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    printk("Thread A init (periodic)\n");
     d14:	4839      	ldr	r0, [pc, #228]	; (dfc <thread_A_code+0xec>)
void thread_A_code(void *argA, void *argB, void *argC) {
     d16:	b087      	sub	sp, #28
    printk("Thread A init (periodic)\n");
     d18:	f007 fafa 	bl	8310 <printk>
	return z_impl_k_uptime_ticks();
     d1c:	f007 ff3c 	bl	8b98 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
     d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     d24:	460a      	mov	r2, r1
     d26:	fba0 0103 	umull	r0, r1, r0, r3
     d2a:	fb03 1102 	mla	r1, r3, r2, r1
     d2e:	0bc3      	lsrs	r3, r0, #15
     d30:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
     d34:	0bca      	lsrs	r2, r1, #15
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     d36:	f113 0619 	adds.w	r6, r3, #25
    const struct adc_sequence sequence = {
     d3a:	4d31      	ldr	r5, [pc, #196]	; (e00 <thread_A_code+0xf0>)
    if (adc_dev == NULL) {
     d3c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; e1c <thread_A_code+0x10c>
     d40:	f8df 80dc 	ldr.w	r8, [pc, #220]	; e20 <thread_A_code+0x110>
    release_time = k_uptime_get() + SAMP_PERIOD_MS;
     d44:	f142 0700 	adc.w	r7, r2, #0
    const struct adc_sequence sequence = {
     d48:	2214      	movs	r2, #20
     d4a:	2100      	movs	r1, #0
     d4c:	a801      	add	r0, sp, #4
     d4e:	f007 fbf4 	bl	853a <memset>
     d52:	2302      	movs	r3, #2
    if (adc_dev == NULL) {
     d54:	f8d9 0000 	ldr.w	r0, [r9]
    const struct adc_sequence sequence = {
     d58:	9304      	str	r3, [sp, #16]
     d5a:	e9cd 3502 	strd	r3, r5, [sp, #8]
     d5e:	230a      	movs	r3, #10
     d60:	f88d 3014 	strb.w	r3, [sp, #20]
    if (adc_dev == NULL) {
     d64:	bb20      	cbnz	r0, db0 <thread_A_code+0xa0>
        printk("adc_sample(): error, must bind to adc first \n\r");
     d66:	4827      	ldr	r0, [pc, #156]	; (e04 <thread_A_code+0xf4>)
        err = adc_sample();
     d68:	f04f 34ff 	mov.w	r4, #4294967295
        printk("adc_sample(): error, must bind to adc first \n\r");
     d6c:	f007 fad0 	bl	8310 <printk>
        err = adc_sample();
     d70:	f8c8 4000 	str.w	r4, [r8]
            printk("adc_sample() failed with error code %d\n\r", err);
     d74:	4824      	ldr	r0, [pc, #144]	; (e08 <thread_A_code+0xf8>)
     d76:	4621      	mov	r1, r4
     d78:	f007 faca 	bl	8310 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     d7c:	4823      	ldr	r0, [pc, #140]	; (e0c <thread_A_code+0xfc>)
     d7e:	f005 fa2f 	bl	61e0 <z_impl_k_sem_give>
	return z_impl_k_uptime_ticks();
     d82:	f007 ff09 	bl	8b98 <z_impl_k_uptime_ticks>
     d86:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
     d8a:	fba0 2304 	umull	r2, r3, r0, r4
     d8e:	fb04 3301 	mla	r3, r4, r1, r3
     d92:	0bd0      	lsrs	r0, r2, #15
     d94:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
     d98:	0bd9      	lsrs	r1, r3, #15
        if (fin_time < release_time) {
     d9a:	42b0      	cmp	r0, r6
     d9c:	eb71 0307 	sbcs.w	r3, r1, r7
     da0:	dad2      	bge.n	d48 <thread_A_code+0x38>
            k_msleep(release_time - fin_time);
     da2:	1a30      	subs	r0, r6, r0
     da4:	f007 fa8c 	bl	82c0 <k_msleep>
            release_time += SAMP_PERIOD_MS;
     da8:	3619      	adds	r6, #25
     daa:	f147 0700 	adc.w	r7, r7, #0
     dae:	e7cb      	b.n	d48 <thread_A_code+0x38>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     db0:	6883      	ldr	r3, [r0, #8]
     db2:	a901      	add	r1, sp, #4
     db4:	685b      	ldr	r3, [r3, #4]
     db6:	4798      	blx	r3
    if (ret) {
     db8:	4604      	mov	r4, r0
     dba:	b118      	cbz	r0, dc4 <thread_A_code+0xb4>
        printk("adc_read() failed with code %d\n", ret);
     dbc:	4601      	mov	r1, r0
     dbe:	4814      	ldr	r0, [pc, #80]	; (e10 <thread_A_code+0x100>)
     dc0:	f007 faa6 	bl	8310 <printk>
        err = adc_sample();
     dc4:	f8c8 4000 	str.w	r4, [r8]
        if (err) {
     dc8:	2c00      	cmp	r4, #0
     dca:	d1d3      	bne.n	d74 <thread_A_code+0x64>
            if (adc_sample_buffer[0] > 1023) {
     dcc:	8829      	ldrh	r1, [r5, #0]
     dce:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     dd2:	d20e      	bcs.n	df2 <thread_A_code+0xe2>
                    array[i] = array[i - 1];
     dd4:	4b0f      	ldr	r3, [pc, #60]	; (e14 <thread_A_code+0x104>)
     dd6:	689a      	ldr	r2, [r3, #8]
     dd8:	60da      	str	r2, [r3, #12]
     dda:	685a      	ldr	r2, [r3, #4]
     ddc:	609a      	str	r2, [r3, #8]
     dde:	681a      	ldr	r2, [r3, #0]
     de0:	605a      	str	r2, [r3, #4]
                array[0] = (adc_sample_buffer[0] * 100 / 1023);
     de2:	2264      	movs	r2, #100	; 0x64
     de4:	434a      	muls	r2, r1
     de6:	f240 31ff 	movw	r1, #1023	; 0x3ff
     dea:	fbb2 f2f1 	udiv	r2, r2, r1
     dee:	601a      	str	r2, [r3, #0]
     df0:	e7c4      	b.n	d7c <thread_A_code+0x6c>
                printk("adc reading out of range\n\r");
     df2:	4809      	ldr	r0, [pc, #36]	; (e18 <thread_A_code+0x108>)
     df4:	f007 fa8c 	bl	8310 <printk>
     df8:	e7c0      	b.n	d7c <thread_A_code+0x6c>
     dfa:	bf00      	nop
     dfc:	000091c6 	.word	0x000091c6
     e00:	20000d08 	.word	0x20000d08
     e04:	000091e0 	.word	0x000091e0
     e08:	0000922f 	.word	0x0000922f
     e0c:	20000644 	.word	0x20000644
     e10:	0000920f 	.word	0x0000920f
     e14:	200005fc 	.word	0x200005fc
     e18:	00009258 	.word	0x00009258
     e1c:	200005f8 	.word	0x200005f8
     e20:	2000061c 	.word	0x2000061c

00000e24 <thread_B_code>:
void thread_B_code(void *argA, void *argB, void *argC) {
     e24:	b570      	push	{r4, r5, r6, lr}
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     e26:	480e      	ldr	r0, [pc, #56]	; (e60 <thread_B_code+0x3c>)
	return z_impl_k_sem_take(sem, timeout);
     e28:	4e0e      	ldr	r6, [pc, #56]	; (e64 <thread_B_code+0x40>)
            sum += array[i];
     e2a:	4c0f      	ldr	r4, [pc, #60]	; (e68 <thread_B_code+0x44>)
          finalMean = mean;
     e2c:	4d0f      	ldr	r5, [pc, #60]	; (e6c <thread_B_code+0x48>)
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
     e2e:	f007 fa6f 	bl	8310 <printk>
     e32:	f04f 32ff 	mov.w	r2, #4294967295
     e36:	f04f 33ff 	mov.w	r3, #4294967295
     e3a:	4630      	mov	r0, r6
     e3c:	f005 fa0e 	bl	625c <z_impl_k_sem_take>
            sum += array[i];
     e40:	e9d4 3200 	ldrd	r3, r2, [r4]
     e44:	4413      	add	r3, r2
     e46:	68a2      	ldr	r2, [r4, #8]
     e48:	4413      	add	r3, r2
     e4a:	68e2      	ldr	r2, [r4, #12]
        mean = sum / SAMPLES;
     e4c:	189b      	adds	r3, r3, r2
     e4e:	bf48      	it	mi
     e50:	3303      	addmi	r3, #3
     e52:	109b      	asrs	r3, r3, #2
          finalMean = mean;
     e54:	602b      	str	r3, [r5, #0]
	z_impl_k_sem_give(sem);
     e56:	4806      	ldr	r0, [pc, #24]	; (e70 <thread_B_code+0x4c>)
     e58:	f005 f9c2 	bl	61e0 <z_impl_k_sem_give>
    while (1) {
     e5c:	e7e9      	b.n	e32 <thread_B_code+0xe>
     e5e:	bf00      	nop
     e60:	00009273 	.word	0x00009273
     e64:	20000644 	.word	0x20000644
     e68:	200005fc 	.word	0x200005fc
     e6c:	20000628 	.word	0x20000628
     e70:	20000654 	.word	0x20000654

00000e74 <thread_C_code>:
void thread_C_code(void *argA, void *argB, void *argC) {
     e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     e78:	4856      	ldr	r0, [pc, #344]	; (fd4 <thread_C_code+0x160>)
        if (u >= 100.0) {
     e7a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
void thread_C_code(void *argA, void *argB, void *argC) {
     e7e:	b089      	sub	sp, #36	; 0x24
    printk("Thread C init (sporadic, waits on a semaphore by task A)\n");
     e80:	f007 fa46 	bl	8310 <printk>
	return z_impl_k_sem_take(sem, timeout);
     e84:	f04f 32ff 	mov.w	r2, #4294967295
     e88:	f04f 33ff 	mov.w	r3, #4294967295
     e8c:	4852      	ldr	r0, [pc, #328]	; (fd8 <thread_C_code+0x164>)
        u = (s0 * error) + (s1 * prevError) + prevU;
     e8e:	4e53      	ldr	r6, [pc, #332]	; (fdc <thread_C_code+0x168>)
     e90:	4f53      	ldr	r7, [pc, #332]	; (fe0 <thread_C_code+0x16c>)
     e92:	f8df 8184 	ldr.w	r8, [pc, #388]	; 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     e96:	f005 f9e1 	bl	625c <z_impl_k_sem_take>
        feedBack = 100 - finalMean;
     e9a:	4b52      	ldr	r3, [pc, #328]	; (fe4 <thread_C_code+0x170>)
     e9c:	6818      	ldr	r0, [r3, #0]
     e9e:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
     ea2:	f7ff f9e7 	bl	274 <__aeabi_i2f>
     ea6:	4b50      	ldr	r3, [pc, #320]	; (fe8 <thread_C_code+0x174>)
     ea8:	6018      	str	r0, [r3, #0]
        error = ref - feedBack;
     eaa:	4b50      	ldr	r3, [pc, #320]	; (fec <thread_C_code+0x178>)
        feedBack = 100 - finalMean;
     eac:	4601      	mov	r1, r0
        error = ref - feedBack;
     eae:	6818      	ldr	r0, [r3, #0]
     eb0:	f7ff f92a 	bl	108 <__aeabi_fsub>
     eb4:	4b4e      	ldr	r3, [pc, #312]	; (ff0 <thread_C_code+0x17c>)
        u = (s0 * error) + (s1 * prevError) + prevU;
     eb6:	6831      	ldr	r1, [r6, #0]
        error = ref - feedBack;
     eb8:	6018      	str	r0, [r3, #0]
        u = (s0 * error) + (s1 * prevError) + prevU;
     eba:	4b4e      	ldr	r3, [pc, #312]	; (ff4 <thread_C_code+0x180>)
        error = ref - feedBack;
     ebc:	4604      	mov	r4, r0
        u = (s0 * error) + (s1 * prevError) + prevU;
     ebe:	6818      	ldr	r0, [r3, #0]
     ec0:	f7ff fa2c 	bl	31c <__aeabi_fmul>
     ec4:	4b4c      	ldr	r3, [pc, #304]	; (ff8 <thread_C_code+0x184>)
     ec6:	4605      	mov	r5, r0
     ec8:	6819      	ldr	r1, [r3, #0]
     eca:	4620      	mov	r0, r4
     ecc:	f7ff fa26 	bl	31c <__aeabi_fmul>
     ed0:	4601      	mov	r1, r0
     ed2:	4628      	mov	r0, r5
     ed4:	f7ff f91a 	bl	10c <__addsf3>
     ed8:	6839      	ldr	r1, [r7, #0]
     eda:	f7ff f917 	bl	10c <__addsf3>
        if (u <= 0.0) {
     ede:	2100      	movs	r1, #0
        u = (s0 * error) + (s1 * prevError) + prevU;
     ee0:	4605      	mov	r5, r0
        if (u <= 0.0) {
     ee2:	f7ff fbc3 	bl	66c <__aeabi_fcmple>
     ee6:	b348      	cbz	r0, f3c <thread_C_code+0xc8>
            u = 0.0;
     ee8:	2300      	movs	r3, #0
     eea:	f8c8 3000 	str.w	r3, [r8]
        ret1 = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN, pwmPeriod_us, (unsigned int)((pwmPeriod_us * u) / 100), PWM_POLARITY_NORMAL);
     eee:	4b43      	ldr	r3, [pc, #268]	; (ffc <thread_C_code+0x188>)
        prevError = error;
     ef0:	6034      	str	r4, [r6, #0]
        ret1 = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN, pwmPeriod_us, (unsigned int)((pwmPeriod_us * u) / 100), PWM_POLARITY_NORMAL);
     ef2:	681e      	ldr	r6, [r3, #0]
     ef4:	4b42      	ldr	r3, [pc, #264]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
        prevU = u;
     ef6:	f8d8 8000 	ldr.w	r8, [r8]
        ret1 = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN, pwmPeriod_us, (unsigned int)((pwmPeriod_us * u) / 100), PWM_POLARITY_NORMAL);
     efa:	681d      	ldr	r5, [r3, #0]
        prevU = u;
     efc:	f8c7 8000 	str.w	r8, [r7]
        ret1 = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN, pwmPeriod_us, (unsigned int)((pwmPeriod_us * u) / 100), PWM_POLARITY_NORMAL);
     f00:	4628      	mov	r0, r5
     f02:	f7ff f9b3 	bl	26c <__aeabi_ui2f>
     f06:	4641      	mov	r1, r8
     f08:	f7ff fa08 	bl	31c <__aeabi_fmul>
     f0c:	4651      	mov	r1, sl
     f0e:	f7ff fab9 	bl	484 <__aeabi_fdiv>
     f12:	f7ff fbef 	bl	6f4 <__aeabi_f2uiz>
     f16:	4607      	mov	r7, r0
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
     f18:	68b3      	ldr	r3, [r6, #8]
     f1a:	f8df 8100 	ldr.w	r8, [pc, #256]	; 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     f1e:	685b      	ldr	r3, [r3, #4]
     f20:	aa06      	add	r2, sp, #24
     f22:	2104      	movs	r1, #4
     f24:	4630      	mov	r0, r6
     f26:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     f28:	9005      	str	r0, [sp, #20]
     f2a:	b190      	cbz	r0, f52 <thread_C_code+0xde>
     f2c:	f06f 0104 	mvn.w	r1, #4
     f30:	f8c8 1000 	str.w	r1, [r8]
            printk("Erroooor %d: failed to set pulse width\n", ret1);
     f34:	4833      	ldr	r0, [pc, #204]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     f36:	f007 f9eb 	bl	8310 <printk>
     f3a:	e046      	b.n	fca <thread_C_code+0x156>
        if (u >= 100.0) {
     f3c:	4932      	ldr	r1, [pc, #200]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     f3e:	4628      	mov	r0, r5
     f40:	f7ff fb9e 	bl	680 <__aeabi_fcmpge>
     f44:	b910      	cbnz	r0, f4c <thread_C_code+0xd8>
        u = (s0 * error) + (s1 * prevError) + prevU;
     f46:	f8c8 5000 	str.w	r5, [r8]
     f4a:	e7d0      	b.n	eee <thread_C_code+0x7a>
            u = 100.0;
     f4c:	f8c8 a000 	str.w	sl, [r8]
     f50:	e7cd      	b.n	eee <thread_C_code+0x7a>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     f52:	e9dd 4b06 	ldrd	r4, fp, [sp, #24]
     f56:	fba5 2304 	umull	r2, r3, r5, r4
     f5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
     f5e:	9b03      	ldr	r3, [sp, #12]
     f60:	4a2a      	ldr	r2, [pc, #168]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     f62:	fb05 330b 	mla	r3, r5, fp, r3
     f66:	9303      	str	r3, [sp, #12]
     f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     f6c:	2300      	movs	r3, #0
     f6e:	f7ff fbe1 	bl	734 <__aeabi_uldivmod>
     f72:	4681      	mov	r9, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
     f78:	4b25      	ldr	r3, [pc, #148]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     f7a:	f04f 32ff 	mov.w	r2, #4294967295
     f7e:	428b      	cmp	r3, r1
     f80:	bf08      	it	eq
     f82:	4282      	cmpeq	r2, r0
     f84:	d202      	bcs.n	f8c <thread_C_code+0x118>
        ret1 = pwm_pin_set_usec(pwm0_dev, BOARDLED_PIN, pwmPeriod_us, (unsigned int)((pwmPeriod_us * u) / 100), PWM_POLARITY_NORMAL);
     f86:	f06f 0185 	mvn.w	r1, #133	; 0x85
     f8a:	e7d1      	b.n	f30 <thread_C_code+0xbc>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     f8c:	fba7 4504 	umull	r4, r5, r7, r4
     f90:	fb07 550b 	mla	r5, r7, fp, r5
     f94:	4a1d      	ldr	r2, [pc, #116]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     f96:	2300      	movs	r3, #0
     f98:	4620      	mov	r0, r4
     f9a:	4629      	mov	r1, r5
     f9c:	f7ff fbca 	bl	734 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     fa0:	4a1b      	ldr	r2, [pc, #108]	; (1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>)
     fa2:	f04f 31ff 	mov.w	r1, #4294967295
     fa6:	42aa      	cmp	r2, r5
     fa8:	bf08      	it	eq
     faa:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     fac:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     fae:	d3ea      	bcc.n	f86 <thread_C_code+0x112>
	return api->pin_set(dev, pwm, period, pulse, flags);
     fb0:	68b2      	ldr	r2, [r6, #8]
     fb2:	9905      	ldr	r1, [sp, #20]
     fb4:	9100      	str	r1, [sp, #0]
     fb6:	6814      	ldr	r4, [r2, #0]
     fb8:	2104      	movs	r1, #4
     fba:	464a      	mov	r2, r9
     fbc:	4630      	mov	r0, r6
     fbe:	47a0      	blx	r4
     fc0:	4601      	mov	r1, r0
     fc2:	f8c8 0000 	str.w	r0, [r8]
        if (ret1) {
     fc6:	2800      	cmp	r0, #0
     fc8:	d1b4      	bne.n	f34 <thread_C_code+0xc0>
	z_impl_k_sem_give(sem);
     fca:	4812      	ldr	r0, [pc, #72]	; (1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>)
     fcc:	f005 f908 	bl	61e0 <z_impl_k_sem_give>
    while (1) {
     fd0:	e758      	b.n	e84 <thread_C_code+0x10>
     fd2:	bf00      	nop
     fd4:	000092ad 	.word	0x000092ad
     fd8:	20000654 	.word	0x20000654
     fdc:	20000634 	.word	0x20000634
     fe0:	20000638 	.word	0x20000638
     fe4:	20000628 	.word	0x20000628
     fe8:	20000624 	.word	0x20000624
     fec:	2000009c 	.word	0x2000009c
     ff0:	20000620 	.word	0x20000620
     ff4:	200000a4 	.word	0x200000a4
     ff8:	200000a0 	.word	0x200000a0
     ffc:	2000063c 	.word	0x2000063c
    1000:	20000098 	.word	0x20000098
    1004:	000092e7 	.word	0x000092e7
    1008:	42c80000 	.word	0x42c80000
    100c:	000f4240 	.word	0x000f4240
    1010:	000f423f 	.word	0x000f423f
    1014:	20000664 	.word	0x20000664
    1018:	20000698 	.word	0x20000698
    101c:	20000640 	.word	0x20000640

00001020 <config>:

void config() {
    1020:	b510      	push	{r4, lr}
    int ret = 0; /* Generic return value variable */

    printk("LED1 blink demo \n");
    1022:	4831      	ldr	r0, [pc, #196]	; (10e8 <config+0xc8>)
    1024:	f007 f974 	bl	8310 <printk>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1028:	4830      	ldr	r0, [pc, #192]	; (10ec <config+0xcc>)

    /* Bind to GPIO 0 */
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
    102a:	4c31      	ldr	r4, [pc, #196]	; (10f0 <config+0xd0>)
    102c:	f004 fb50 	bl	56d0 <z_impl_device_get_binding>
    1030:	6020      	str	r0, [r4, #0]
    if (gpio0_dev == NULL) {
    1032:	b920      	cbnz	r0, 103e <config+0x1e>
        return;
    }

    gpio_init_callback(&but_cb_data, butpress_cbfunction, BIT(BOARDBUT1) | BIT(BOARDBUT2) | BIT(BOARDBUT3) | BIT(BOARDBUT4));
    gpio_add_callback(gpio0_dev, &but_cb_data);
    1034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Failed to bind to GPIO0\n\r");
    1038:	482e      	ldr	r0, [pc, #184]	; (10f4 <config+0xd4>)
    103a:	f007 b969 	b.w	8310 <printk>
        printk("Bind to GPIO0 successfull \n\r");
    103e:	482e      	ldr	r0, [pc, #184]	; (10f8 <config+0xd8>)
    1040:	f007 f966 	bl	8310 <printk>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT1, GPIO_INPUT | GPIO_PULL_UP);
    1044:	6820      	ldr	r0, [r4, #0]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    1046:	210b      	movs	r1, #11
    1048:	f7ff fd80 	bl	b4c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    104c:	1e01      	subs	r1, r0, #0
    104e:	da04      	bge.n	105a <config+0x3a>
        printk("Error %d: Failed to configure BUT 1 \n\r", ret);
    1050:	482a      	ldr	r0, [pc, #168]	; (10fc <config+0xdc>)
    1052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Error %d: Failed to configure BUT 2 \n\r", ret);
    1056:	f007 b95b 	b.w	8310 <printk>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT2, GPIO_INPUT | GPIO_PULL_UP);
    105a:	6820      	ldr	r0, [r4, #0]
    105c:	210c      	movs	r1, #12
    105e:	f7ff fd75 	bl	b4c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    1062:	1e01      	subs	r1, r0, #0
    1064:	da01      	bge.n	106a <config+0x4a>
        printk("Error %d: Failed to configure BUT 2 \n\r", ret);
    1066:	4826      	ldr	r0, [pc, #152]	; (1100 <config+0xe0>)
    1068:	e7f3      	b.n	1052 <config+0x32>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT3, GPIO_INPUT | GPIO_PULL_UP);
    106a:	6820      	ldr	r0, [r4, #0]
    106c:	2118      	movs	r1, #24
    106e:	f7ff fd6d 	bl	b4c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    1072:	1e01      	subs	r1, r0, #0
    1074:	da01      	bge.n	107a <config+0x5a>
        printk("Error %d: Failed to configure BUT 3 \n\r", ret);
    1076:	4823      	ldr	r0, [pc, #140]	; (1104 <config+0xe4>)
    1078:	e7eb      	b.n	1052 <config+0x32>
    ret = gpio_pin_configure(gpio0_dev, BOARDBUT4, GPIO_INPUT | GPIO_PULL_UP);
    107a:	6820      	ldr	r0, [r4, #0]
    107c:	2119      	movs	r1, #25
    107e:	f7ff fd65 	bl	b4c <z_impl_gpio_pin_configure.constprop.0>
    if (ret < 0) {
    1082:	1e01      	subs	r1, r0, #0
    1084:	da01      	bge.n	108a <config+0x6a>
        printk("Error %d: Failed to configure BUT 4 \n\r", ret);
    1086:	4820      	ldr	r0, [pc, #128]	; (1108 <config+0xe8>)
    1088:	e7e3      	b.n	1052 <config+0x32>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT1, GPIO_INT_EDGE_TO_INACTIVE);
    108a:	6820      	ldr	r0, [r4, #0]
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    108c:	210b      	movs	r1, #11
    108e:	f7ff fd8f 	bl	bb0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
    1092:	4601      	mov	r1, r0
    1094:	b108      	cbz	r0, 109a <config+0x7a>
        printk("Error %d: failed to configure interrupt on BUT1 pin \n\r", ret);
    1096:	481d      	ldr	r0, [pc, #116]	; (110c <config+0xec>)
    1098:	e7db      	b.n	1052 <config+0x32>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT2, GPIO_INT_EDGE_TO_INACTIVE);
    109a:	6820      	ldr	r0, [r4, #0]
    109c:	210c      	movs	r1, #12
    109e:	f7ff fd87 	bl	bb0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
    10a2:	4601      	mov	r1, r0
    10a4:	b108      	cbz	r0, 10aa <config+0x8a>
        printk("Error %d: failed to configure interrupt on BUT2 pin \n\r", ret);
    10a6:	481a      	ldr	r0, [pc, #104]	; (1110 <config+0xf0>)
    10a8:	e7d3      	b.n	1052 <config+0x32>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT3, GPIO_INT_EDGE_TO_INACTIVE);
    10aa:	6820      	ldr	r0, [r4, #0]
    10ac:	2118      	movs	r1, #24
    10ae:	f7ff fd7f 	bl	bb0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
    10b2:	4601      	mov	r1, r0
    10b4:	b108      	cbz	r0, 10ba <config+0x9a>
        printk("Error %d: failed to configure interrupt on BUT3 pin \n\r", ret);
    10b6:	4817      	ldr	r0, [pc, #92]	; (1114 <config+0xf4>)
    10b8:	e7cb      	b.n	1052 <config+0x32>
    ret = gpio_pin_interrupt_configure(gpio0_dev, BOARDBUT4, GPIO_INT_EDGE_TO_INACTIVE);
    10ba:	6820      	ldr	r0, [r4, #0]
    10bc:	2119      	movs	r1, #25
    10be:	f7ff fd77 	bl	bb0 <z_impl_gpio_pin_interrupt_configure.constprop.0>
    if (ret != 0) {
    10c2:	4601      	mov	r1, r0
    10c4:	b108      	cbz	r0, 10ca <config+0xaa>
        printk("Error %d: failed to configure interrupt on BUT4 pin \n\r", ret);
    10c6:	4814      	ldr	r0, [pc, #80]	; (1118 <config+0xf8>)
    10c8:	e7c3      	b.n	1052 <config+0x32>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    10ca:	4b14      	ldr	r3, [pc, #80]	; (111c <config+0xfc>)
    10cc:	4a14      	ldr	r2, [pc, #80]	; (1120 <config+0x100>)
    gpio_add_callback(gpio0_dev, &but_cb_data);
    10ce:	6820      	ldr	r0, [r4, #0]
    10d0:	605a      	str	r2, [r3, #4]
	callback->pin_mask = pin_mask;
    10d2:	4a14      	ldr	r2, [pc, #80]	; (1124 <config+0x104>)
    10d4:	609a      	str	r2, [r3, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    10d6:	6883      	ldr	r3, [r0, #8]
    10d8:	69db      	ldr	r3, [r3, #28]
    10da:	b123      	cbz	r3, 10e6 <config+0xc6>
    10dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    10e0:	490e      	ldr	r1, [pc, #56]	; (111c <config+0xfc>)
    10e2:	2201      	movs	r2, #1
    10e4:	4718      	bx	r3
    10e6:	bd10      	pop	{r4, pc}
    10e8:	0000930f 	.word	0x0000930f
    10ec:	00009321 	.word	0x00009321
    10f0:	20000630 	.word	0x20000630
    10f4:	0000954d 	.word	0x0000954d
    10f8:	00009328 	.word	0x00009328
    10fc:	00009345 	.word	0x00009345
    1100:	0000936c 	.word	0x0000936c
    1104:	00009393 	.word	0x00009393
    1108:	000093ba 	.word	0x000093ba
    110c:	000093e1 	.word	0x000093e1
    1110:	00009418 	.word	0x00009418
    1114:	0000944f 	.word	0x0000944f
    1118:	00009486 	.word	0x00009486
    111c:	2000060c 	.word	0x2000060c
    1120:	00000a29 	.word	0x00000a29
    1124:	03001800 	.word	0x03001800

00001128 <main>:
void main(void) {
    1128:	b5f0      	push	{r4, r5, r6, r7, lr}
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    112a:	4856      	ldr	r0, [pc, #344]	; (1284 <main+0x15c>)
void main(void) {
    112c:	b089      	sub	sp, #36	; 0x24
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    112e:	f001 fe51 	bl	2dd4 <printf>
    config();
    1132:	f7ff ff75 	bl	1020 <config>
    memset(array, 0, SAMPLES);
    1136:	2204      	movs	r2, #4
    1138:	2100      	movs	r1, #0
    113a:	4853      	ldr	r0, [pc, #332]	; (1288 <main+0x160>)
    113c:	f007 f9fd 	bl	853a <memset>
	return z_impl_k_sem_init(sem, initial_count, limit);
    1140:	2201      	movs	r2, #1
    1142:	2100      	movs	r1, #0
    1144:	4851      	ldr	r0, [pc, #324]	; (128c <main+0x164>)
    1146:	f007 fcf7 	bl	8b38 <z_impl_k_sem_init>
    114a:	2201      	movs	r2, #1
    114c:	2100      	movs	r1, #0
    114e:	4850      	ldr	r0, [pc, #320]	; (1290 <main+0x168>)
    1150:	f007 fcf2 	bl	8b38 <z_impl_k_sem_init>
    1154:	2201      	movs	r2, #1
    1156:	2100      	movs	r1, #0
    1158:	484e      	ldr	r0, [pc, #312]	; (1294 <main+0x16c>)
    115a:	f007 fced 	bl	8b38 <z_impl_k_sem_init>
    115e:	2201      	movs	r2, #1
    1160:	2100      	movs	r1, #0
    1162:	484d      	ldr	r0, [pc, #308]	; (1298 <main+0x170>)
    1164:	f007 fce8 	bl	8b38 <z_impl_k_sem_init>
    1168:	484c      	ldr	r0, [pc, #304]	; (129c <main+0x174>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
    116a:	4c4d      	ldr	r4, [pc, #308]	; (12a0 <main+0x178>)
    116c:	f004 fab0 	bl	56d0 <z_impl_device_get_binding>
    1170:	6020      	str	r0, [r4, #0]
    if (!adc_dev) {
    1172:	b910      	cbnz	r0, 117a <main+0x52>
        printk("ADC device_get_binding() failed\n");
    1174:	484b      	ldr	r0, [pc, #300]	; (12a4 <main+0x17c>)
    1176:	f007 f8cb 	bl	8310 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    117a:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
    117c:	6883      	ldr	r3, [r0, #8]
    117e:	494a      	ldr	r1, [pc, #296]	; (12a8 <main+0x180>)
    1180:	681b      	ldr	r3, [r3, #0]
    1182:	4798      	blx	r3
    1184:	4b49      	ldr	r3, [pc, #292]	; (12ac <main+0x184>)
    1186:	4601      	mov	r1, r0
    1188:	6018      	str	r0, [r3, #0]
    if (err) {
    118a:	b110      	cbz	r0, 1192 <main+0x6a>
        printk("adc_channel_setup() failed with error code %d\n", err);
    118c:	4848      	ldr	r0, [pc, #288]	; (12b0 <main+0x188>)
    118e:	f007 f8bf 	bl	8310 <printk>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 50;
    1192:	4b48      	ldr	r3, [pc, #288]	; (12b4 <main+0x18c>)
    1194:	2232      	movs	r2, #50	; 0x32
    1196:	60da      	str	r2, [r3, #12]
    1198:	4847      	ldr	r0, [pc, #284]	; (12b8 <main+0x190>)
    119a:	f004 fa99 	bl	56d0 <z_impl_device_get_binding>
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
    119e:	4b47      	ldr	r3, [pc, #284]	; (12bc <main+0x194>)
    11a0:	6018      	str	r0, [r3, #0]
    if (gpio0_dev == NULL) {
    11a2:	b928      	cbnz	r0, 11b0 <main+0x88>
        printk("Error: Failed to bind to GPIO0\n\r");
    11a4:	4846      	ldr	r0, [pc, #280]	; (12c0 <main+0x198>)
}
    11a6:	b009      	add	sp, #36	; 0x24
    11a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        printk("Error: Failed to bind to PWM0\n r");
    11ac:	f007 b8b0 	b.w	8310 <printk>
        printk("Bind to GPIO0 successfull \n\r");
    11b0:	4844      	ldr	r0, [pc, #272]	; (12c4 <main+0x19c>)
    11b2:	f007 f8ad 	bl	8310 <printk>
    11b6:	4844      	ldr	r0, [pc, #272]	; (12c8 <main+0x1a0>)
    11b8:	f004 fa8a 	bl	56d0 <z_impl_device_get_binding>
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    11bc:	4b43      	ldr	r3, [pc, #268]	; (12cc <main+0x1a4>)
    11be:	6018      	str	r0, [r3, #0]
    if (pwm0_dev == NULL) {
    11c0:	b908      	cbnz	r0, 11c6 <main+0x9e>
        printk("Error: Failed to bind to PWM0\n r");
    11c2:	4843      	ldr	r0, [pc, #268]	; (12d0 <main+0x1a8>)
    11c4:	e7ef      	b.n	11a6 <main+0x7e>
        printk("Bind to PWM0 successful\n\r");
    11c6:	4843      	ldr	r0, [pc, #268]	; (12d4 <main+0x1ac>)
    11c8:	f007 f8a2 	bl	8310 <printk>
    k_msleep(1000);
    11cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    11d0:	f007 f876 	bl	82c0 <k_msleep>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack, K_THREAD_STACK_SIZEOF(thread_A_stack), thread_A_code, NULL, NULL, NULL, thread_A_prio, 0, K_NO_WAIT);
    11d4:	2600      	movs	r6, #0
    11d6:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    11d8:	2400      	movs	r4, #0
    11da:	2501      	movs	r5, #1
    11dc:	e9cd 6706 	strd	r6, r7, [sp, #24]
    11e0:	e9cd 5403 	strd	r5, r4, [sp, #12]
    11e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
    11e8:	4b3b      	ldr	r3, [pc, #236]	; (12d8 <main+0x1b0>)
    11ea:	493c      	ldr	r1, [pc, #240]	; (12dc <main+0x1b4>)
    11ec:	9400      	str	r4, [sp, #0]
    11ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    11f2:	483b      	ldr	r0, [pc, #236]	; (12e0 <main+0x1b8>)
    11f4:	f004 fcfc 	bl	5bf0 <z_impl_k_thread_create>
    11f8:	4b3a      	ldr	r3, [pc, #232]	; (12e4 <main+0x1bc>)
    11fa:	6018      	str	r0, [r3, #0]
    11fc:	4b3a      	ldr	r3, [pc, #232]	; (12e8 <main+0x1c0>)
    11fe:	493b      	ldr	r1, [pc, #236]	; (12ec <main+0x1c4>)
    1200:	9400      	str	r4, [sp, #0]
    1202:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1206:	e9cd 5403 	strd	r5, r4, [sp, #12]
    120a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    120e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1212:	4837      	ldr	r0, [pc, #220]	; (12f0 <main+0x1c8>)
    1214:	f004 fcec 	bl	5bf0 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack, K_THREAD_STACK_SIZEOF(thread_B_stack), thread_B_code, NULL, NULL, NULL, thread_B_prio, 0, K_NO_WAIT);
    1218:	4b36      	ldr	r3, [pc, #216]	; (12f4 <main+0x1cc>)
    121a:	6018      	str	r0, [r3, #0]
    121c:	4b36      	ldr	r3, [pc, #216]	; (12f8 <main+0x1d0>)
    121e:	4937      	ldr	r1, [pc, #220]	; (12fc <main+0x1d4>)
    1220:	9400      	str	r4, [sp, #0]
    1222:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1226:	e9cd 5403 	strd	r5, r4, [sp, #12]
    122a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    122e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1232:	4833      	ldr	r0, [pc, #204]	; (1300 <main+0x1d8>)
    1234:	f004 fcdc 	bl	5bf0 <z_impl_k_thread_create>
    thread_C_tid = k_thread_create(&thread_C_data, thread_C_stack, K_THREAD_STACK_SIZEOF(thread_C_stack), thread_C_code, NULL, NULL, NULL, thread_C_prio, 0, K_NO_WAIT);
    1238:	4b32      	ldr	r3, [pc, #200]	; (1304 <main+0x1dc>)
    123a:	6018      	str	r0, [r3, #0]
    123c:	4b32      	ldr	r3, [pc, #200]	; (1308 <main+0x1e0>)
    123e:	4933      	ldr	r1, [pc, #204]	; (130c <main+0x1e4>)
    1240:	9400      	str	r4, [sp, #0]
    1242:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1246:	e9cd 5403 	strd	r5, r4, [sp, #12]
    124a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1252:	482f      	ldr	r0, [pc, #188]	; (1310 <main+0x1e8>)
    1254:	f004 fccc 	bl	5bf0 <z_impl_k_thread_create>
    thread_D_tid = k_thread_create(&thread_D_data, thread_D_stack, K_THREAD_STACK_SIZEOF(thread_D_stack), thread_D_code, NULL, NULL, NULL, thread_D_prio, 0, K_NO_WAIT);
    1258:	4b2e      	ldr	r3, [pc, #184]	; (1314 <main+0x1ec>)
    125a:	6018      	str	r0, [r3, #0]
    125c:	2302      	movs	r3, #2
    125e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    1262:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1266:	e9cd 4400 	strd	r4, r4, [sp]
    126a:	4b2b      	ldr	r3, [pc, #172]	; (1318 <main+0x1f0>)
    126c:	492b      	ldr	r1, [pc, #172]	; (131c <main+0x1f4>)
    126e:	9404      	str	r4, [sp, #16]
    1270:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1274:	482a      	ldr	r0, [pc, #168]	; (1320 <main+0x1f8>)
    1276:	f004 fcbb 	bl	5bf0 <z_impl_k_thread_create>
    thread_E_tid = k_thread_create(&thread_E_data, thread_E_stack, K_THREAD_STACK_SIZEOF(thread_E_stack), thread_E_code, NULL, NULL, NULL, thread_E_prio, 0, K_NO_WAIT);
    127a:	4b2a      	ldr	r3, [pc, #168]	; (1324 <main+0x1fc>)
    127c:	6018      	str	r0, [r3, #0]
}
    127e:	b009      	add	sp, #36	; 0x24
    1280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1282:	bf00      	nop
    1284:	000094bd 	.word	0x000094bd
    1288:	200005fc 	.word	0x200005fc
    128c:	20000644 	.word	0x20000644
    1290:	20000654 	.word	0x20000654
    1294:	20000664 	.word	0x20000664
    1298:	20000674 	.word	0x20000674
    129c:	000094f0 	.word	0x000094f0
    12a0:	200005f8 	.word	0x200005f8
    12a4:	000094f6 	.word	0x000094f6
    12a8:	000090b8 	.word	0x000090b8
    12ac:	2000061c 	.word	0x2000061c
    12b0:	00009517 	.word	0x00009517
    12b4:	40007000 	.word	0x40007000
    12b8:	00009321 	.word	0x00009321
    12bc:	20000630 	.word	0x20000630
    12c0:	00009546 	.word	0x00009546
    12c4:	00009328 	.word	0x00009328
    12c8:	00009567 	.word	0x00009567
    12cc:	2000063c 	.word	0x2000063c
    12d0:	0000956d 	.word	0x0000956d
    12d4:	0000958e 	.word	0x0000958e
    12d8:	00000d11 	.word	0x00000d11
    12dc:	20000ee0 	.word	0x20000ee0
    12e0:	20000250 	.word	0x20000250
    12e4:	20000684 	.word	0x20000684
    12e8:	00000e25 	.word	0x00000e25
    12ec:	20001300 	.word	0x20001300
    12f0:	200002d0 	.word	0x200002d0
    12f4:	20000688 	.word	0x20000688
    12f8:	00000e75 	.word	0x00000e75
    12fc:	20001720 	.word	0x20001720
    1300:	20000350 	.word	0x20000350
    1304:	2000068c 	.word	0x2000068c
    1308:	00000c1d 	.word	0x00000c1d
    130c:	20001b40 	.word	0x20001b40
    1310:	200003d0 	.word	0x200003d0
    1314:	20000690 	.word	0x20000690
    1318:	00000a95 	.word	0x00000a95
    131c:	20001f60 	.word	0x20001f60
    1320:	20000450 	.word	0x20000450
    1324:	20000694 	.word	0x20000694

00001328 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    1328:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    132a:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    132c:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    132e:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    1332:	2c03      	cmp	r4, #3
{
    1334:	4605      	mov	r5, r0
	switch (method) {
    1336:	d002      	beq.n	133e <sys_notify_finalize+0x16>
    1338:	b12c      	cbz	r4, 1346 <sys_notify_finalize+0x1e>
    133a:	2000      	movs	r0, #0
    133c:	e000      	b.n	1340 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    133e:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1340:	2300      	movs	r3, #0
    1342:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1344:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    1346:	4a05      	ldr	r2, [pc, #20]	; (135c <sys_notify_finalize+0x34>)
    1348:	4905      	ldr	r1, [pc, #20]	; (1360 <sys_notify_finalize+0x38>)
    134a:	4806      	ldr	r0, [pc, #24]	; (1364 <sys_notify_finalize+0x3c>)
    134c:	2345      	movs	r3, #69	; 0x45
    134e:	f006 ffdf 	bl	8310 <printk>
    1352:	4802      	ldr	r0, [pc, #8]	; (135c <sys_notify_finalize+0x34>)
    1354:	2145      	movs	r1, #69	; 0x45
    1356:	f007 f8a7 	bl	84a8 <assert_post_action>
    135a:	e7ee      	b.n	133a <sys_notify_finalize+0x12>
    135c:	000095a8 	.word	0x000095a8
    1360:	00009d9f 	.word	0x00009d9f
    1364:	00009128 	.word	0x00009128

00001368 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1368:	680b      	ldr	r3, [r1, #0]
    136a:	3301      	adds	r3, #1
    136c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    136e:	4b01      	ldr	r3, [pc, #4]	; (1374 <char_out+0xc>)
    1370:	681b      	ldr	r3, [r3, #0]
    1372:	4718      	bx	r3
    1374:	200000a8 	.word	0x200000a8

00001378 <__printk_hook_install>:
	_char_out = fn;
    1378:	4b01      	ldr	r3, [pc, #4]	; (1380 <__printk_hook_install+0x8>)
    137a:	6018      	str	r0, [r3, #0]
}
    137c:	4770      	bx	lr
    137e:	bf00      	nop
    1380:	200000a8 	.word	0x200000a8

00001384 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1384:	b507      	push	{r0, r1, r2, lr}
    1386:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1388:	2100      	movs	r1, #0
{
    138a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    138c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    138e:	4803      	ldr	r0, [pc, #12]	; (139c <vprintk+0x18>)
    1390:	a901      	add	r1, sp, #4
    1392:	f000 fac9 	bl	1928 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1396:	b003      	add	sp, #12
    1398:	f85d fb04 	ldr.w	pc, [sp], #4
    139c:	00001369 	.word	0x00001369

000013a0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    13a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    13a4:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    13a8:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    13aa:	f019 0f08 	tst.w	r9, #8
{
    13ae:	4604      	mov	r4, r0
    13b0:	9203      	str	r2, [sp, #12]
	if (processing) {
    13b2:	d022      	beq.n	13fa <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    13b4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    13b6:	bf0c      	ite	eq
    13b8:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    13bc:	f049 0920 	orrne.w	r9, r9, #32
    13c0:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    13c4:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    13c6:	4620      	mov	r0, r4
    13c8:	f004 fcfe 	bl	5dc8 <z_spin_unlock_valid>
    13cc:	b968      	cbnz	r0, 13ea <process_event+0x4a>
    13ce:	4a9f      	ldr	r2, [pc, #636]	; (164c <process_event+0x2ac>)
    13d0:	499f      	ldr	r1, [pc, #636]	; (1650 <process_event+0x2b0>)
    13d2:	48a0      	ldr	r0, [pc, #640]	; (1654 <process_event+0x2b4>)
    13d4:	23ac      	movs	r3, #172	; 0xac
    13d6:	f006 ff9b 	bl	8310 <printk>
    13da:	489f      	ldr	r0, [pc, #636]	; (1658 <process_event+0x2b8>)
    13dc:	4621      	mov	r1, r4
    13de:	f006 ff97 	bl	8310 <printk>
    13e2:	489a      	ldr	r0, [pc, #616]	; (164c <process_event+0x2ac>)
    13e4:	21ac      	movs	r1, #172	; 0xac
    13e6:	f007 f85f 	bl	84a8 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    13ea:	9b03      	ldr	r3, [sp, #12]
    13ec:	f383 8811 	msr	BASEPRI, r3
    13f0:	f3bf 8f6f 	isb	sy
}
    13f4:	b005      	add	sp, #20
    13f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    13fa:	4f98      	ldr	r7, [pc, #608]	; (165c <process_event+0x2bc>)
    13fc:	f8df 8254 	ldr.w	r8, [pc, #596]	; 1654 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1400:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1404:	2902      	cmp	r1, #2
    1406:	d106      	bne.n	1416 <process_event+0x76>
			evt = process_recheck(mgr);
    1408:	4620      	mov	r0, r4
    140a:	f006 ff8e 	bl	832a <process_recheck>
		if (evt == EVT_NOP) {
    140e:	2800      	cmp	r0, #0
    1410:	d0d8      	beq.n	13c4 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    1412:	2801      	cmp	r0, #1
    1414:	d168      	bne.n	14e8 <process_event+0x148>
			res = mgr->last_res;
    1416:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    141a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    141c:	f1bb 0f00 	cmp.w	fp, #0
    1420:	da0a      	bge.n	1438 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1422:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1424:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1426:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    142a:	e9c4 6600 	strd	r6, r6, [r4]
    142e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1432:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1434:	9601      	str	r6, [sp, #4]
    1436:	e027      	b.n	1488 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1438:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    143c:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    143e:	2901      	cmp	r1, #1
    1440:	d834      	bhi.n	14ac <process_event+0x10c>
	list->head = NULL;
    1442:	2100      	movs	r1, #0
    1444:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    1448:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    144a:	6825      	ldr	r5, [r4, #0]
    144c:	b29b      	uxth	r3, r3
	list->tail = NULL;
    144e:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1452:	d10c      	bne.n	146e <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1454:	428d      	cmp	r5, r1
    1456:	462a      	mov	r2, r5
    1458:	bf38      	it	cc
    145a:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    145c:	b12a      	cbz	r2, 146a <process_event+0xca>
				mgr->refs += 1U;
    145e:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1460:	6812      	ldr	r2, [r2, #0]
    1462:	3101      	adds	r1, #1
    1464:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1466:	2a00      	cmp	r2, #0
    1468:	d1f8      	bne.n	145c <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    146a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    146e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1470:	4620      	mov	r0, r4
    1472:	f006 ff5a 	bl	832a <process_recheck>
    1476:	4606      	mov	r6, r0
    1478:	2800      	cmp	r0, #0
    147a:	d0db      	beq.n	1434 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    147c:	8ba3      	ldrh	r3, [r4, #28]
    147e:	f043 0320 	orr.w	r3, r3, #32
    1482:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1484:	2300      	movs	r3, #0
    1486:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1488:	8ba3      	ldrh	r3, [r4, #28]
    148a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    148e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1490:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1492:	d003      	beq.n	149c <process_event+0xfc>
		if (do_monitors
    1494:	68a2      	ldr	r2, [r4, #8]
    1496:	2a00      	cmp	r2, #0
    1498:	f040 80f0 	bne.w	167c <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    149c:	b91d      	cbnz	r5, 14a6 <process_event+0x106>
		    || (transit != NULL)) {
    149e:	9a01      	ldr	r2, [sp, #4]
    14a0:	2a00      	cmp	r2, #0
    14a2:	f000 8136 	beq.w	1712 <process_event+0x372>
    14a6:	f04f 0900 	mov.w	r9, #0
    14aa:	e0e9      	b.n	1680 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    14ac:	2a04      	cmp	r2, #4
    14ae:	d10e      	bne.n	14ce <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14b0:	f023 0307 	bic.w	r3, r3, #7
    14b4:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    14b6:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    14b8:	4620      	mov	r0, r4
    14ba:	f006 ff36 	bl	832a <process_recheck>
    14be:	4605      	mov	r5, r0
    14c0:	b118      	cbz	r0, 14ca <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14c2:	f042 0220 	orr.w	r2, r2, #32
    14c6:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    14c8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    14ca:	9501      	str	r5, [sp, #4]
    14cc:	e7dc      	b.n	1488 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    14ce:	4640      	mov	r0, r8
    14d0:	4963      	ldr	r1, [pc, #396]	; (1660 <process_event+0x2c0>)
    14d2:	f240 131b 	movw	r3, #283	; 0x11b
    14d6:	463a      	mov	r2, r7
    14d8:	f006 ff1a 	bl	8310 <printk>
    14dc:	f240 111b 	movw	r1, #283	; 0x11b
    14e0:	4638      	mov	r0, r7
    14e2:	f006 ffe1 	bl	84a8 <assert_post_action>
    14e6:	e7ef      	b.n	14c8 <process_event+0x128>
		} else if (evt == EVT_START) {
    14e8:	2803      	cmp	r0, #3
    14ea:	d135      	bne.n	1558 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    14ec:	f1b9 0f00 	cmp.w	r9, #0
    14f0:	d00b      	beq.n	150a <process_event+0x16a>
    14f2:	495c      	ldr	r1, [pc, #368]	; (1664 <process_event+0x2c4>)
    14f4:	4640      	mov	r0, r8
    14f6:	f44f 73ab 	mov.w	r3, #342	; 0x156
    14fa:	463a      	mov	r2, r7
    14fc:	f006 ff08 	bl	8310 <printk>
    1500:	f44f 71ab 	mov.w	r1, #342	; 0x156
    1504:	4638      	mov	r0, r7
    1506:	f006 ffcf 	bl	84a8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    150a:	6823      	ldr	r3, [r4, #0]
    150c:	b95b      	cbnz	r3, 1526 <process_event+0x186>
    150e:	4956      	ldr	r1, [pc, #344]	; (1668 <process_event+0x2c8>)
    1510:	4640      	mov	r0, r8
    1512:	f240 1357 	movw	r3, #343	; 0x157
    1516:	463a      	mov	r2, r7
    1518:	f006 fefa 	bl	8310 <printk>
    151c:	f240 1157 	movw	r1, #343	; 0x157
    1520:	4638      	mov	r0, r7
    1522:	f006 ffc1 	bl	84a8 <assert_post_action>
			transit = mgr->transitions->start;
    1526:	6923      	ldr	r3, [r4, #16]
    1528:	681b      	ldr	r3, [r3, #0]
    152a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    152c:	b95b      	cbnz	r3, 1546 <process_event+0x1a6>
    152e:	494f      	ldr	r1, [pc, #316]	; (166c <process_event+0x2cc>)
    1530:	4640      	mov	r0, r8
    1532:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    1536:	463a      	mov	r2, r7
    1538:	f006 feea 	bl	8310 <printk>
    153c:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    1540:	4638      	mov	r0, r7
    1542:	f006 ffb1 	bl	84a8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1546:	8ba3      	ldrh	r3, [r4, #28]
    1548:	f023 0307 	bic.w	r3, r3, #7
    154c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1550:	83a3      	strh	r3, [r4, #28]
}
    1552:	2500      	movs	r5, #0
		res = 0;
    1554:	46ab      	mov	fp, r5
}
    1556:	e797      	b.n	1488 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    1558:	2804      	cmp	r0, #4
    155a:	d132      	bne.n	15c2 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    155c:	f1b9 0f02 	cmp.w	r9, #2
    1560:	d00b      	beq.n	157a <process_event+0x1da>
    1562:	4943      	ldr	r1, [pc, #268]	; (1670 <process_event+0x2d0>)
    1564:	4640      	mov	r0, r8
    1566:	f240 135d 	movw	r3, #349	; 0x15d
    156a:	463a      	mov	r2, r7
    156c:	f006 fed0 	bl	8310 <printk>
    1570:	f240 115d 	movw	r1, #349	; 0x15d
    1574:	4638      	mov	r0, r7
    1576:	f006 ff97 	bl	84a8 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    157a:	8be3      	ldrh	r3, [r4, #30]
    157c:	b15b      	cbz	r3, 1596 <process_event+0x1f6>
    157e:	493d      	ldr	r1, [pc, #244]	; (1674 <process_event+0x2d4>)
    1580:	4640      	mov	r0, r8
    1582:	f44f 73af 	mov.w	r3, #350	; 0x15e
    1586:	463a      	mov	r2, r7
    1588:	f006 fec2 	bl	8310 <printk>
    158c:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1590:	4638      	mov	r0, r7
    1592:	f006 ff89 	bl	84a8 <assert_post_action>
			transit = mgr->transitions->stop;
    1596:	6923      	ldr	r3, [r4, #16]
    1598:	685b      	ldr	r3, [r3, #4]
    159a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    159c:	b95b      	cbnz	r3, 15b6 <process_event+0x216>
    159e:	4933      	ldr	r1, [pc, #204]	; (166c <process_event+0x2cc>)
    15a0:	4640      	mov	r0, r8
    15a2:	f240 1361 	movw	r3, #353	; 0x161
    15a6:	463a      	mov	r2, r7
    15a8:	f006 feb2 	bl	8310 <printk>
    15ac:	f240 1161 	movw	r1, #353	; 0x161
    15b0:	4638      	mov	r0, r7
    15b2:	f006 ff79 	bl	84a8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15b6:	8ba3      	ldrh	r3, [r4, #28]
    15b8:	f023 0307 	bic.w	r3, r3, #7
    15bc:	f043 0304 	orr.w	r3, r3, #4
    15c0:	e7c6      	b.n	1550 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    15c2:	2805      	cmp	r0, #5
    15c4:	d132      	bne.n	162c <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    15c6:	f1b9 0f01 	cmp.w	r9, #1
    15ca:	d00b      	beq.n	15e4 <process_event+0x244>
    15cc:	492a      	ldr	r1, [pc, #168]	; (1678 <process_event+0x2d8>)
    15ce:	4640      	mov	r0, r8
    15d0:	f44f 73b2 	mov.w	r3, #356	; 0x164
    15d4:	463a      	mov	r2, r7
    15d6:	f006 fe9b 	bl	8310 <printk>
    15da:	f44f 71b2 	mov.w	r1, #356	; 0x164
    15de:	4638      	mov	r0, r7
    15e0:	f006 ff62 	bl	84a8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    15e4:	6823      	ldr	r3, [r4, #0]
    15e6:	b95b      	cbnz	r3, 1600 <process_event+0x260>
    15e8:	491f      	ldr	r1, [pc, #124]	; (1668 <process_event+0x2c8>)
    15ea:	4640      	mov	r0, r8
    15ec:	f240 1365 	movw	r3, #357	; 0x165
    15f0:	463a      	mov	r2, r7
    15f2:	f006 fe8d 	bl	8310 <printk>
    15f6:	f240 1165 	movw	r1, #357	; 0x165
    15fa:	4638      	mov	r0, r7
    15fc:	f006 ff54 	bl	84a8 <assert_post_action>
			transit = mgr->transitions->reset;
    1600:	6923      	ldr	r3, [r4, #16]
    1602:	689b      	ldr	r3, [r3, #8]
    1604:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1606:	b95b      	cbnz	r3, 1620 <process_event+0x280>
    1608:	4918      	ldr	r1, [pc, #96]	; (166c <process_event+0x2cc>)
    160a:	4640      	mov	r0, r8
    160c:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1610:	463a      	mov	r2, r7
    1612:	f006 fe7d 	bl	8310 <printk>
    1616:	f44f 71b4 	mov.w	r1, #360	; 0x168
    161a:	4638      	mov	r0, r7
    161c:	f006 ff44 	bl	84a8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1620:	8ba3      	ldrh	r3, [r4, #28]
    1622:	f023 0307 	bic.w	r3, r3, #7
    1626:	f043 0305 	orr.w	r3, r3, #5
    162a:	e791      	b.n	1550 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    162c:	490c      	ldr	r1, [pc, #48]	; (1660 <process_event+0x2c0>)
    162e:	f240 136b 	movw	r3, #363	; 0x16b
    1632:	463a      	mov	r2, r7
    1634:	4640      	mov	r0, r8
    1636:	f006 fe6b 	bl	8310 <printk>
    163a:	2500      	movs	r5, #0
    163c:	f240 116b 	movw	r1, #363	; 0x16b
    1640:	4638      	mov	r0, r7
    1642:	f006 ff31 	bl	84a8 <assert_post_action>
		onoff_transition_fn transit = NULL;
    1646:	9501      	str	r5, [sp, #4]
    1648:	e784      	b.n	1554 <process_event+0x1b4>
    164a:	bf00      	nop
    164c:	0000966e 	.word	0x0000966e
    1650:	00009694 	.word	0x00009694
    1654:	00009128 	.word	0x00009128
    1658:	000096ab 	.word	0x000096ab
    165c:	000095cb 	.word	0x000095cb
    1660:	00009d9f 	.word	0x00009d9f
    1664:	000095ed 	.word	0x000095ed
    1668:	000095f9 	.word	0x000095f9
    166c:	0000961c 	.word	0x0000961c
    1670:	00009633 	.word	0x00009633
    1674:	00009649 	.word	0x00009649
    1678:	00009658 	.word	0x00009658
				   && !sys_slist_is_empty(&mgr->monitors);
    167c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1680:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    1684:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    1688:	83a3      	strh	r3, [r4, #28]
    168a:	4650      	mov	r0, sl
    168c:	f004 fb9c 	bl	5dc8 <z_spin_unlock_valid>
    1690:	b968      	cbnz	r0, 16ae <process_event+0x30e>
    1692:	4a3a      	ldr	r2, [pc, #232]	; (177c <process_event+0x3dc>)
    1694:	493a      	ldr	r1, [pc, #232]	; (1780 <process_event+0x3e0>)
    1696:	23ac      	movs	r3, #172	; 0xac
    1698:	4640      	mov	r0, r8
    169a:	f006 fe39 	bl	8310 <printk>
    169e:	4839      	ldr	r0, [pc, #228]	; (1784 <process_event+0x3e4>)
    16a0:	4651      	mov	r1, sl
    16a2:	f006 fe35 	bl	8310 <printk>
    16a6:	4835      	ldr	r0, [pc, #212]	; (177c <process_event+0x3dc>)
    16a8:	21ac      	movs	r1, #172	; 0xac
    16aa:	f006 fefd 	bl	84a8 <assert_post_action>
    16ae:	9b03      	ldr	r3, [sp, #12]
    16b0:	f383 8811 	msr	BASEPRI, r3
    16b4:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    16b8:	f1b9 0f00 	cmp.w	r9, #0
    16bc:	d138      	bne.n	1730 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    16be:	2d00      	cmp	r5, #0
    16c0:	d14b      	bne.n	175a <process_event+0x3ba>
			if (transit != NULL) {
    16c2:	9b01      	ldr	r3, [sp, #4]
    16c4:	b113      	cbz	r3, 16cc <process_event+0x32c>
				transit(mgr, transition_complete);
    16c6:	4930      	ldr	r1, [pc, #192]	; (1788 <process_event+0x3e8>)
    16c8:	4620      	mov	r0, r4
    16ca:	4798      	blx	r3
	__asm__ volatile(
    16cc:	f04f 0320 	mov.w	r3, #32
    16d0:	f3ef 8b11 	mrs	fp, BASEPRI
    16d4:	f383 8812 	msr	BASEPRI_MAX, r3
    16d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16dc:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    16de:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    16e2:	f004 fb63 	bl	5dac <z_spin_lock_valid>
    16e6:	b968      	cbnz	r0, 1704 <process_event+0x364>
    16e8:	4a24      	ldr	r2, [pc, #144]	; (177c <process_event+0x3dc>)
    16ea:	4928      	ldr	r1, [pc, #160]	; (178c <process_event+0x3ec>)
    16ec:	2381      	movs	r3, #129	; 0x81
    16ee:	4640      	mov	r0, r8
    16f0:	f006 fe0e 	bl	8310 <printk>
    16f4:	4826      	ldr	r0, [pc, #152]	; (1790 <process_event+0x3f0>)
    16f6:	4651      	mov	r1, sl
    16f8:	f006 fe0a 	bl	8310 <printk>
    16fc:	481f      	ldr	r0, [pc, #124]	; (177c <process_event+0x3dc>)
    16fe:	2181      	movs	r1, #129	; 0x81
    1700:	f006 fed2 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    1704:	4650      	mov	r0, sl
    1706:	f004 fb6f 	bl	5de8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    170a:	8ba3      	ldrh	r3, [r4, #28]
    170c:	f023 0308 	bic.w	r3, r3, #8
    1710:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1712:	8ba3      	ldrh	r3, [r4, #28]
    1714:	06da      	lsls	r2, r3, #27
    1716:	d528      	bpl.n	176a <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1718:	f023 0310 	bic.w	r3, r3, #16
    171c:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    171e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1720:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1724:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1728:	2900      	cmp	r1, #0
    172a:	f47f ae6b 	bne.w	1404 <process_event+0x64>
out:
    172e:	e649      	b.n	13c4 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1730:	68a1      	ldr	r1, [r4, #8]
    1732:	2900      	cmp	r1, #0
    1734:	d0c3      	beq.n	16be <process_event+0x31e>
	return node->next;
    1736:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    1738:	9a02      	ldr	r2, [sp, #8]
    173a:	2b00      	cmp	r3, #0
    173c:	bf38      	it	cc
    173e:	2300      	movcc	r3, #0
    1740:	4699      	mov	r9, r3
    1742:	684b      	ldr	r3, [r1, #4]
    1744:	4620      	mov	r0, r4
    1746:	461e      	mov	r6, r3
    1748:	465b      	mov	r3, fp
    174a:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    174c:	f1b9 0f00 	cmp.w	r9, #0
    1750:	d0b5      	beq.n	16be <process_event+0x31e>
    1752:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1756:	4649      	mov	r1, r9
    1758:	e7ee      	b.n	1738 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    175a:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    175c:	9a02      	ldr	r2, [sp, #8]
    175e:	682d      	ldr	r5, [r5, #0]
    1760:	465b      	mov	r3, fp
    1762:	4620      	mov	r0, r4
    1764:	f006 fdfd 	bl	8362 <notify_one>
    1768:	e7a9      	b.n	16be <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    176a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    176e:	bf1e      	ittt	ne
    1770:	f023 0320 	bicne.w	r3, r3, #32
    1774:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    1776:	2102      	movne	r1, #2
    1778:	e7d2      	b.n	1720 <process_event+0x380>
    177a:	bf00      	nop
    177c:	0000966e 	.word	0x0000966e
    1780:	00009694 	.word	0x00009694
    1784:	000096ab 	.word	0x000096ab
    1788:	00001795 	.word	0x00001795
    178c:	000096c0 	.word	0x000096c0
    1790:	000096d5 	.word	0x000096d5

00001794 <transition_complete>:
{
    1794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1796:	4604      	mov	r4, r0
    1798:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    179a:	f100 0614 	add.w	r6, r0, #20
    179e:	f04f 0320 	mov.w	r3, #32
    17a2:	f3ef 8711 	mrs	r7, BASEPRI
    17a6:	f383 8812 	msr	BASEPRI_MAX, r3
    17aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    17ae:	4630      	mov	r0, r6
    17b0:	f004 fafc 	bl	5dac <z_spin_lock_valid>
    17b4:	b968      	cbnz	r0, 17d2 <transition_complete+0x3e>
    17b6:	4a0c      	ldr	r2, [pc, #48]	; (17e8 <transition_complete+0x54>)
    17b8:	490c      	ldr	r1, [pc, #48]	; (17ec <transition_complete+0x58>)
    17ba:	480d      	ldr	r0, [pc, #52]	; (17f0 <transition_complete+0x5c>)
    17bc:	2381      	movs	r3, #129	; 0x81
    17be:	f006 fda7 	bl	8310 <printk>
    17c2:	480c      	ldr	r0, [pc, #48]	; (17f4 <transition_complete+0x60>)
    17c4:	4631      	mov	r1, r6
    17c6:	f006 fda3 	bl	8310 <printk>
    17ca:	4807      	ldr	r0, [pc, #28]	; (17e8 <transition_complete+0x54>)
    17cc:	2181      	movs	r1, #129	; 0x81
    17ce:	f006 fe6b 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    17d2:	4630      	mov	r0, r6
    17d4:	f004 fb08 	bl	5de8 <z_spin_lock_set_owner>
	mgr->last_res = res;
    17d8:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    17da:	463a      	mov	r2, r7
    17dc:	4620      	mov	r0, r4
    17de:	2101      	movs	r1, #1
}
    17e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    17e4:	f7ff bddc 	b.w	13a0 <process_event>
    17e8:	0000966e 	.word	0x0000966e
    17ec:	000096c0 	.word	0x000096c0
    17f0:	00009128 	.word	0x00009128
    17f4:	000096d5 	.word	0x000096d5

000017f8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    17f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    17fc:	4604      	mov	r4, r0
    17fe:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    1800:	f006 fdc5 	bl	838e <validate_args>

	if (rv < 0) {
    1804:	1e05      	subs	r5, r0, #0
    1806:	db5e      	blt.n	18c6 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1808:	f104 0914 	add.w	r9, r4, #20
    180c:	f04f 0320 	mov.w	r3, #32
    1810:	f3ef 8a11 	mrs	sl, BASEPRI
    1814:	f383 8812 	msr	BASEPRI_MAX, r3
    1818:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    181c:	4648      	mov	r0, r9
    181e:	f004 fac5 	bl	5dac <z_spin_lock_valid>
    1822:	b968      	cbnz	r0, 1840 <onoff_request+0x48>
    1824:	4a38      	ldr	r2, [pc, #224]	; (1908 <onoff_request+0x110>)
    1826:	4939      	ldr	r1, [pc, #228]	; (190c <onoff_request+0x114>)
    1828:	4839      	ldr	r0, [pc, #228]	; (1910 <onoff_request+0x118>)
    182a:	2381      	movs	r3, #129	; 0x81
    182c:	f006 fd70 	bl	8310 <printk>
    1830:	4838      	ldr	r0, [pc, #224]	; (1914 <onoff_request+0x11c>)
    1832:	4649      	mov	r1, r9
    1834:	f006 fd6c 	bl	8310 <printk>
    1838:	4833      	ldr	r0, [pc, #204]	; (1908 <onoff_request+0x110>)
    183a:	2181      	movs	r1, #129	; 0x81
    183c:	f006 fe34 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    1840:	4648      	mov	r0, r9
    1842:	f004 fad1 	bl	5de8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    1846:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1848:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    184a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    184e:	428b      	cmp	r3, r1
    1850:	f002 0607 	and.w	r6, r2, #7
    1854:	d050      	beq.n	18f8 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    1856:	2e02      	cmp	r6, #2
    1858:	d124      	bne.n	18a4 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    185a:	3301      	adds	r3, #1
    185c:	83e3      	strh	r3, [r4, #30]
	rv = state;
    185e:	4635      	mov	r5, r6
		notify = true;
    1860:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1864:	4648      	mov	r0, r9
    1866:	f004 faaf 	bl	5dc8 <z_spin_unlock_valid>
    186a:	b968      	cbnz	r0, 1888 <onoff_request+0x90>
    186c:	4a26      	ldr	r2, [pc, #152]	; (1908 <onoff_request+0x110>)
    186e:	492a      	ldr	r1, [pc, #168]	; (1918 <onoff_request+0x120>)
    1870:	4827      	ldr	r0, [pc, #156]	; (1910 <onoff_request+0x118>)
    1872:	23ac      	movs	r3, #172	; 0xac
    1874:	f006 fd4c 	bl	8310 <printk>
    1878:	4828      	ldr	r0, [pc, #160]	; (191c <onoff_request+0x124>)
    187a:	4649      	mov	r1, r9
    187c:	f006 fd48 	bl	8310 <printk>
    1880:	4821      	ldr	r0, [pc, #132]	; (1908 <onoff_request+0x110>)
    1882:	21ac      	movs	r1, #172	; 0xac
    1884:	f006 fe10 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    1888:	f38a 8811 	msr	BASEPRI, sl
    188c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    1890:	f1b8 0f00 	cmp.w	r8, #0
    1894:	d017      	beq.n	18c6 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1896:	2300      	movs	r3, #0
    1898:	4632      	mov	r2, r6
    189a:	4639      	mov	r1, r7
    189c:	4620      	mov	r0, r4
    189e:	f006 fd60 	bl	8362 <notify_one>
    18a2:	e010      	b.n	18c6 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    18a4:	0793      	lsls	r3, r2, #30
    18a6:	d001      	beq.n	18ac <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    18a8:	2e06      	cmp	r6, #6
    18aa:	d10f      	bne.n	18cc <onoff_request+0xd4>
	parent->next = child;
    18ac:	2300      	movs	r3, #0
    18ae:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    18b0:	6863      	ldr	r3, [r4, #4]
    18b2:	b9f3      	cbnz	r3, 18f2 <onoff_request+0xfa>
	list->head = node;
    18b4:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    18b8:	4635      	mov	r5, r6
    18ba:	b9fe      	cbnz	r6, 18fc <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    18bc:	4652      	mov	r2, sl
    18be:	2102      	movs	r1, #2
    18c0:	4620      	mov	r0, r4
    18c2:	f7ff fd6d 	bl	13a0 <process_event>
		}
	}

	return rv;
}
    18c6:	4628      	mov	r0, r5
    18c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    18cc:	2e05      	cmp	r6, #5
    18ce:	d018      	beq.n	1902 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    18d0:	2e01      	cmp	r6, #1
    18d2:	d00b      	beq.n	18ec <onoff_request+0xf4>
    18d4:	4912      	ldr	r1, [pc, #72]	; (1920 <onoff_request+0x128>)
    18d6:	480e      	ldr	r0, [pc, #56]	; (1910 <onoff_request+0x118>)
    18d8:	4a12      	ldr	r2, [pc, #72]	; (1924 <onoff_request+0x12c>)
    18da:	f240 13c9 	movw	r3, #457	; 0x1c9
    18de:	f006 fd17 	bl	8310 <printk>
    18e2:	4810      	ldr	r0, [pc, #64]	; (1924 <onoff_request+0x12c>)
    18e4:	f240 11c9 	movw	r1, #457	; 0x1c9
    18e8:	f006 fdde 	bl	84a8 <assert_post_action>
		rv = -EIO;
    18ec:	f06f 0504 	mvn.w	r5, #4
    18f0:	e004      	b.n	18fc <onoff_request+0x104>
	parent->next = child;
    18f2:	601f      	str	r7, [r3, #0]
	list->tail = node;
    18f4:	6067      	str	r7, [r4, #4]
}
    18f6:	e7df      	b.n	18b8 <onoff_request+0xc0>
		rv = -EAGAIN;
    18f8:	f06f 050a 	mvn.w	r5, #10
    18fc:	f04f 0800 	mov.w	r8, #0
    1900:	e7b0      	b.n	1864 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1902:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1906:	e7f9      	b.n	18fc <onoff_request+0x104>
    1908:	0000966e 	.word	0x0000966e
    190c:	000096c0 	.word	0x000096c0
    1910:	00009128 	.word	0x00009128
    1914:	000096d5 	.word	0x000096d5
    1918:	00009694 	.word	0x00009694
    191c:	000096ab 	.word	0x000096ab
    1920:	00009658 	.word	0x00009658
    1924:	000095cb 	.word	0x000095cb

00001928 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    192c:	b091      	sub	sp, #68	; 0x44
    192e:	468b      	mov	fp, r1
    1930:	9002      	str	r0, [sp, #8]
    1932:	4692      	mov	sl, r2
    1934:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1936:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1938:	f89a 0000 	ldrb.w	r0, [sl]
    193c:	b908      	cbnz	r0, 1942 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    193e:	4628      	mov	r0, r5
    1940:	e35e      	b.n	2000 <cbvprintf+0x6d8>
		if (*fp != '%') {
    1942:	2825      	cmp	r0, #37	; 0x25
    1944:	f10a 0701 	add.w	r7, sl, #1
    1948:	d007      	beq.n	195a <cbvprintf+0x32>
			OUTC('%');
    194a:	9b02      	ldr	r3, [sp, #8]
    194c:	4659      	mov	r1, fp
    194e:	4798      	blx	r3
    1950:	2800      	cmp	r0, #0
    1952:	f2c0 8355 	blt.w	2000 <cbvprintf+0x6d8>
    1956:	3501      	adds	r5, #1
			break;
    1958:	e210      	b.n	1d7c <cbvprintf+0x454>
		} state = {
    195a:	2218      	movs	r2, #24
    195c:	2100      	movs	r1, #0
    195e:	a80a      	add	r0, sp, #40	; 0x28
    1960:	f006 fdeb 	bl	853a <memset>
	if (*sp == '%') {
    1964:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1968:	2b25      	cmp	r3, #37	; 0x25
    196a:	d078      	beq.n	1a5e <cbvprintf+0x136>
    196c:	2200      	movs	r2, #0
    196e:	4694      	mov	ip, r2
    1970:	4616      	mov	r6, r2
    1972:	4696      	mov	lr, r2
    1974:	4610      	mov	r0, r2
    1976:	4639      	mov	r1, r7
		switch (*sp) {
    1978:	f817 3b01 	ldrb.w	r3, [r7], #1
    197c:	2b2b      	cmp	r3, #43	; 0x2b
    197e:	f000 809d 	beq.w	1abc <cbvprintf+0x194>
    1982:	f200 8094 	bhi.w	1aae <cbvprintf+0x186>
    1986:	2b20      	cmp	r3, #32
    1988:	f000 809b 	beq.w	1ac2 <cbvprintf+0x19a>
    198c:	2b23      	cmp	r3, #35	; 0x23
    198e:	f000 809a 	beq.w	1ac6 <cbvprintf+0x19e>
    1992:	b128      	cbz	r0, 19a0 <cbvprintf+0x78>
    1994:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1998:	f040 0004 	orr.w	r0, r0, #4
    199c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    19a0:	f1be 0f00 	cmp.w	lr, #0
    19a4:	d005      	beq.n	19b2 <cbvprintf+0x8a>
    19a6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    19aa:	f040 0008 	orr.w	r0, r0, #8
    19ae:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    19b2:	b12e      	cbz	r6, 19c0 <cbvprintf+0x98>
    19b4:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    19b8:	f040 0010 	orr.w	r0, r0, #16
    19bc:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    19c0:	f1bc 0f00 	cmp.w	ip, #0
    19c4:	d005      	beq.n	19d2 <cbvprintf+0xaa>
    19c6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    19ca:	f040 0020 	orr.w	r0, r0, #32
    19ce:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    19d2:	b12a      	cbz	r2, 19e0 <cbvprintf+0xb8>
    19d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    19d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    19dc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    19e0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    19e4:	f002 0044 	and.w	r0, r2, #68	; 0x44
    19e8:	2844      	cmp	r0, #68	; 0x44
    19ea:	d103      	bne.n	19f4 <cbvprintf+0xcc>
		conv->flag_zero = false;
    19ec:	f36f 1286 	bfc	r2, #6, #1
    19f0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    19f4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    19f8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    19fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    19fe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1a02:	d17b      	bne.n	1afc <cbvprintf+0x1d4>
		conv->width_star = true;
    1a04:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1a08:	f042 0201 	orr.w	r2, r2, #1
    1a0c:	1c4b      	adds	r3, r1, #1
    1a0e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1a12:	781a      	ldrb	r2, [r3, #0]
    1a14:	2a2e      	cmp	r2, #46	; 0x2e
    1a16:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1a1a:	bf0c      	ite	eq
    1a1c:	2101      	moveq	r1, #1
    1a1e:	2100      	movne	r1, #0
    1a20:	f361 0241 	bfi	r2, r1, #1, #1
    1a24:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1a28:	d174      	bne.n	1b14 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1a2a:	785a      	ldrb	r2, [r3, #1]
    1a2c:	2a2a      	cmp	r2, #42	; 0x2a
    1a2e:	d06a      	beq.n	1b06 <cbvprintf+0x1de>
    1a30:	3301      	adds	r3, #1
	size_t val = 0;
    1a32:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1a34:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1a36:	4618      	mov	r0, r3
    1a38:	f810 2b01 	ldrb.w	r2, [r0], #1
    1a3c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1a40:	2f09      	cmp	r7, #9
    1a42:	f240 808e 	bls.w	1b62 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1a46:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1a4a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1a4c:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1a50:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1a54:	f361 0241 	bfi	r2, r1, #1, #1
    1a58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1a5c:	e05a      	b.n	1b14 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1a5e:	f10a 0702 	add.w	r7, sl, #2
    1a62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1a66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1a6a:	07d9      	lsls	r1, r3, #31
    1a6c:	f140 8149 	bpl.w	1d02 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1a70:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1a74:	f1b9 0f00 	cmp.w	r9, #0
    1a78:	da07      	bge.n	1a8a <cbvprintf+0x162>
				conv->flag_dash = true;
    1a7a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1a7e:	f042 0204 	orr.w	r2, r2, #4
    1a82:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1a86:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1a8a:	075a      	lsls	r2, r3, #29
    1a8c:	f140 8142 	bpl.w	1d14 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1a90:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1a94:	f1b8 0f00 	cmp.w	r8, #0
    1a98:	f280 8141 	bge.w	1d1e <cbvprintf+0x3f6>
				conv->prec_present = false;
    1a9c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1aa0:	f36f 0341 	bfc	r3, #1, #1
    1aa4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1aa8:	f04f 38ff 	mov.w	r8, #4294967295
    1aac:	e137      	b.n	1d1e <cbvprintf+0x3f6>
		switch (*sp) {
    1aae:	2b2d      	cmp	r3, #45	; 0x2d
    1ab0:	d00c      	beq.n	1acc <cbvprintf+0x1a4>
    1ab2:	2b30      	cmp	r3, #48	; 0x30
    1ab4:	f47f af6d 	bne.w	1992 <cbvprintf+0x6a>
			conv->flag_zero = true;
    1ab8:	2201      	movs	r2, #1
	} while (loop);
    1aba:	e75c      	b.n	1976 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1abc:	f04f 0e01 	mov.w	lr, #1
    1ac0:	e759      	b.n	1976 <cbvprintf+0x4e>
			conv->flag_space = true;
    1ac2:	2601      	movs	r6, #1
    1ac4:	e757      	b.n	1976 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1ac6:	f04f 0c01 	mov.w	ip, #1
    1aca:	e754      	b.n	1976 <cbvprintf+0x4e>
		switch (*sp) {
    1acc:	2001      	movs	r0, #1
    1ace:	e752      	b.n	1976 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1ad0:	fb0c 0202 	mla	r2, ip, r2, r0
    1ad4:	3a30      	subs	r2, #48	; 0x30
    1ad6:	4633      	mov	r3, r6
    1ad8:	461e      	mov	r6, r3
    1ada:	f816 0b01 	ldrb.w	r0, [r6], #1
    1ade:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1ae2:	2f09      	cmp	r7, #9
    1ae4:	d9f4      	bls.n	1ad0 <cbvprintf+0x1a8>
	if (sp != wp) {
    1ae6:	4299      	cmp	r1, r3
    1ae8:	d093      	beq.n	1a12 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1aea:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1aee:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1af0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1af2:	f362 0141 	bfi	r1, r2, #1, #1
    1af6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1afa:	e78a      	b.n	1a12 <cbvprintf+0xea>
    1afc:	460b      	mov	r3, r1
	size_t val = 0;
    1afe:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1b00:	f04f 0c0a 	mov.w	ip, #10
    1b04:	e7e8      	b.n	1ad8 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1b06:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b0a:	f042 0204 	orr.w	r2, r2, #4
    1b0e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1b12:	3302      	adds	r3, #2
	switch (*sp) {
    1b14:	461f      	mov	r7, r3
    1b16:	f817 2b01 	ldrb.w	r2, [r7], #1
    1b1a:	2a6c      	cmp	r2, #108	; 0x6c
    1b1c:	d041      	beq.n	1ba2 <cbvprintf+0x27a>
    1b1e:	d825      	bhi.n	1b6c <cbvprintf+0x244>
    1b20:	2a68      	cmp	r2, #104	; 0x68
    1b22:	d02b      	beq.n	1b7c <cbvprintf+0x254>
    1b24:	2a6a      	cmp	r2, #106	; 0x6a
    1b26:	d046      	beq.n	1bb6 <cbvprintf+0x28e>
    1b28:	2a4c      	cmp	r2, #76	; 0x4c
    1b2a:	d04c      	beq.n	1bc6 <cbvprintf+0x29e>
    1b2c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1b2e:	f817 2b01 	ldrb.w	r2, [r7], #1
    1b32:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b36:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1b3a:	2a78      	cmp	r2, #120	; 0x78
    1b3c:	f200 80d9 	bhi.w	1cf2 <cbvprintf+0x3ca>
    1b40:	2a57      	cmp	r2, #87	; 0x57
    1b42:	d84d      	bhi.n	1be0 <cbvprintf+0x2b8>
    1b44:	2a41      	cmp	r2, #65	; 0x41
    1b46:	d003      	beq.n	1b50 <cbvprintf+0x228>
    1b48:	3a45      	subs	r2, #69	; 0x45
    1b4a:	2a02      	cmp	r2, #2
    1b4c:	f200 80d1 	bhi.w	1cf2 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1b50:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1b54:	2204      	movs	r2, #4
    1b56:	f362 0302 	bfi	r3, r2, #0, #3
    1b5a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1b5e:	2301      	movs	r3, #1
			break;
    1b60:	e09e      	b.n	1ca0 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1b62:	fb06 2101 	mla	r1, r6, r1, r2
    1b66:	3930      	subs	r1, #48	; 0x30
    1b68:	4603      	mov	r3, r0
    1b6a:	e764      	b.n	1a36 <cbvprintf+0x10e>
	switch (*sp) {
    1b6c:	2a74      	cmp	r2, #116	; 0x74
    1b6e:	d026      	beq.n	1bbe <cbvprintf+0x296>
    1b70:	2a7a      	cmp	r2, #122	; 0x7a
    1b72:	d1db      	bne.n	1b2c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1b74:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1b78:	2206      	movs	r2, #6
    1b7a:	e00d      	b.n	1b98 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1b7c:	785a      	ldrb	r2, [r3, #1]
    1b7e:	2a68      	cmp	r2, #104	; 0x68
    1b80:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1b84:	d106      	bne.n	1b94 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1b86:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1b88:	f361 02c6 	bfi	r2, r1, #3, #4
    1b8c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1b90:	1c9f      	adds	r7, r3, #2
    1b92:	e7cc      	b.n	1b2e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1b94:	4613      	mov	r3, r2
    1b96:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1b98:	f362 03c6 	bfi	r3, r2, #3, #4
    1b9c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1ba0:	e7c5      	b.n	1b2e <cbvprintf+0x206>
		if (*++sp == 'l') {
    1ba2:	785a      	ldrb	r2, [r3, #1]
    1ba4:	2a6c      	cmp	r2, #108	; 0x6c
    1ba6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1baa:	d101      	bne.n	1bb0 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1bac:	2104      	movs	r1, #4
    1bae:	e7eb      	b.n	1b88 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1bb0:	4613      	mov	r3, r2
    1bb2:	2203      	movs	r2, #3
    1bb4:	e7f0      	b.n	1b98 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1bb6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1bba:	2205      	movs	r2, #5
    1bbc:	e7ec      	b.n	1b98 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1bbe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1bc2:	2207      	movs	r2, #7
    1bc4:	e7e8      	b.n	1b98 <cbvprintf+0x270>
		conv->unsupported = true;
    1bc6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1bca:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1bce:	f023 0302 	bic.w	r3, r3, #2
    1bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1bd6:	f043 0302 	orr.w	r3, r3, #2
    1bda:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1bde:	e7a6      	b.n	1b2e <cbvprintf+0x206>
    1be0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1be4:	2920      	cmp	r1, #32
    1be6:	f200 8084 	bhi.w	1cf2 <cbvprintf+0x3ca>
    1bea:	a001      	add	r0, pc, #4	; (adr r0, 1bf0 <cbvprintf+0x2c8>)
    1bec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1bf0:	00001cb5 	.word	0x00001cb5
    1bf4:	00001cf3 	.word	0x00001cf3
    1bf8:	00001cf3 	.word	0x00001cf3
    1bfc:	00001cf3 	.word	0x00001cf3
    1c00:	00001cf3 	.word	0x00001cf3
    1c04:	00001cf3 	.word	0x00001cf3
    1c08:	00001cf3 	.word	0x00001cf3
    1c0c:	00001cf3 	.word	0x00001cf3
    1c10:	00001cf3 	.word	0x00001cf3
    1c14:	00001b51 	.word	0x00001b51
    1c18:	00001cf3 	.word	0x00001cf3
    1c1c:	00001cb5 	.word	0x00001cb5
    1c20:	00001c75 	.word	0x00001c75
    1c24:	00001b51 	.word	0x00001b51
    1c28:	00001b51 	.word	0x00001b51
    1c2c:	00001b51 	.word	0x00001b51
    1c30:	00001cf3 	.word	0x00001cf3
    1c34:	00001c75 	.word	0x00001c75
    1c38:	00001cf3 	.word	0x00001cf3
    1c3c:	00001cf3 	.word	0x00001cf3
    1c40:	00001cf3 	.word	0x00001cf3
    1c44:	00001cf3 	.word	0x00001cf3
    1c48:	00001cbd 	.word	0x00001cbd
    1c4c:	00001cb5 	.word	0x00001cb5
    1c50:	00001cd9 	.word	0x00001cd9
    1c54:	00001cf3 	.word	0x00001cf3
    1c58:	00001cf3 	.word	0x00001cf3
    1c5c:	00001cd9 	.word	0x00001cd9
    1c60:	00001cf3 	.word	0x00001cf3
    1c64:	00001cb5 	.word	0x00001cb5
    1c68:	00001cf3 	.word	0x00001cf3
    1c6c:	00001cf3 	.word	0x00001cf3
    1c70:	00001cb5 	.word	0x00001cb5
		conv->specifier_cat = SPECIFIER_SINT;
    1c74:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1c78:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c7a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1c7e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1c82:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1c84:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1c88:	bf02      	ittt	eq
    1c8a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1c8e:	f041 0101 	orreq.w	r1, r1, #1
    1c92:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1c96:	2a63      	cmp	r2, #99	; 0x63
    1c98:	d131      	bne.n	1cfe <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1c9a:	3b00      	subs	r3, #0
    1c9c:	bf18      	it	ne
    1c9e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1ca0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1ca4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1ca8:	430b      	orrs	r3, r1
    1caa:	f363 0241 	bfi	r2, r3, #1, #1
    1cae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1cb2:	e6d8      	b.n	1a66 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1cb4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1cb8:	2002      	movs	r0, #2
    1cba:	e7de      	b.n	1c7a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1cbc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1cc0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1cc4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1cc8:	2103      	movs	r1, #3
    1cca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1cce:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1cd0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1cd4:	4143      	adcs	r3, r0
    1cd6:	e7e3      	b.n	1ca0 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1cd8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1cdc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1cde:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1ce2:	f361 0202 	bfi	r2, r1, #0, #3
    1ce6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1cea:	bf14      	ite	ne
    1cec:	2301      	movne	r3, #1
    1cee:	2300      	moveq	r3, #0
    1cf0:	e7d6      	b.n	1ca0 <cbvprintf+0x378>
		conv->invalid = true;
    1cf2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1cf6:	f043 0301 	orr.w	r3, r3, #1
    1cfa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1cfe:	2300      	movs	r3, #0
    1d00:	e7ce      	b.n	1ca0 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1d02:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1d06:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1d08:	bfb4      	ite	lt
    1d0a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1d0e:	f04f 39ff 	movge.w	r9, #4294967295
    1d12:	e6ba      	b.n	1a8a <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1d14:	079b      	lsls	r3, r3, #30
    1d16:	f57f aec7 	bpl.w	1aa8 <cbvprintf+0x180>
			precision = conv->prec_value;
    1d1a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1d1e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1d22:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1d24:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1d28:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1d2c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1d30:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1d32:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1d36:	d136      	bne.n	1da6 <cbvprintf+0x47e>
			switch (length_mod) {
    1d38:	1ed3      	subs	r3, r2, #3
    1d3a:	2b04      	cmp	r3, #4
    1d3c:	d820      	bhi.n	1d80 <cbvprintf+0x458>
    1d3e:	e8df f003 	tbb	[pc, r3]
    1d42:	0703      	.short	0x0703
    1d44:	1f07      	.short	0x1f07
    1d46:	1f          	.byte	0x1f
    1d47:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1d48:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    1d4c:	17c1      	asrs	r1, r0, #31
    1d4e:	e004      	b.n	1d5a <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    1d50:	3407      	adds	r4, #7
    1d52:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1d56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    1d5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1d5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1d62:	f013 0603 	ands.w	r6, r3, #3
    1d66:	d054      	beq.n	1e12 <cbvprintf+0x4ea>
			OUTS(sp, fp);
    1d68:	9802      	ldr	r0, [sp, #8]
    1d6a:	463b      	mov	r3, r7
    1d6c:	4652      	mov	r2, sl
    1d6e:	4659      	mov	r1, fp
    1d70:	f006 fb84 	bl	847c <outs>
    1d74:	2800      	cmp	r0, #0
    1d76:	f2c0 8143 	blt.w	2000 <cbvprintf+0x6d8>
    1d7a:	4405      	add	r5, r0
			continue;
    1d7c:	46ba      	mov	sl, r7
    1d7e:	e5db      	b.n	1938 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1d80:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    1d84:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1d86:	ea4f 71e0 	mov.w	r1, r0, asr #31
    1d8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1d8e:	d105      	bne.n	1d9c <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    1d90:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1d94:	930a      	str	r3, [sp, #40]	; 0x28
    1d96:	2300      	movs	r3, #0
    1d98:	930b      	str	r3, [sp, #44]	; 0x2c
    1d9a:	e7e0      	b.n	1d5e <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    1d9c:	2a02      	cmp	r2, #2
    1d9e:	d1de      	bne.n	1d5e <cbvprintf+0x436>
				value->sint = (short)value->sint;
    1da0:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1da4:	e7d2      	b.n	1d4c <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1da6:	2b02      	cmp	r3, #2
    1da8:	d123      	bne.n	1df2 <cbvprintf+0x4ca>
			switch (length_mod) {
    1daa:	1ed3      	subs	r3, r2, #3
    1dac:	2b04      	cmp	r3, #4
    1dae:	d813      	bhi.n	1dd8 <cbvprintf+0x4b0>
    1db0:	e8df f003 	tbb	[pc, r3]
    1db4:	120a0a03 	.word	0x120a0a03
    1db8:	12          	.byte	0x12
    1db9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1dba:	6820      	ldr	r0, [r4, #0]
    1dbc:	900a      	str	r0, [sp, #40]	; 0x28
    1dbe:	2100      	movs	r1, #0
    1dc0:	1d23      	adds	r3, r4, #4
    1dc2:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1dc4:	461c      	mov	r4, r3
    1dc6:	e7ca      	b.n	1d5e <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1dc8:	3407      	adds	r4, #7
    1dca:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1dce:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    1dd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1dd6:	e7f5      	b.n	1dc4 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1dd8:	f854 3b04 	ldr.w	r3, [r4], #4
    1ddc:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1dde:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1de0:	f04f 0300 	mov.w	r3, #0
    1de4:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1de6:	d0d3      	beq.n	1d90 <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1de8:	2a02      	cmp	r2, #2
    1dea:	d1b8      	bne.n	1d5e <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1dec:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1df0:	e7d0      	b.n	1d94 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    1df2:	2b04      	cmp	r3, #4
    1df4:	d107      	bne.n	1e06 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    1df6:	3407      	adds	r4, #7
    1df8:	f024 0407 	bic.w	r4, r4, #7
    1dfc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1e00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1e04:	e7ab      	b.n	1d5e <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1e06:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1e08:	bf04      	itt	eq
    1e0a:	f854 3b04 	ldreq.w	r3, [r4], #4
    1e0e:	930a      	streq	r3, [sp, #40]	; 0x28
    1e10:	e7a5      	b.n	1d5e <cbvprintf+0x436>
		switch (conv->specifier) {
    1e12:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1e16:	2878      	cmp	r0, #120	; 0x78
    1e18:	d8b0      	bhi.n	1d7c <cbvprintf+0x454>
    1e1a:	2862      	cmp	r0, #98	; 0x62
    1e1c:	d822      	bhi.n	1e64 <cbvprintf+0x53c>
    1e1e:	2825      	cmp	r0, #37	; 0x25
    1e20:	f43f ad93 	beq.w	194a <cbvprintf+0x22>
    1e24:	2858      	cmp	r0, #88	; 0x58
    1e26:	d1a9      	bne.n	1d7c <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1e28:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1e2c:	9300      	str	r3, [sp, #0]
    1e2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1e32:	ab04      	add	r3, sp, #16
    1e34:	aa0c      	add	r2, sp, #48	; 0x30
    1e36:	f006 fad6 	bl	83e6 <encode_uint>
    1e3a:	4682      	mov	sl, r0
			if (precision >= 0) {
    1e3c:	f1b8 0f00 	cmp.w	r8, #0
    1e40:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1e44:	db0c      	blt.n	1e60 <cbvprintf+0x538>
				conv->flag_zero = false;
    1e46:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1e4a:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1e4e:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1e52:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1e54:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1e58:	d902      	bls.n	1e60 <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    1e5a:	eba8 0303 	sub.w	r3, r8, r3
    1e5e:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1e60:	4680      	mov	r8, r0
    1e62:	e03d      	b.n	1ee0 <cbvprintf+0x5b8>
    1e64:	3863      	subs	r0, #99	; 0x63
    1e66:	2815      	cmp	r0, #21
    1e68:	d888      	bhi.n	1d7c <cbvprintf+0x454>
    1e6a:	a101      	add	r1, pc, #4	; (adr r1, 1e70 <cbvprintf+0x548>)
    1e6c:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1e70:	00001ef1 	.word	0x00001ef1
    1e74:	00001f55 	.word	0x00001f55
    1e78:	00001d7d 	.word	0x00001d7d
    1e7c:	00001d7d 	.word	0x00001d7d
    1e80:	00001d7d 	.word	0x00001d7d
    1e84:	00001d7d 	.word	0x00001d7d
    1e88:	00001f55 	.word	0x00001f55
    1e8c:	00001d7d 	.word	0x00001d7d
    1e90:	00001d7d 	.word	0x00001d7d
    1e94:	00001d7d 	.word	0x00001d7d
    1e98:	00001d7d 	.word	0x00001d7d
    1e9c:	00001fb3 	.word	0x00001fb3
    1ea0:	00001f81 	.word	0x00001f81
    1ea4:	00001f85 	.word	0x00001f85
    1ea8:	00001d7d 	.word	0x00001d7d
    1eac:	00001d7d 	.word	0x00001d7d
    1eb0:	00001ec9 	.word	0x00001ec9
    1eb4:	00001d7d 	.word	0x00001d7d
    1eb8:	00001f81 	.word	0x00001f81
    1ebc:	00001d7d 	.word	0x00001d7d
    1ec0:	00001d7d 	.word	0x00001d7d
    1ec4:	00001f81 	.word	0x00001f81
			if (precision >= 0) {
    1ec8:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1ecc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1ed0:	db0a      	blt.n	1ee8 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    1ed2:	4641      	mov	r1, r8
    1ed4:	4650      	mov	r0, sl
    1ed6:	f006 fb10 	bl	84fa <strnlen>
			bpe = bps + len;
    1eda:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1ede:	2600      	movs	r6, #0
		if (bps == NULL) {
    1ee0:	f1ba 0f00 	cmp.w	sl, #0
    1ee4:	d10c      	bne.n	1f00 <cbvprintf+0x5d8>
    1ee6:	e749      	b.n	1d7c <cbvprintf+0x454>
				len = strlen(bps);
    1ee8:	4650      	mov	r0, sl
    1eea:	f006 faff 	bl	84ec <strlen>
    1eee:	e7f4      	b.n	1eda <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1ef2:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1ef6:	2600      	movs	r6, #0
			bpe = buf + 1;
    1ef8:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1efc:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1f00:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1f04:	b106      	cbz	r6, 1f08 <cbvprintf+0x5e0>
			nj_len += 1U;
    1f06:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1f08:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1f0c:	06d0      	lsls	r0, r2, #27
    1f0e:	d56b      	bpl.n	1fe8 <cbvprintf+0x6c0>
			nj_len += 2U;
    1f10:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1f12:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1f14:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1f16:	bf48      	it	mi
    1f18:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1f1a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1f1c:	bf48      	it	mi
    1f1e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1f20:	f1b9 0f00 	cmp.w	r9, #0
    1f24:	dd79      	ble.n	201a <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    1f26:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1f2a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1f2e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1f32:	9303      	str	r3, [sp, #12]
    1f34:	0753      	lsls	r3, r2, #29
    1f36:	d470      	bmi.n	201a <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    1f38:	0650      	lsls	r0, r2, #25
    1f3a:	d564      	bpl.n	2006 <cbvprintf+0x6de>
					if (sign != 0) {
    1f3c:	b146      	cbz	r6, 1f50 <cbvprintf+0x628>
						OUTC(sign);
    1f3e:	9b02      	ldr	r3, [sp, #8]
    1f40:	4659      	mov	r1, fp
    1f42:	4630      	mov	r0, r6
    1f44:	4798      	blx	r3
    1f46:	2800      	cmp	r0, #0
    1f48:	db5a      	blt.n	2000 <cbvprintf+0x6d8>
						sign = 0;
    1f4a:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1f4c:	3501      	adds	r5, #1
						sign = 0;
    1f4e:	461e      	mov	r6, r3
					pad = '0';
    1f50:	2330      	movs	r3, #48	; 0x30
    1f52:	e059      	b.n	2008 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    1f54:	071e      	lsls	r6, r3, #28
    1f56:	d411      	bmi.n	1f7c <cbvprintf+0x654>
				sign = ' ';
    1f58:	f013 0610 	ands.w	r6, r3, #16
    1f5c:	bf18      	it	ne
    1f5e:	2620      	movne	r6, #32
			sint = value->sint;
    1f60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1f64:	2a00      	cmp	r2, #0
    1f66:	f173 0100 	sbcs.w	r1, r3, #0
    1f6a:	f6bf af5d 	bge.w	1e28 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    1f6e:	4252      	negs	r2, r2
    1f70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1f74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1f78:	262d      	movs	r6, #45	; 0x2d
    1f7a:	e755      	b.n	1e28 <cbvprintf+0x500>
				sign = '+';
    1f7c:	262b      	movs	r6, #43	; 0x2b
    1f7e:	e7ef      	b.n	1f60 <cbvprintf+0x638>
		switch (conv->specifier) {
    1f80:	2600      	movs	r6, #0
    1f82:	e751      	b.n	1e28 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1f84:	980a      	ldr	r0, [sp, #40]	; 0x28
    1f86:	b348      	cbz	r0, 1fdc <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1f88:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1f8c:	9300      	str	r3, [sp, #0]
    1f8e:	aa0c      	add	r2, sp, #48	; 0x30
    1f90:	ab04      	add	r3, sp, #16
    1f92:	2100      	movs	r1, #0
    1f94:	f006 fa27 	bl	83e6 <encode_uint>
				conv->altform_0c = true;
    1f98:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1f9c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1fa0:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1fa4:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1fa8:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1faa:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1fae:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1fb0:	e744      	b.n	1e3c <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1fb4:	2a07      	cmp	r2, #7
    1fb6:	f63f aee1 	bhi.w	1d7c <cbvprintf+0x454>
    1fba:	e8df f002 	tbb	[pc, r2]
    1fbe:	040d      	.short	0x040d
    1fc0:	08080d06 	.word	0x08080d06
    1fc4:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1fc6:	701d      	strb	r5, [r3, #0]
		break;
    1fc8:	e6d8      	b.n	1d7c <cbvprintf+0x454>
		*(short *)dp = (short)count;
    1fca:	801d      	strh	r5, [r3, #0]
		break;
    1fcc:	e6d6      	b.n	1d7c <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    1fce:	4628      	mov	r0, r5
    1fd0:	17e9      	asrs	r1, r5, #31
    1fd2:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1fd6:	e6d1      	b.n	1d7c <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1fd8:	601d      	str	r5, [r3, #0]
		break;
    1fda:	e6cf      	b.n	1d7c <cbvprintf+0x454>
			bpe = bps + 5;
    1fdc:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 20a4 <cbvprintf+0x77c>
    1fe0:	4606      	mov	r6, r0
			bps = "(nil)";
    1fe2:	f1a8 0a05 	sub.w	sl, r8, #5
    1fe6:	e78b      	b.n	1f00 <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    1fe8:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1fea:	bf48      	it	mi
    1fec:	3301      	addmi	r3, #1
    1fee:	e790      	b.n	1f12 <cbvprintf+0x5ea>
					OUTC(pad);
    1ff0:	4618      	mov	r0, r3
    1ff2:	9303      	str	r3, [sp, #12]
    1ff4:	4659      	mov	r1, fp
    1ff6:	9b02      	ldr	r3, [sp, #8]
    1ff8:	4798      	blx	r3
    1ffa:	2800      	cmp	r0, #0
    1ffc:	9b03      	ldr	r3, [sp, #12]
    1ffe:	da04      	bge.n	200a <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    2000:	b011      	add	sp, #68	; 0x44
    2002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2006:	2320      	movs	r3, #32
    2008:	444d      	add	r5, r9
    200a:	464a      	mov	r2, r9
				while (width-- > 0) {
    200c:	2a00      	cmp	r2, #0
    200e:	eba5 0109 	sub.w	r1, r5, r9
    2012:	f109 39ff 	add.w	r9, r9, #4294967295
    2016:	dceb      	bgt.n	1ff0 <cbvprintf+0x6c8>
    2018:	460d      	mov	r5, r1
		if (sign != 0) {
    201a:	b136      	cbz	r6, 202a <cbvprintf+0x702>
			OUTC(sign);
    201c:	9b02      	ldr	r3, [sp, #8]
    201e:	4659      	mov	r1, fp
    2020:	4630      	mov	r0, r6
    2022:	4798      	blx	r3
    2024:	2800      	cmp	r0, #0
    2026:	dbeb      	blt.n	2000 <cbvprintf+0x6d8>
    2028:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    202a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    202e:	06d9      	lsls	r1, r3, #27
    2030:	d401      	bmi.n	2036 <cbvprintf+0x70e>
    2032:	071a      	lsls	r2, r3, #28
    2034:	d506      	bpl.n	2044 <cbvprintf+0x71c>
				OUTC('0');
    2036:	9b02      	ldr	r3, [sp, #8]
    2038:	4659      	mov	r1, fp
    203a:	2030      	movs	r0, #48	; 0x30
    203c:	4798      	blx	r3
    203e:	2800      	cmp	r0, #0
    2040:	dbde      	blt.n	2000 <cbvprintf+0x6d8>
    2042:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2044:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    2048:	06db      	lsls	r3, r3, #27
    204a:	d507      	bpl.n	205c <cbvprintf+0x734>
				OUTC(conv->specifier);
    204c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    2050:	9b02      	ldr	r3, [sp, #8]
    2052:	4659      	mov	r1, fp
    2054:	4798      	blx	r3
    2056:	2800      	cmp	r0, #0
    2058:	dbd2      	blt.n	2000 <cbvprintf+0x6d8>
    205a:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    205c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    205e:	442e      	add	r6, r5
    2060:	1b73      	subs	r3, r6, r5
    2062:	2b00      	cmp	r3, #0
    2064:	dc16      	bgt.n	2094 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    2066:	9802      	ldr	r0, [sp, #8]
    2068:	4643      	mov	r3, r8
    206a:	4652      	mov	r2, sl
    206c:	4659      	mov	r1, fp
    206e:	f006 fa05 	bl	847c <outs>
    2072:	2800      	cmp	r0, #0
    2074:	dbc4      	blt.n	2000 <cbvprintf+0x6d8>
    2076:	4405      	add	r5, r0
		while (width > 0) {
    2078:	44a9      	add	r9, r5
    207a:	eba9 0305 	sub.w	r3, r9, r5
    207e:	2b00      	cmp	r3, #0
    2080:	f77f ae7c 	ble.w	1d7c <cbvprintf+0x454>
			OUTC(' ');
    2084:	9b02      	ldr	r3, [sp, #8]
    2086:	4659      	mov	r1, fp
    2088:	2020      	movs	r0, #32
    208a:	4798      	blx	r3
    208c:	2800      	cmp	r0, #0
    208e:	dbb7      	blt.n	2000 <cbvprintf+0x6d8>
    2090:	3501      	adds	r5, #1
			--width;
    2092:	e7f2      	b.n	207a <cbvprintf+0x752>
				OUTC('0');
    2094:	9b02      	ldr	r3, [sp, #8]
    2096:	4659      	mov	r1, fp
    2098:	2030      	movs	r0, #48	; 0x30
    209a:	4798      	blx	r3
    209c:	2800      	cmp	r0, #0
    209e:	dbaf      	blt.n	2000 <cbvprintf+0x6d8>
    20a0:	3501      	adds	r5, #1
    20a2:	e7dd      	b.n	2060 <cbvprintf+0x738>
    20a4:	000096f2 	.word	0x000096f2

000020a8 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    20a8:	b508      	push	{r3, lr}
	__asm__ volatile(
    20aa:	f04f 0220 	mov.w	r2, #32
    20ae:	f3ef 8311 	mrs	r3, BASEPRI
    20b2:	f382 8812 	msr	BASEPRI_MAX, r2
    20b6:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    20ba:	f000 fecf 	bl	2e5c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    20be:	4803      	ldr	r0, [pc, #12]	; (20cc <sys_reboot+0x24>)
    20c0:	f006 f926 	bl	8310 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    20c4:	f000 fa1a 	bl	24fc <arch_cpu_idle>
    20c8:	e7fc      	b.n	20c4 <sys_reboot+0x1c>
    20ca:	bf00      	nop
    20cc:	000096f3 	.word	0x000096f3

000020d0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    20d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    20d4:	4605      	mov	r5, r0
    20d6:	f04f 0320 	mov.w	r3, #32
    20da:	f3ef 8611 	mrs	r6, BASEPRI
    20de:	f383 8812 	msr	BASEPRI_MAX, r3
    20e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    20e6:	4823      	ldr	r0, [pc, #140]	; (2174 <pm_state_notify+0xa4>)
    20e8:	f003 fe60 	bl	5dac <z_spin_lock_valid>
    20ec:	b968      	cbnz	r0, 210a <pm_state_notify+0x3a>
    20ee:	4a22      	ldr	r2, [pc, #136]	; (2178 <pm_state_notify+0xa8>)
    20f0:	4922      	ldr	r1, [pc, #136]	; (217c <pm_state_notify+0xac>)
    20f2:	4823      	ldr	r0, [pc, #140]	; (2180 <pm_state_notify+0xb0>)
    20f4:	2381      	movs	r3, #129	; 0x81
    20f6:	f006 f90b 	bl	8310 <printk>
    20fa:	491e      	ldr	r1, [pc, #120]	; (2174 <pm_state_notify+0xa4>)
    20fc:	4821      	ldr	r0, [pc, #132]	; (2184 <pm_state_notify+0xb4>)
    20fe:	f006 f907 	bl	8310 <printk>
    2102:	481d      	ldr	r0, [pc, #116]	; (2178 <pm_state_notify+0xa8>)
    2104:	2181      	movs	r1, #129	; 0x81
    2106:	f006 f9cf 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    210a:	481a      	ldr	r0, [pc, #104]	; (2174 <pm_state_notify+0xa4>)
    210c:	f003 fe6c 	bl	5de8 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2110:	4b1d      	ldr	r3, [pc, #116]	; (2188 <pm_state_notify+0xb8>)
    2112:	681c      	ldr	r4, [r3, #0]
    2114:	2c00      	cmp	r4, #0
    2116:	bf38      	it	cc
    2118:	2400      	movcc	r4, #0
    211a:	b19c      	cbz	r4, 2144 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    211c:	4f1b      	ldr	r7, [pc, #108]	; (218c <pm_state_notify+0xbc>)
    211e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2198 <pm_state_notify+0xc8>
    2122:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2126:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    212a:	2d00      	cmp	r5, #0
    212c:	bf08      	it	eq
    212e:	4613      	moveq	r3, r2
		if (callback) {
    2130:	b12b      	cbz	r3, 213e <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    2132:	f898 2014 	ldrb.w	r2, [r8, #20]
    2136:	fb09 f202 	mul.w	r2, r9, r2
    213a:	5cb8      	ldrb	r0, [r7, r2]
    213c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    213e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2140:	2c00      	cmp	r4, #0
    2142:	d1f0      	bne.n	2126 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2144:	480b      	ldr	r0, [pc, #44]	; (2174 <pm_state_notify+0xa4>)
    2146:	f003 fe3f 	bl	5dc8 <z_spin_unlock_valid>
    214a:	b968      	cbnz	r0, 2168 <pm_state_notify+0x98>
    214c:	4a0a      	ldr	r2, [pc, #40]	; (2178 <pm_state_notify+0xa8>)
    214e:	4910      	ldr	r1, [pc, #64]	; (2190 <pm_state_notify+0xc0>)
    2150:	480b      	ldr	r0, [pc, #44]	; (2180 <pm_state_notify+0xb0>)
    2152:	23ac      	movs	r3, #172	; 0xac
    2154:	f006 f8dc 	bl	8310 <printk>
    2158:	4906      	ldr	r1, [pc, #24]	; (2174 <pm_state_notify+0xa4>)
    215a:	480e      	ldr	r0, [pc, #56]	; (2194 <pm_state_notify+0xc4>)
    215c:	f006 f8d8 	bl	8310 <printk>
    2160:	4805      	ldr	r0, [pc, #20]	; (2178 <pm_state_notify+0xa8>)
    2162:	21ac      	movs	r1, #172	; 0xac
    2164:	f006 f9a0 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    2168:	f386 8811 	msr	BASEPRI, r6
    216c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2174:	2000069c 	.word	0x2000069c
    2178:	0000966e 	.word	0x0000966e
    217c:	000096c0 	.word	0x000096c0
    2180:	00009128 	.word	0x00009128
    2184:	000096d5 	.word	0x000096d5
    2188:	200006a0 	.word	0x200006a0
    218c:	200006ac 	.word	0x200006ac
    2190:	00009694 	.word	0x00009694
    2194:	000096ab 	.word	0x000096ab
    2198:	20000ca4 	.word	0x20000ca4

0000219c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    219c:	f000 031f 	and.w	r3, r0, #31
    21a0:	2201      	movs	r2, #1
    21a2:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    21a4:	4b0a      	ldr	r3, [pc, #40]	; (21d0 <atomic_test_and_set_bit.constprop.0+0x34>)
    21a6:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    21aa:	0940      	lsrs	r0, r0, #5
    21ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    21b0:	e850 3f00 	ldrex	r3, [r0]
    21b4:	ea43 0102 	orr.w	r1, r3, r2
    21b8:	e840 1c00 	strex	ip, r1, [r0]
    21bc:	f1bc 0f00 	cmp.w	ip, #0
    21c0:	d1f6      	bne.n	21b0 <atomic_test_and_set_bit.constprop.0+0x14>
    21c2:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    21c6:	421a      	tst	r2, r3
}
    21c8:	bf14      	ite	ne
    21ca:	2001      	movne	r0, #1
    21cc:	2000      	moveq	r0, #0
    21ce:	4770      	bx	lr
    21d0:	200006b8 	.word	0x200006b8

000021d4 <pm_system_resume>:

void pm_system_resume(void)
{
    21d4:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    21d6:	4b1d      	ldr	r3, [pc, #116]	; (224c <pm_system_resume+0x78>)
    21d8:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    21da:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    21de:	f005 031f 	and.w	r3, r5, #31
    21e2:	2201      	movs	r2, #1
    21e4:	409a      	lsls	r2, r3
    21e6:	4b1a      	ldr	r3, [pc, #104]	; (2250 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    21e8:	0969      	lsrs	r1, r5, #5
{
    21ea:	b085      	sub	sp, #20
    21ec:	43d0      	mvns	r0, r2
    21ee:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    21f2:	e853 1f00 	ldrex	r1, [r3]
    21f6:	ea01 0400 	and.w	r4, r1, r0
    21fa:	e843 4c00 	strex	ip, r4, [r3]
    21fe:	f1bc 0f00 	cmp.w	ip, #0
    2202:	d1f6      	bne.n	21f2 <pm_system_resume+0x1e>
    2204:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2208:	4211      	tst	r1, r2
    220a:	d017      	beq.n	223c <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    220c:	4c11      	ldr	r4, [pc, #68]	; (2254 <pm_system_resume+0x80>)
    220e:	220c      	movs	r2, #12
    2210:	fb02 4205 	mla	r2, r2, r5, r4
    2214:	ca07      	ldmia	r2, {r0, r1, r2}
    2216:	ab01      	add	r3, sp, #4
    2218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    221c:	4a0e      	ldr	r2, [pc, #56]	; (2258 <pm_system_resume+0x84>)
    221e:	b17a      	cbz	r2, 2240 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    2220:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2224:	f006 f9aa 	bl	857c <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    2228:	2000      	movs	r0, #0
    222a:	f7ff ff51 	bl	20d0 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    222e:	230c      	movs	r3, #12
    2230:	436b      	muls	r3, r5
    2232:	2200      	movs	r2, #0
    2234:	18e1      	adds	r1, r4, r3
    2236:	50e2      	str	r2, [r4, r3]
    2238:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    223c:	b005      	add	sp, #20
    223e:	bd30      	pop	{r4, r5, pc}
    2240:	f382 8811 	msr	BASEPRI, r2
    2244:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2248:	e7ee      	b.n	2228 <pm_system_resume+0x54>
    224a:	bf00      	nop
    224c:	20000ca4 	.word	0x20000ca4
    2250:	200006a8 	.word	0x200006a8
    2254:	200006ac 	.word	0x200006ac
    2258:	0000857d 	.word	0x0000857d

0000225c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    225c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2260:	4b37      	ldr	r3, [pc, #220]	; (2340 <pm_system_suspend+0xe4>)
    2262:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2358 <pm_system_suspend+0xfc>
    2266:	7d1c      	ldrb	r4, [r3, #20]
{
    2268:	b088      	sub	sp, #32
    226a:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    226c:	4620      	mov	r0, r4
    226e:	f7ff ff95 	bl	219c <atomic_test_and_set_bit.constprop.0>
    2272:	b960      	cbnz	r0, 228e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2274:	466e      	mov	r6, sp
    2276:	463a      	mov	r2, r7
    2278:	4621      	mov	r1, r4
    227a:	4630      	mov	r0, r6
    227c:	f006 f91c 	bl	84b8 <pm_policy_next_state>
    2280:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2284:	250c      	movs	r5, #12
    2286:	fb05 8504 	mla	r5, r5, r4, r8
    228a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    228e:	230c      	movs	r3, #12
    2290:	4363      	muls	r3, r4
    2292:	eb08 0203 	add.w	r2, r8, r3
    2296:	f818 0003 	ldrb.w	r0, [r8, r3]
    229a:	0965      	lsrs	r5, r4, #5
    229c:	f004 061f 	and.w	r6, r4, #31
    22a0:	b3c8      	cbz	r0, 2316 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    22a2:	1c7b      	adds	r3, r7, #1
    22a4:	d00f      	beq.n	22c6 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    22a6:	f8d2 e008 	ldr.w	lr, [r2, #8]
    22aa:	4826      	ldr	r0, [pc, #152]	; (2344 <pm_system_suspend+0xe8>)
    22ac:	4a26      	ldr	r2, [pc, #152]	; (2348 <pm_system_suspend+0xec>)
    22ae:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    22b2:	2100      	movs	r1, #0
    22b4:	2300      	movs	r3, #0
    22b6:	fbec 010e 	umlal	r0, r1, ip, lr
    22ba:	f7fe fa3b 	bl	734 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    22be:	2101      	movs	r1, #1
    22c0:	1a38      	subs	r0, r7, r0
    22c2:	f005 fb91 	bl	79e8 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    22c6:	f004 f95b 	bl	6580 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    22ca:	2001      	movs	r0, #1
    22cc:	f7ff ff00 	bl	20d0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    22d0:	f3bf 8f5b 	dmb	ish
    22d4:	4b1d      	ldr	r3, [pc, #116]	; (234c <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    22d6:	2201      	movs	r2, #1
    22d8:	40b2      	lsls	r2, r6
    22da:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    22de:	e853 1f00 	ldrex	r1, [r3]
    22e2:	4311      	orrs	r1, r2
    22e4:	e843 1000 	strex	r0, r1, [r3]
    22e8:	2800      	cmp	r0, #0
    22ea:	d1f8      	bne.n	22de <pm_system_suspend+0x82>
    22ec:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    22f0:	230c      	movs	r3, #12
    22f2:	fb03 8404 	mla	r4, r3, r4, r8
    22f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    22fa:	ab05      	add	r3, sp, #20
    22fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    2300:	4a13      	ldr	r2, [pc, #76]	; (2350 <pm_system_suspend+0xf4>)
    2302:	b11a      	cbz	r2, 230c <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    2304:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    2308:	f006 f925 	bl	8556 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    230c:	f7ff ff62 	bl	21d4 <pm_system_resume>
	k_sched_unlock();
    2310:	f004 fe2e 	bl	6f70 <k_sched_unlock>
	bool ret = true;
    2314:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2316:	4a0f      	ldr	r2, [pc, #60]	; (2354 <pm_system_suspend+0xf8>)
    2318:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    231c:	2301      	movs	r3, #1
    231e:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2320:	43db      	mvns	r3, r3
    2322:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    2326:	e855 2f00 	ldrex	r2, [r5]
    232a:	401a      	ands	r2, r3
    232c:	e845 2100 	strex	r1, r2, [r5]
    2330:	2900      	cmp	r1, #0
    2332:	d1f8      	bne.n	2326 <pm_system_suspend+0xca>
    2334:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    2338:	b008      	add	sp, #32
    233a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    233e:	bf00      	nop
    2340:	20000ca4 	.word	0x20000ca4
    2344:	000f423f 	.word	0x000f423f
    2348:	000f4240 	.word	0x000f4240
    234c:	200006a8 	.word	0x200006a8
    2350:	00008557 	.word	0x00008557
    2354:	200006b8 	.word	0x200006b8
    2358:	200006ac 	.word	0x200006ac

0000235c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    235c:	4801      	ldr	r0, [pc, #4]	; (2364 <nrf_cc3xx_platform_abort_init+0x8>)
    235e:	f005 be1d 	b.w	7f9c <nrf_cc3xx_platform_set_abort>
    2362:	bf00      	nop
    2364:	00008eb8 	.word	0x00008eb8

00002368 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2368:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    236a:	b1d0      	cbz	r0, 23a2 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    236c:	6843      	ldr	r3, [r0, #4]
    236e:	2b04      	cmp	r3, #4
    2370:	d111      	bne.n	2396 <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2372:	2200      	movs	r2, #0
    2374:	6803      	ldr	r3, [r0, #0]
    2376:	f3bf 8f5b 	dmb	ish
    237a:	e853 1f00 	ldrex	r1, [r3]
    237e:	2901      	cmp	r1, #1
    2380:	d103      	bne.n	238a <mutex_unlock_platform+0x22>
    2382:	e843 2000 	strex	r0, r2, [r3]
    2386:	2800      	cmp	r0, #0
    2388:	d1f7      	bne.n	237a <mutex_unlock_platform+0x12>
    238a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    238e:	4807      	ldr	r0, [pc, #28]	; (23ac <mutex_unlock_platform+0x44>)
    2390:	bf08      	it	eq
    2392:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2394:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2396:	b13b      	cbz	r3, 23a8 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2398:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    239a:	f003 fe59 	bl	6050 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    239e:	2000      	movs	r0, #0
    23a0:	e7f8      	b.n	2394 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    23a2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    23a6:	e7f5      	b.n	2394 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    23a8:	4801      	ldr	r0, [pc, #4]	; (23b0 <mutex_unlock_platform+0x48>)
    23aa:	e7f3      	b.n	2394 <mutex_unlock_platform+0x2c>
    23ac:	ffff8fe9 	.word	0xffff8fe9
    23b0:	ffff8fea 	.word	0xffff8fea

000023b4 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23b4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    23b6:	4604      	mov	r4, r0
    23b8:	b918      	cbnz	r0, 23c2 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    23ba:	4b0d      	ldr	r3, [pc, #52]	; (23f0 <mutex_free_platform+0x3c>)
    23bc:	480d      	ldr	r0, [pc, #52]	; (23f4 <mutex_free_platform+0x40>)
    23be:	685b      	ldr	r3, [r3, #4]
    23c0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    23c2:	6861      	ldr	r1, [r4, #4]
    23c4:	2908      	cmp	r1, #8
    23c6:	d00d      	beq.n	23e4 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    23c8:	f031 0304 	bics.w	r3, r1, #4
    23cc:	d00a      	beq.n	23e4 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    23ce:	f011 0102 	ands.w	r1, r1, #2
    23d2:	d008      	beq.n	23e6 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    23d4:	4808      	ldr	r0, [pc, #32]	; (23f8 <mutex_free_platform+0x44>)
    23d6:	4621      	mov	r1, r4
    23d8:	f003 fb42 	bl	5a60 <k_mem_slab_free>
        mutex->mutex = NULL;
    23dc:	2300      	movs	r3, #0
    23de:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    23e0:	2300      	movs	r3, #0
    23e2:	6063      	str	r3, [r4, #4]
}
    23e4:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    23e6:	6820      	ldr	r0, [r4, #0]
    23e8:	2214      	movs	r2, #20
    23ea:	f006 f8a6 	bl	853a <memset>
    23ee:	e7f7      	b.n	23e0 <mutex_free_platform+0x2c>
    23f0:	20000184 	.word	0x20000184
    23f4:	0000971c 	.word	0x0000971c
    23f8:	200006bc 	.word	0x200006bc

000023fc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    23fc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    23fe:	4604      	mov	r4, r0
    2400:	b918      	cbnz	r0, 240a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2402:	4b16      	ldr	r3, [pc, #88]	; (245c <mutex_init_platform+0x60>)
    2404:	4816      	ldr	r0, [pc, #88]	; (2460 <mutex_init_platform+0x64>)
    2406:	685b      	ldr	r3, [r3, #4]
    2408:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    240a:	6863      	ldr	r3, [r4, #4]
    240c:	2b04      	cmp	r3, #4
    240e:	d023      	beq.n	2458 <mutex_init_platform+0x5c>
    2410:	2b08      	cmp	r3, #8
    2412:	d021      	beq.n	2458 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2414:	b9cb      	cbnz	r3, 244a <mutex_init_platform+0x4e>
    2416:	6823      	ldr	r3, [r4, #0]
    2418:	b9bb      	cbnz	r3, 244a <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    241a:	4812      	ldr	r0, [pc, #72]	; (2464 <mutex_init_platform+0x68>)
    241c:	f04f 32ff 	mov.w	r2, #4294967295
    2420:	f04f 33ff 	mov.w	r3, #4294967295
    2424:	4621      	mov	r1, r4
    2426:	f003 faaf 	bl	5988 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    242a:	b908      	cbnz	r0, 2430 <mutex_init_platform+0x34>
    242c:	6823      	ldr	r3, [r4, #0]
    242e:	b91b      	cbnz	r3, 2438 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2430:	4b0a      	ldr	r3, [pc, #40]	; (245c <mutex_init_platform+0x60>)
    2432:	480d      	ldr	r0, [pc, #52]	; (2468 <mutex_init_platform+0x6c>)
    2434:	685b      	ldr	r3, [r3, #4]
    2436:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2438:	6820      	ldr	r0, [r4, #0]
    243a:	2214      	movs	r2, #20
    243c:	2100      	movs	r1, #0
    243e:	f006 f87c 	bl	853a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2442:	6863      	ldr	r3, [r4, #4]
    2444:	f043 0302 	orr.w	r3, r3, #2
    2448:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    244a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    244c:	f006 fb6d 	bl	8b2a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2450:	6863      	ldr	r3, [r4, #4]
    2452:	f043 0301 	orr.w	r3, r3, #1
    2456:	6063      	str	r3, [r4, #4]
}
    2458:	bd10      	pop	{r4, pc}
    245a:	bf00      	nop
    245c:	20000184 	.word	0x20000184
    2460:	0000971c 	.word	0x0000971c
    2464:	200006bc 	.word	0x200006bc
    2468:	00009742 	.word	0x00009742

0000246c <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    246c:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    246e:	b308      	cbz	r0, 24b4 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    2470:	6843      	ldr	r3, [r0, #4]
    2472:	2b04      	cmp	r3, #4
    2474:	d110      	bne.n	2498 <mutex_lock_platform+0x2c>
    2476:	2201      	movs	r2, #1
    2478:	6803      	ldr	r3, [r0, #0]
    247a:	f3bf 8f5b 	dmb	ish
    247e:	e853 1f00 	ldrex	r1, [r3]
    2482:	2900      	cmp	r1, #0
    2484:	d103      	bne.n	248e <mutex_lock_platform+0x22>
    2486:	e843 2000 	strex	r0, r2, [r3]
    248a:	2800      	cmp	r0, #0
    248c:	d1f7      	bne.n	247e <mutex_lock_platform+0x12>
    248e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2492:	d10b      	bne.n	24ac <mutex_lock_platform+0x40>
    2494:	2000      	movs	r0, #0
}
    2496:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2498:	b153      	cbz	r3, 24b0 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    249a:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    249c:	f04f 32ff 	mov.w	r2, #4294967295
    24a0:	f04f 33ff 	mov.w	r3, #4294967295
    24a4:	f003 fcd4 	bl	5e50 <z_impl_k_mutex_lock>
        if (ret == 0) {
    24a8:	2800      	cmp	r0, #0
    24aa:	d0f3      	beq.n	2494 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    24ac:	4803      	ldr	r0, [pc, #12]	; (24bc <mutex_lock_platform+0x50>)
    24ae:	e7f2      	b.n	2496 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    24b0:	4803      	ldr	r0, [pc, #12]	; (24c0 <mutex_lock_platform+0x54>)
    24b2:	e7f0      	b.n	2496 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    24b4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    24b8:	e7ed      	b.n	2496 <mutex_lock_platform+0x2a>
    24ba:	bf00      	nop
    24bc:	ffff8fe9 	.word	0xffff8fe9
    24c0:	ffff8fea 	.word	0xffff8fea

000024c4 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    24c4:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    24c6:	4906      	ldr	r1, [pc, #24]	; (24e0 <nrf_cc3xx_platform_mutex_init+0x1c>)
    24c8:	4806      	ldr	r0, [pc, #24]	; (24e4 <nrf_cc3xx_platform_mutex_init+0x20>)
    24ca:	2340      	movs	r3, #64	; 0x40
    24cc:	2214      	movs	r2, #20
    24ce:	f006 fb03 	bl	8ad8 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    24d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    24d6:	4904      	ldr	r1, [pc, #16]	; (24e8 <nrf_cc3xx_platform_mutex_init+0x24>)
    24d8:	4804      	ldr	r0, [pc, #16]	; (24ec <nrf_cc3xx_platform_mutex_init+0x28>)
    24da:	f005 bdc1 	b.w	8060 <nrf_cc3xx_platform_set_mutexes>
    24de:	bf00      	nop
    24e0:	200006dc 	.word	0x200006dc
    24e4:	200006bc 	.word	0x200006bc
    24e8:	00008ed0 	.word	0x00008ed0
    24ec:	00008ec0 	.word	0x00008ec0

000024f0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    24f0:	4901      	ldr	r1, [pc, #4]	; (24f8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    24f2:	2210      	movs	r2, #16
	str	r2, [r1]
    24f4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    24f6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    24f8:	e000ed10 	.word	0xe000ed10

000024fc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    24fc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    24fe:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2500:	f380 8811 	msr	BASEPRI, r0
	isb
    2504:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2508:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    250c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    250e:	b662      	cpsie	i
	isb
    2510:	f3bf 8f6f 	isb	sy

	bx	lr
    2514:	4770      	bx	lr
    2516:	bf00      	nop

00002518 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2518:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    251a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    251c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2520:	bf20      	wfe

	msr	BASEPRI, r0
    2522:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2526:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2528:	4770      	bx	lr
    252a:	bf00      	nop

0000252c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    252c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    252e:	2b00      	cmp	r3, #0
    2530:	db08      	blt.n	2544 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2532:	2201      	movs	r2, #1
    2534:	f000 001f 	and.w	r0, r0, #31
    2538:	fa02 f000 	lsl.w	r0, r2, r0
    253c:	095b      	lsrs	r3, r3, #5
    253e:	4a02      	ldr	r2, [pc, #8]	; (2548 <arch_irq_enable+0x1c>)
    2540:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2544:	4770      	bx	lr
    2546:	bf00      	nop
    2548:	e000e100 	.word	0xe000e100

0000254c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    254c:	4b05      	ldr	r3, [pc, #20]	; (2564 <arch_irq_is_enabled+0x18>)
    254e:	0942      	lsrs	r2, r0, #5
    2550:	f000 001f 	and.w	r0, r0, #31
    2554:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2558:	2301      	movs	r3, #1
    255a:	fa03 f000 	lsl.w	r0, r3, r0
}
    255e:	4010      	ands	r0, r2
    2560:	4770      	bx	lr
    2562:	bf00      	nop
    2564:	e000e100 	.word	0xe000e100

00002568 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    2568:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    256a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    256c:	2c07      	cmp	r4, #7
{
    256e:	4605      	mov	r5, r0
    2570:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    2572:	d90f      	bls.n	2594 <z_arm_irq_priority_set+0x2c>
    2574:	4a11      	ldr	r2, [pc, #68]	; (25bc <z_arm_irq_priority_set+0x54>)
    2576:	4912      	ldr	r1, [pc, #72]	; (25c0 <z_arm_irq_priority_set+0x58>)
    2578:	4812      	ldr	r0, [pc, #72]	; (25c4 <z_arm_irq_priority_set+0x5c>)
    257a:	2359      	movs	r3, #89	; 0x59
    257c:	f005 fec8 	bl	8310 <printk>
    2580:	4811      	ldr	r0, [pc, #68]	; (25c8 <z_arm_irq_priority_set+0x60>)
    2582:	4631      	mov	r1, r6
    2584:	2307      	movs	r3, #7
    2586:	462a      	mov	r2, r5
    2588:	f005 fec2 	bl	8310 <printk>
    258c:	480b      	ldr	r0, [pc, #44]	; (25bc <z_arm_irq_priority_set+0x54>)
    258e:	2159      	movs	r1, #89	; 0x59
    2590:	f005 ff8a 	bl	84a8 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2594:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2596:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2598:	bfac      	ite	ge
    259a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    259e:	4b0b      	ldrlt	r3, [pc, #44]	; (25cc <z_arm_irq_priority_set+0x64>)
    25a0:	ea4f 1444 	mov.w	r4, r4, lsl #5
    25a4:	bfb8      	it	lt
    25a6:	f005 050f 	andlt.w	r5, r5, #15
    25aa:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25ac:	bfaa      	itet	ge
    25ae:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25b2:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25b4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    25b8:	bd70      	pop	{r4, r5, r6, pc}
    25ba:	bf00      	nop
    25bc:	0000976f 	.word	0x0000976f
    25c0:	000097a5 	.word	0x000097a5
    25c4:	00009128 	.word	0x00009128
    25c8:	000097c0 	.word	0x000097c0
    25cc:	e000ed14 	.word	0xe000ed14

000025d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    25d0:	bf30      	wfi
    b z_SysNmiOnReset
    25d2:	f7ff bffd 	b.w	25d0 <z_SysNmiOnReset>
    25d6:	bf00      	nop

000025d8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    25d8:	4a0b      	ldr	r2, [pc, #44]	; (2608 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    25da:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    25dc:	4b0b      	ldr	r3, [pc, #44]	; (260c <z_arm_prep_c+0x34>)
    25de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    25e2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    25e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25e8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    25ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    25f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    25f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    25f8:	f003 f90e 	bl	5818 <z_bss_zero>
	z_data_copy();
    25fc:	f005 f820 	bl	7640 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2600:	f000 fa26 	bl	2a50 <z_arm_interrupt_init>
	z_cstart();
    2604:	f003 f912 	bl	582c <z_cstart>
    2608:	00000000 	.word	0x00000000
    260c:	e000ed00 	.word	0xe000ed00

00002610 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2610:	4a09      	ldr	r2, [pc, #36]	; (2638 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2612:	490a      	ldr	r1, [pc, #40]	; (263c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2614:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2616:	6809      	ldr	r1, [r1, #0]
    2618:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    261a:	4909      	ldr	r1, [pc, #36]	; (2640 <arch_swap+0x30>)
	_current->arch.basepri = key;
    261c:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    261e:	684b      	ldr	r3, [r1, #4]
    2620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2624:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2626:	2300      	movs	r3, #0
    2628:	f383 8811 	msr	BASEPRI, r3
    262c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2630:	6893      	ldr	r3, [r2, #8]
}
    2632:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2634:	4770      	bx	lr
    2636:	bf00      	nop
    2638:	20000ca4 	.word	0x20000ca4
    263c:	0000902c 	.word	0x0000902c
    2640:	e000ed00 	.word	0xe000ed00

00002644 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2644:	4912      	ldr	r1, [pc, #72]	; (2690 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2646:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2648:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    264c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    264e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2652:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2656:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2658:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    265c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2660:	4f0c      	ldr	r7, [pc, #48]	; (2694 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2662:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2666:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2668:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    266a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    266c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    266e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2670:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2672:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2676:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2678:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    267a:	f000 fa7f 	bl	2b7c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    267e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2682:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2686:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    268a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    268e:	4770      	bx	lr
    ldr r1, =_kernel
    2690:	20000ca4 	.word	0x20000ca4
    ldr v4, =_SCS_ICSR
    2694:	e000ed04 	.word	0xe000ed04

00002698 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2698:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    269c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    269e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    26a2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    26a6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    26a8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    26ac:	2902      	cmp	r1, #2
    beq _oops
    26ae:	d0ff      	beq.n	26b0 <_oops>

000026b0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    26b0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    26b2:	f005 ff0c 	bl	84ce <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    26b6:	bd01      	pop	{r0, pc}

000026b8 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    26b8:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    26bc:	9b00      	ldr	r3, [sp, #0]
    26be:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    26c2:	490a      	ldr	r1, [pc, #40]	; (26ec <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    26c4:	9b01      	ldr	r3, [sp, #4]
    26c6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    26ca:	9b02      	ldr	r3, [sp, #8]
    26cc:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    26d0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    26d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    26d8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    26dc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    26e0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    26e2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    26e4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    26e6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    26e8:	4770      	bx	lr
    26ea:	bf00      	nop
    26ec:	000083d3 	.word	0x000083d3

000026f0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    26f0:	4a0b      	ldr	r2, [pc, #44]	; (2720 <z_check_thread_stack_fail+0x30>)
{
    26f2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    26f4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    26f6:	b190      	cbz	r0, 271e <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    26f8:	f113 0f16 	cmn.w	r3, #22
    26fc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    26fe:	d005      	beq.n	270c <z_check_thread_stack_fail+0x1c>
    2700:	f1a0 0220 	sub.w	r2, r0, #32
    2704:	429a      	cmp	r2, r3
    2706:	d806      	bhi.n	2716 <z_check_thread_stack_fail+0x26>
    2708:	4283      	cmp	r3, r0
    270a:	d204      	bcs.n	2716 <z_check_thread_stack_fail+0x26>
    270c:	4281      	cmp	r1, r0
    270e:	bf2c      	ite	cs
    2710:	2100      	movcs	r1, #0
    2712:	2101      	movcc	r1, #1
    2714:	e000      	b.n	2718 <z_check_thread_stack_fail+0x28>
    2716:	2100      	movs	r1, #0
    2718:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    271a:	bf08      	it	eq
    271c:	2000      	moveq	r0, #0
}
    271e:	4770      	bx	lr
    2720:	20000ca4 	.word	0x20000ca4

00002724 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2724:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2726:	4b09      	ldr	r3, [pc, #36]	; (274c <arch_switch_to_main_thread+0x28>)
    2728:	6098      	str	r0, [r3, #8]
{
    272a:	460d      	mov	r5, r1
    272c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    272e:	f000 fa25 	bl	2b7c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2732:	4620      	mov	r0, r4
    2734:	f385 8809 	msr	PSP, r5
    2738:	2100      	movs	r1, #0
    273a:	b663      	cpsie	if
    273c:	f381 8811 	msr	BASEPRI, r1
    2740:	f3bf 8f6f 	isb	sy
    2744:	2200      	movs	r2, #0
    2746:	2300      	movs	r3, #0
    2748:	f005 fe43 	bl	83d2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    274c:	20000ca4 	.word	0x20000ca4

00002750 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2750:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2752:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2754:	4a0b      	ldr	r2, [pc, #44]	; (2784 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2756:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2758:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    275a:	bf1e      	ittt	ne
	movne	r1, #0
    275c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    275e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2760:	f006 f9dc 	blne	8b1c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2764:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2766:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    276a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    276e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2772:	4905      	ldr	r1, [pc, #20]	; (2788 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2774:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2776:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2778:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    277a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    277e:	4903      	ldr	r1, [pc, #12]	; (278c <_isr_wrapper+0x3c>)
	bx r1
    2780:	4708      	bx	r1
    2782:	0000      	.short	0x0000
	ldr r2, =_kernel
    2784:	20000ca4 	.word	0x20000ca4
	ldr r1, =_sw_isr_table
    2788:	00008cfc 	.word	0x00008cfc
	ldr r1, =z_arm_int_exit
    278c:	00002791 	.word	0x00002791

00002790 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2790:	4b04      	ldr	r3, [pc, #16]	; (27a4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2792:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2794:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2796:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2798:	d003      	beq.n	27a2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    279a:	4903      	ldr	r1, [pc, #12]	; (27a8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    279c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    27a0:	600a      	str	r2, [r1, #0]

000027a2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    27a2:	4770      	bx	lr
	ldr r3, =_kernel
    27a4:	20000ca4 	.word	0x20000ca4
	ldr r1, =_SCS_ICSR
    27a8:	e000ed04 	.word	0xe000ed04

000027ac <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    27ac:	4b23      	ldr	r3, [pc, #140]	; (283c <mem_manage_fault+0x90>)
{
    27ae:	b570      	push	{r4, r5, r6, lr}
    27b0:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    27b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    27b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    27b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    27b8:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    27ba:	0790      	lsls	r0, r2, #30
    27bc:	d51a      	bpl.n	27f4 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    27be:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    27c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27c2:	0612      	lsls	r2, r2, #24
    27c4:	d516      	bpl.n	27f4 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    27c6:	b119      	cbz	r1, 27d0 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    27c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    27ce:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    27d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    27d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27d6:	06d6      	lsls	r6, r2, #27
    27d8:	d40f      	bmi.n	27fa <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    27da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27dc:	0799      	lsls	r1, r3, #30
    27de:	d40c      	bmi.n	27fa <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    27e0:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    27e2:	4a16      	ldr	r2, [pc, #88]	; (283c <mem_manage_fault+0x90>)
    27e4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    27e6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    27ea:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    27ec:	2300      	movs	r3, #0
    27ee:	702b      	strb	r3, [r5, #0]

	return reason;
}
    27f0:	4620      	mov	r0, r4
    27f2:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    27f4:	f06f 0015 	mvn.w	r0, #21
    27f8:	e7ea      	b.n	27d0 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    27fa:	4e10      	ldr	r6, [pc, #64]	; (283c <mem_manage_fault+0x90>)
    27fc:	6873      	ldr	r3, [r6, #4]
    27fe:	051a      	lsls	r2, r3, #20
    2800:	d5ee      	bpl.n	27e0 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2802:	4621      	mov	r1, r4
    2804:	f7ff ff74 	bl	26f0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2808:	4604      	mov	r4, r0
    280a:	b118      	cbz	r0, 2814 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    280c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2810:	2402      	movs	r4, #2
    2812:	e7e6      	b.n	27e2 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2814:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2816:	06db      	lsls	r3, r3, #27
    2818:	d5e2      	bpl.n	27e0 <mem_manage_fault+0x34>
    281a:	4a09      	ldr	r2, [pc, #36]	; (2840 <mem_manage_fault+0x94>)
    281c:	4909      	ldr	r1, [pc, #36]	; (2844 <mem_manage_fault+0x98>)
    281e:	480a      	ldr	r0, [pc, #40]	; (2848 <mem_manage_fault+0x9c>)
    2820:	f240 1349 	movw	r3, #329	; 0x149
    2824:	f005 fd74 	bl	8310 <printk>
    2828:	4808      	ldr	r0, [pc, #32]	; (284c <mem_manage_fault+0xa0>)
    282a:	f005 fd71 	bl	8310 <printk>
    282e:	4804      	ldr	r0, [pc, #16]	; (2840 <mem_manage_fault+0x94>)
    2830:	f240 1149 	movw	r1, #329	; 0x149
    2834:	f005 fe38 	bl	84a8 <assert_post_action>
    2838:	e7d3      	b.n	27e2 <mem_manage_fault+0x36>
    283a:	bf00      	nop
    283c:	e000ed00 	.word	0xe000ed00
    2840:	00009800 	.word	0x00009800
    2844:	0000983a 	.word	0x0000983a
    2848:	00009128 	.word	0x00009128
    284c:	00009884 	.word	0x00009884

00002850 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2850:	4b0d      	ldr	r3, [pc, #52]	; (2888 <bus_fault.isra.0+0x38>)
    2852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2858:	0592      	lsls	r2, r2, #22
    285a:	d508      	bpl.n	286e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    285c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    285e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2860:	0412      	lsls	r2, r2, #16
    2862:	d504      	bpl.n	286e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2864:	b118      	cbz	r0, 286e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2866:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    286c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    286e:	4b06      	ldr	r3, [pc, #24]	; (2888 <bus_fault.isra.0+0x38>)
    2870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2874:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2876:	bf58      	it	pl
    2878:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    287a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    287c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    287e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2882:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2884:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2886:	4770      	bx	lr
    2888:	e000ed00 	.word	0xe000ed00

0000288c <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    288c:	4b07      	ldr	r3, [pc, #28]	; (28ac <usage_fault.isra.0+0x20>)
    288e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2892:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    289a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    289c:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    28a0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    28a4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    28a6:	2000      	movs	r0, #0
    28a8:	4770      	bx	lr
    28aa:	bf00      	nop
    28ac:	e000ed00 	.word	0xe000ed00

000028b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    28b0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    28b2:	4b54      	ldr	r3, [pc, #336]	; (2a04 <z_arm_fault+0x154>)
    28b4:	685c      	ldr	r4, [r3, #4]
{
    28b6:	b08a      	sub	sp, #40	; 0x28
    28b8:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    28ba:	f3c4 0408 	ubfx	r4, r4, #0, #9
    28be:	2600      	movs	r6, #0
    28c0:	f386 8811 	msr	BASEPRI, r6
    28c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    28c8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    28cc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    28d0:	d108      	bne.n	28e4 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    28d2:	f002 030c 	and.w	r3, r2, #12
    28d6:	2b08      	cmp	r3, #8
    28d8:	d004      	beq.n	28e4 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    28da:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    28dc:	bf5c      	itt	pl
    28de:	4605      	movpl	r5, r0
			*nested_exc = true;
    28e0:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    28e2:	b97d      	cbnz	r5, 2904 <z_arm_fault+0x54>
    28e4:	4a48      	ldr	r2, [pc, #288]	; (2a08 <z_arm_fault+0x158>)
    28e6:	4949      	ldr	r1, [pc, #292]	; (2a0c <z_arm_fault+0x15c>)
    28e8:	4849      	ldr	r0, [pc, #292]	; (2a10 <z_arm_fault+0x160>)
    28ea:	f240 33f2 	movw	r3, #1010	; 0x3f2
    28ee:	f005 fd0f 	bl	8310 <printk>
    28f2:	4848      	ldr	r0, [pc, #288]	; (2a14 <z_arm_fault+0x164>)
    28f4:	f005 fd0c 	bl	8310 <printk>
    28f8:	4843      	ldr	r0, [pc, #268]	; (2a08 <z_arm_fault+0x158>)
    28fa:	f240 31f2 	movw	r1, #1010	; 0x3f2
    28fe:	f005 fdd3 	bl	84a8 <assert_post_action>
    2902:	2500      	movs	r5, #0
	*recoverable = false;
    2904:	2300      	movs	r3, #0
    2906:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    290a:	1ee3      	subs	r3, r4, #3
    290c:	2b03      	cmp	r3, #3
    290e:	d872      	bhi.n	29f6 <z_arm_fault+0x146>
    2910:	e8df f003 	tbb	[pc, r3]
    2914:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2918:	4b3a      	ldr	r3, [pc, #232]	; (2a04 <z_arm_fault+0x154>)
    291a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    291c:	f014 0402 	ands.w	r4, r4, #2
    2920:	d169      	bne.n	29f6 <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2924:	2a00      	cmp	r2, #0
    2926:	db18      	blt.n	295a <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    292a:	005b      	lsls	r3, r3, #1
    292c:	d54e      	bpl.n	29cc <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    292e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2930:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2934:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2938:	429a      	cmp	r2, r3
    293a:	d00d      	beq.n	2958 <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    293c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2940:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	b30b      	cbz	r3, 298c <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2948:	f10d 0207 	add.w	r2, sp, #7
    294c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    294e:	4628      	mov	r0, r5
    2950:	f7ff ff2c 	bl	27ac <mem_manage_fault>
		reason = usage_fault(esf);
    2954:	4604      	mov	r4, r0
		break;
    2956:	e000      	b.n	295a <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2958:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    295a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    295e:	b99b      	cbnz	r3, 2988 <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2960:	2220      	movs	r2, #32
    2962:	4629      	mov	r1, r5
    2964:	a802      	add	r0, sp, #8
    2966:	f005 fddd 	bl	8524 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    296a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    296c:	2e00      	cmp	r6, #0
    296e:	d044      	beq.n	29fa <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2970:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2974:	b922      	cbnz	r2, 2980 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2976:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    297a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    297e:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2980:	a902      	add	r1, sp, #8
    2982:	4620      	mov	r0, r4
    2984:	f005 fda1 	bl	84ca <z_arm_fatal_error>
}
    2988:	b00a      	add	sp, #40	; 0x28
    298a:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    298c:	4b22      	ldr	r3, [pc, #136]	; (2a18 <z_arm_fault+0x168>)
    298e:	781b      	ldrb	r3, [r3, #0]
    2990:	b12b      	cbz	r3, 299e <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    2992:	f10d 0107 	add.w	r1, sp, #7
    2996:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2998:	f7ff ff5a 	bl	2850 <bus_fault.isra.0>
    299c:	e7da      	b.n	2954 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    299e:	4b1f      	ldr	r3, [pc, #124]	; (2a1c <z_arm_fault+0x16c>)
    29a0:	881b      	ldrh	r3, [r3, #0]
    29a2:	b29b      	uxth	r3, r3
    29a4:	b113      	cbz	r3, 29ac <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    29a6:	f7ff ff71 	bl	288c <usage_fault.isra.0>
    29aa:	e7d3      	b.n	2954 <z_arm_fault+0xa4>
			__ASSERT(0,
    29ac:	491c      	ldr	r1, [pc, #112]	; (2a20 <z_arm_fault+0x170>)
    29ae:	4a16      	ldr	r2, [pc, #88]	; (2a08 <z_arm_fault+0x158>)
    29b0:	4817      	ldr	r0, [pc, #92]	; (2a10 <z_arm_fault+0x160>)
    29b2:	f240 23c3 	movw	r3, #707	; 0x2c3
    29b6:	f005 fcab 	bl	8310 <printk>
    29ba:	481a      	ldr	r0, [pc, #104]	; (2a24 <z_arm_fault+0x174>)
    29bc:	f005 fca8 	bl	8310 <printk>
    29c0:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    29c4:	4810      	ldr	r0, [pc, #64]	; (2a08 <z_arm_fault+0x158>)
    29c6:	f005 fd6f 	bl	84a8 <assert_post_action>
    29ca:	e7c6      	b.n	295a <z_arm_fault+0xaa>
    29cc:	4914      	ldr	r1, [pc, #80]	; (2a20 <z_arm_fault+0x170>)
    29ce:	4a0e      	ldr	r2, [pc, #56]	; (2a08 <z_arm_fault+0x158>)
    29d0:	480f      	ldr	r0, [pc, #60]	; (2a10 <z_arm_fault+0x160>)
    29d2:	f240 23c7 	movw	r3, #711	; 0x2c7
    29d6:	f005 fc9b 	bl	8310 <printk>
    29da:	4813      	ldr	r0, [pc, #76]	; (2a28 <z_arm_fault+0x178>)
    29dc:	f005 fc98 	bl	8310 <printk>
    29e0:	f240 21c7 	movw	r1, #711	; 0x2c7
    29e4:	e7ee      	b.n	29c4 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    29e6:	f10d 0207 	add.w	r2, sp, #7
    29ea:	2100      	movs	r1, #0
    29ec:	e7af      	b.n	294e <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    29ee:	f10d 0107 	add.w	r1, sp, #7
    29f2:	2000      	movs	r0, #0
    29f4:	e7d0      	b.n	2998 <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    29f6:	2400      	movs	r4, #0
    29f8:	e7af      	b.n	295a <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    29fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    29fe:	f023 0301 	bic.w	r3, r3, #1
    2a02:	e7bc      	b.n	297e <z_arm_fault+0xce>
    2a04:	e000ed00 	.word	0xe000ed00
    2a08:	00009800 	.word	0x00009800
    2a0c:	000098a7 	.word	0x000098a7
    2a10:	00009128 	.word	0x00009128
    2a14:	000098ba 	.word	0x000098ba
    2a18:	e000ed29 	.word	0xe000ed29
    2a1c:	e000ed2a 	.word	0xe000ed2a
    2a20:	00009d9f 	.word	0x00009d9f
    2a24:	000098f8 	.word	0x000098f8
    2a28:	0000991c 	.word	0x0000991c

00002a2c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2a2c:	4a02      	ldr	r2, [pc, #8]	; (2a38 <z_arm_fault_init+0xc>)
    2a2e:	6953      	ldr	r3, [r2, #20]
    2a30:	f043 0310 	orr.w	r3, r3, #16
    2a34:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2a36:	4770      	bx	lr
    2a38:	e000ed00 	.word	0xe000ed00

00002a3c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2a3c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2a40:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2a44:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2a46:	4672      	mov	r2, lr
	bl z_arm_fault
    2a48:	f7ff ff32 	bl	28b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2a4c:	bd01      	pop	{r0, pc}
    2a4e:	bf00      	nop

00002a50 <z_arm_interrupt_init>:
    2a50:	4804      	ldr	r0, [pc, #16]	; (2a64 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2a52:	2300      	movs	r3, #0
    2a54:	2120      	movs	r1, #32
    2a56:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2a58:	3301      	adds	r3, #1
    2a5a:	2b30      	cmp	r3, #48	; 0x30
    2a5c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2a60:	d1f9      	bne.n	2a56 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2a62:	4770      	bx	lr
    2a64:	e000e100 	.word	0xe000e100

00002a68 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2a68:	2000      	movs	r0, #0
    msr CONTROL, r0
    2a6a:	f380 8814 	msr	CONTROL, r0
    isb
    2a6e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2a72:	f006 f8b5 	bl	8be0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2a76:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2a78:	490d      	ldr	r1, [pc, #52]	; (2ab0 <__start+0x48>)
    str r0, [r1]
    2a7a:	6008      	str	r0, [r1, #0]
    dsb
    2a7c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2a80:	480c      	ldr	r0, [pc, #48]	; (2ab4 <__start+0x4c>)
    msr msp, r0
    2a82:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2a86:	f000 f829 	bl	2adc <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2a8a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2a8c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2a90:	4809      	ldr	r0, [pc, #36]	; (2ab8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2a92:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2a96:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2a98:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2a9c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2aa0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2aa2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2aa4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2aa8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2aac:	f7ff fd94 	bl	25d8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2ab0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2ab4:	20002780 	.word	0x20002780
    ldr r0, =z_interrupt_stacks
    2ab8:	20002900 	.word	0x20002900

00002abc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2abc:	4a06      	ldr	r2, [pc, #24]	; (2ad8 <z_arm_clear_arm_mpu_config+0x1c>)
    2abe:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2ac0:	2300      	movs	r3, #0
	int num_regions =
    2ac2:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2ac6:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2ac8:	428b      	cmp	r3, r1
    2aca:	d100      	bne.n	2ace <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2acc:	4770      	bx	lr
  MPU->RNR = rnr;
    2ace:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2ad0:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2ad2:	3301      	adds	r3, #1
    2ad4:	e7f8      	b.n	2ac8 <z_arm_clear_arm_mpu_config+0xc>
    2ad6:	bf00      	nop
    2ad8:	e000ed90 	.word	0xe000ed90

00002adc <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2adc:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2ade:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2ae0:	2300      	movs	r3, #0
    2ae2:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2ae6:	f7ff ffe9 	bl	2abc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2aea:	4b14      	ldr	r3, [pc, #80]	; (2b3c <z_arm_init_arch_hw_at_boot+0x60>)
    2aec:	f04f 32ff 	mov.w	r2, #4294967295
    2af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2b04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2b08:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2b0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2b10:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2b14:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2b18:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2b1c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2b20:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2b24:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2b28:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2b2c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2b30:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2b32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b36:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2b3a:	bd08      	pop	{r3, pc}
    2b3c:	e000e100 	.word	0xe000e100

00002b40 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2b40:	4b06      	ldr	r3, [pc, #24]	; (2b5c <z_impl_k_thread_abort+0x1c>)
    2b42:	689b      	ldr	r3, [r3, #8]
    2b44:	4283      	cmp	r3, r0
    2b46:	d107      	bne.n	2b58 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2b48:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2b4c:	b123      	cbz	r3, 2b58 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2b4e:	4a04      	ldr	r2, [pc, #16]	; (2b60 <z_impl_k_thread_abort+0x20>)
    2b50:	6853      	ldr	r3, [r2, #4]
    2b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2b56:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2b58:	f004 bcbe 	b.w	74d8 <z_thread_abort>
    2b5c:	20000ca4 	.word	0x20000ca4
    2b60:	e000ed00 	.word	0xe000ed00

00002b64 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2b64:	4b02      	ldr	r3, [pc, #8]	; (2b70 <z_arm_configure_static_mpu_regions+0xc>)
    2b66:	4a03      	ldr	r2, [pc, #12]	; (2b74 <z_arm_configure_static_mpu_regions+0x10>)
    2b68:	4803      	ldr	r0, [pc, #12]	; (2b78 <z_arm_configure_static_mpu_regions+0x14>)
    2b6a:	2101      	movs	r1, #1
    2b6c:	f000 b868 	b.w	2c40 <arm_core_mpu_configure_static_mpu_regions>
    2b70:	20040000 	.word	0x20040000
    2b74:	20000000 	.word	0x20000000
    2b78:	00008ee4 	.word	0x00008ee4

00002b7c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2b7c:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2b7e:	4b05      	ldr	r3, [pc, #20]	; (2b94 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2b80:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2b82:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2b84:	4a04      	ldr	r2, [pc, #16]	; (2b98 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2b86:	2120      	movs	r1, #32
    2b88:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2b8c:	4618      	mov	r0, r3
    2b8e:	2101      	movs	r1, #1
    2b90:	f000 b87e 	b.w	2c90 <arm_core_mpu_configure_dynamic_mpu_regions>
    2b94:	20000bdc 	.word	0x20000bdc
    2b98:	150b0000 	.word	0x150b0000

00002b9c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2b9e:	4f1e      	ldr	r7, [pc, #120]	; (2c18 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2ba0:	2600      	movs	r6, #0
    2ba2:	428e      	cmp	r6, r1
    2ba4:	db01      	blt.n	2baa <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2ba6:	4610      	mov	r0, r2
    2ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2baa:	6844      	ldr	r4, [r0, #4]
    2bac:	b384      	cbz	r4, 2c10 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    2bae:	b153      	cbz	r3, 2bc6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2bb0:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2bb4:	ea14 0f0c 	tst.w	r4, ip
    2bb8:	d118      	bne.n	2bec <mpu_configure_regions+0x50>
		&&
    2bba:	2c1f      	cmp	r4, #31
    2bbc:	d916      	bls.n	2bec <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2bbe:	6805      	ldr	r5, [r0, #0]
		&&
    2bc0:	ea1c 0f05 	tst.w	ip, r5
    2bc4:	d112      	bne.n	2bec <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2bc6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2bc8:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2bca:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2bce:	b2d2      	uxtb	r2, r2
    2bd0:	d90f      	bls.n	2bf2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2bd2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2bd6:	d80e      	bhi.n	2bf6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2bd8:	3c01      	subs	r4, #1
    2bda:	fab4 f484 	clz	r4, r4
    2bde:	f1c4 041f 	rsb	r4, r4, #31
    2be2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2be4:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2be6:	ea4c 0404 	orr.w	r4, ip, r4
    2bea:	d906      	bls.n	2bfa <mpu_configure_regions+0x5e>
			return -EINVAL;
    2bec:	f06f 0215 	mvn.w	r2, #21
    2bf0:	e7d9      	b.n	2ba6 <mpu_configure_regions+0xa>
		return REGION_32B;
    2bf2:	2408      	movs	r4, #8
    2bf4:	e7f6      	b.n	2be4 <mpu_configure_regions+0x48>
		return REGION_4G;
    2bf6:	243e      	movs	r4, #62	; 0x3e
    2bf8:	e7f4      	b.n	2be4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2bfa:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2bfe:	4315      	orrs	r5, r2
    2c00:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2c04:	f044 0401 	orr.w	r4, r4, #1
    2c08:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c0a:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2c0c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2c0e:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2c10:	3601      	adds	r6, #1
    2c12:	300c      	adds	r0, #12
    2c14:	e7c5      	b.n	2ba2 <mpu_configure_regions+0x6>
    2c16:	bf00      	nop
    2c18:	e000ed90 	.word	0xe000ed90

00002c1c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2c1c:	4b03      	ldr	r3, [pc, #12]	; (2c2c <arm_core_mpu_enable+0x10>)
    2c1e:	2205      	movs	r2, #5
    2c20:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2c22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c26:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2c2a:	4770      	bx	lr
    2c2c:	e000ed90 	.word	0xe000ed90

00002c30 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2c30:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2c34:	4b01      	ldr	r3, [pc, #4]	; (2c3c <arm_core_mpu_disable+0xc>)
    2c36:	2200      	movs	r2, #0
    2c38:	605a      	str	r2, [r3, #4]
}
    2c3a:	4770      	bx	lr
    2c3c:	e000ed90 	.word	0xe000ed90

00002c40 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2c40:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2c42:	4d0e      	ldr	r5, [pc, #56]	; (2c7c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2c44:	2301      	movs	r3, #1
    2c46:	782a      	ldrb	r2, [r5, #0]
    2c48:	460c      	mov	r4, r1
    2c4a:	f7ff ffa7 	bl	2b9c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2c4e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2c50:	3016      	adds	r0, #22
    2c52:	d111      	bne.n	2c78 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2c54:	f240 1311 	movw	r3, #273	; 0x111
    2c58:	4a09      	ldr	r2, [pc, #36]	; (2c80 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2c5a:	490a      	ldr	r1, [pc, #40]	; (2c84 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2c5c:	480a      	ldr	r0, [pc, #40]	; (2c88 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2c5e:	f005 fb57 	bl	8310 <printk>
    2c62:	4621      	mov	r1, r4
    2c64:	4809      	ldr	r0, [pc, #36]	; (2c8c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2c66:	f005 fb53 	bl	8310 <printk>
			regions_num);
	}
}
    2c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2c6e:	4804      	ldr	r0, [pc, #16]	; (2c80 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2c70:	f240 1111 	movw	r1, #273	; 0x111
    2c74:	f005 bc18 	b.w	84a8 <assert_post_action>
}
    2c78:	bd38      	pop	{r3, r4, r5, pc}
    2c7a:	bf00      	nop
    2c7c:	20000d0b 	.word	0x20000d0b
    2c80:	0000994c 	.word	0x0000994c
    2c84:	00009d9f 	.word	0x00009d9f
    2c88:	00009128 	.word	0x00009128
    2c8c:	00009983 	.word	0x00009983

00002c90 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2c90:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2c92:	4a12      	ldr	r2, [pc, #72]	; (2cdc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2c94:	2300      	movs	r3, #0
    2c96:	7812      	ldrb	r2, [r2, #0]
    2c98:	460c      	mov	r4, r1
    2c9a:	f7ff ff7f 	bl	2b9c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2c9e:	f110 0f16 	cmn.w	r0, #22
    2ca2:	d008      	beq.n	2cb6 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2ca4:	4b0e      	ldr	r3, [pc, #56]	; (2ce0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2ca6:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2ca8:	2807      	cmp	r0, #7
    2caa:	dd00      	ble.n	2cae <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2cac:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    2cae:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2cb0:	611a      	str	r2, [r3, #16]
    2cb2:	3001      	adds	r0, #1
    2cb4:	e7f8      	b.n	2ca8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2cb6:	4a0b      	ldr	r2, [pc, #44]	; (2ce4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2cb8:	490b      	ldr	r1, [pc, #44]	; (2ce8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2cba:	480c      	ldr	r0, [pc, #48]	; (2cec <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2cbc:	f44f 7398 	mov.w	r3, #304	; 0x130
    2cc0:	f005 fb26 	bl	8310 <printk>
    2cc4:	4621      	mov	r1, r4
    2cc6:	480a      	ldr	r0, [pc, #40]	; (2cf0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2cc8:	f005 fb22 	bl	8310 <printk>
}
    2ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2cd0:	4804      	ldr	r0, [pc, #16]	; (2ce4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2cd2:	f44f 7198 	mov.w	r1, #304	; 0x130
    2cd6:	f005 bbe7 	b.w	84a8 <assert_post_action>
    2cda:	bf00      	nop
    2cdc:	20000d0b 	.word	0x20000d0b
    2ce0:	e000ed90 	.word	0xe000ed90
    2ce4:	0000994c 	.word	0x0000994c
    2ce8:	00009d9f 	.word	0x00009d9f
    2cec:	00009128 	.word	0x00009128
    2cf0:	000099af 	.word	0x000099af

00002cf4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2cf4:	4925      	ldr	r1, [pc, #148]	; (2d8c <z_arm_mpu_init+0x98>)
{
    2cf6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2cf8:	680c      	ldr	r4, [r1, #0]
    2cfa:	2c08      	cmp	r4, #8
    2cfc:	d913      	bls.n	2d26 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2cfe:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2d02:	4a23      	ldr	r2, [pc, #140]	; (2d90 <z_arm_mpu_init+0x9c>)
    2d04:	4923      	ldr	r1, [pc, #140]	; (2d94 <z_arm_mpu_init+0xa0>)
    2d06:	4824      	ldr	r0, [pc, #144]	; (2d98 <z_arm_mpu_init+0xa4>)
    2d08:	f005 fb02 	bl	8310 <printk>
    2d0c:	4823      	ldr	r0, [pc, #140]	; (2d9c <z_arm_mpu_init+0xa8>)
    2d0e:	2208      	movs	r2, #8
    2d10:	4621      	mov	r1, r4
    2d12:	f005 fafd 	bl	8310 <printk>
    2d16:	481e      	ldr	r0, [pc, #120]	; (2d90 <z_arm_mpu_init+0x9c>)
    2d18:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2d1c:	f005 fbc4 	bl	84a8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2d20:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2d24:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    2d26:	f7ff ff83 	bl	2c30 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d2a:	6848      	ldr	r0, [r1, #4]
    2d2c:	491c      	ldr	r1, [pc, #112]	; (2da0 <z_arm_mpu_init+0xac>)
    2d2e:	2200      	movs	r2, #0
    2d30:	4294      	cmp	r4, r2
    2d32:	f100 000c 	add.w	r0, r0, #12
    2d36:	d119      	bne.n	2d6c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    2d38:	4b1a      	ldr	r3, [pc, #104]	; (2da4 <z_arm_mpu_init+0xb0>)
    2d3a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2d3c:	f7ff ff6e 	bl	2c1c <arm_core_mpu_enable>
	__ASSERT(
    2d40:	680b      	ldr	r3, [r1, #0]
    2d42:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2d46:	2b08      	cmp	r3, #8
    2d48:	d00e      	beq.n	2d68 <z_arm_mpu_init+0x74>
    2d4a:	4917      	ldr	r1, [pc, #92]	; (2da8 <z_arm_mpu_init+0xb4>)
    2d4c:	4a10      	ldr	r2, [pc, #64]	; (2d90 <z_arm_mpu_init+0x9c>)
    2d4e:	4812      	ldr	r0, [pc, #72]	; (2d98 <z_arm_mpu_init+0xa4>)
    2d50:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2d54:	f005 fadc 	bl	8310 <printk>
    2d58:	4814      	ldr	r0, [pc, #80]	; (2dac <z_arm_mpu_init+0xb8>)
    2d5a:	f005 fad9 	bl	8310 <printk>
    2d5e:	480c      	ldr	r0, [pc, #48]	; (2d90 <z_arm_mpu_init+0x9c>)
    2d60:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2d64:	f005 fba0 	bl	84a8 <assert_post_action>
	return 0;
    2d68:	2000      	movs	r0, #0
    2d6a:	e7db      	b.n	2d24 <z_arm_mpu_init+0x30>
    2d6c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d6e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2d72:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2d76:	4313      	orrs	r3, r2
    2d78:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d7c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2d7e:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2d82:	f043 0301 	orr.w	r3, r3, #1
    2d86:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d88:	3201      	adds	r2, #1
    2d8a:	e7d1      	b.n	2d30 <z_arm_mpu_init+0x3c>
    2d8c:	00008ef0 	.word	0x00008ef0
    2d90:	0000994c 	.word	0x0000994c
    2d94:	00009d9f 	.word	0x00009d9f
    2d98:	00009128 	.word	0x00009128
    2d9c:	000099dc 	.word	0x000099dc
    2da0:	e000ed90 	.word	0xe000ed90
    2da4:	20000d0b 	.word	0x20000d0b
    2da8:	00009a10 	.word	0x00009a10
    2dac:	00009a60 	.word	0x00009a60

00002db0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2db0:	4b01      	ldr	r3, [pc, #4]	; (2db8 <__stdout_hook_install+0x8>)
    2db2:	6018      	str	r0, [r3, #0]
}
    2db4:	4770      	bx	lr
    2db6:	bf00      	nop
    2db8:	200000cc 	.word	0x200000cc

00002dbc <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    2dbc:	3902      	subs	r1, #2
    2dbe:	2901      	cmp	r1, #1
    2dc0:	d802      	bhi.n	2dc8 <z_impl_zephyr_fputc+0xc>
    2dc2:	4b03      	ldr	r3, [pc, #12]	; (2dd0 <z_impl_zephyr_fputc+0x14>)
    2dc4:	681b      	ldr	r3, [r3, #0]
    2dc6:	4718      	bx	r3
}
    2dc8:	f04f 30ff 	mov.w	r0, #4294967295
    2dcc:	4770      	bx	lr
    2dce:	bf00      	nop
    2dd0:	200000cc 	.word	0x200000cc

00002dd4 <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    2dd4:	b40f      	push	{r0, r1, r2, r3}
    2dd6:	b507      	push	{r0, r1, r2, lr}
    2dd8:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2dda:	2102      	movs	r1, #2
{
    2ddc:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2de0:	4804      	ldr	r0, [pc, #16]	; (2df4 <printf+0x20>)
	va_start(vargs, format);
    2de2:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    2de4:	f7fe fda0 	bl	1928 <cbvprintf>
	va_end(vargs);

	return r;
}
    2de8:	b003      	add	sp, #12
    2dea:	f85d eb04 	ldr.w	lr, [sp], #4
    2dee:	b004      	add	sp, #16
    2df0:	4770      	bx	lr
    2df2:	bf00      	nop
    2df4:	00008553 	.word	0x00008553

00002df8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2df8:	f04f 0320 	mov.w	r3, #32
    2dfc:	f3ef 8111 	mrs	r1, BASEPRI
    2e00:	f383 8812 	msr	BASEPRI_MAX, r3
    2e04:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2e08:	4a0f      	ldr	r2, [pc, #60]	; (2e48 <nordicsemi_nrf52_init+0x50>)
    2e0a:	2301      	movs	r3, #1
    2e0c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e14:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2e18:	4a0c      	ldr	r2, [pc, #48]	; (2e4c <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2e1a:	6812      	ldr	r2, [r2, #0]
    2e1c:	2a08      	cmp	r2, #8
    2e1e:	d108      	bne.n	2e32 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2e20:	4a0b      	ldr	r2, [pc, #44]	; (2e50 <nordicsemi_nrf52_init+0x58>)
    2e22:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    2e24:	2a05      	cmp	r2, #5
    2e26:	d804      	bhi.n	2e32 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2e28:	480a      	ldr	r0, [pc, #40]	; (2e54 <nordicsemi_nrf52_init+0x5c>)
    2e2a:	5c82      	ldrb	r2, [r0, r2]
    2e2c:	b10a      	cbz	r2, 2e32 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2e2e:	4a0a      	ldr	r2, [pc, #40]	; (2e58 <nordicsemi_nrf52_init+0x60>)
    2e30:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2e32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e36:	2201      	movs	r2, #1
    2e38:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2e3c:	f381 8811 	msr	BASEPRI, r1
    2e40:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2e44:	2000      	movs	r0, #0
    2e46:	4770      	bx	lr
    2e48:	4001e000 	.word	0x4001e000
    2e4c:	10000130 	.word	0x10000130
    2e50:	10000134 	.word	0x10000134
    2e54:	00009a90 	.word	0x00009a90
    2e58:	40000638 	.word	0x40000638

00002e5c <sys_arch_reboot>:
    *p_gpregret = val;
    2e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e60:	b2c0      	uxtb	r0, r0
    2e62:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2e66:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e6a:	4905      	ldr	r1, [pc, #20]	; (2e80 <sys_arch_reboot+0x24>)
    2e6c:	4b05      	ldr	r3, [pc, #20]	; (2e84 <sys_arch_reboot+0x28>)
    2e6e:	68ca      	ldr	r2, [r1, #12]
    2e70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e74:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e76:	60cb      	str	r3, [r1, #12]
    2e78:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2e7c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e7e:	e7fd      	b.n	2e7c <sys_arch_reboot+0x20>
    2e80:	e000ed00 	.word	0xe000ed00
    2e84:	05fa0004 	.word	0x05fa0004

00002e88 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2e88:	b120      	cbz	r0, 2e94 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2e8a:	4b03      	ldr	r3, [pc, #12]	; (2e98 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2e8c:	0180      	lsls	r0, r0, #6
    2e8e:	f043 0301 	orr.w	r3, r3, #1
    2e92:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2e94:	4770      	bx	lr
    2e96:	bf00      	nop
    2e98:	00008eb0 	.word	0x00008eb0

00002e9c <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    2e9c:	4a05      	ldr	r2, [pc, #20]	; (2eb4 <adc_context_start_sampling.isra.0+0x18>)
    2e9e:	2301      	movs	r3, #1
    2ea0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    2ea4:	b108      	cbz	r0, 2eaa <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ea6:	60d3      	str	r3, [r2, #12]
}
    2ea8:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2eaa:	6013      	str	r3, [r2, #0]
    2eac:	4a02      	ldr	r2, [pc, #8]	; (2eb8 <adc_context_start_sampling.isra.0+0x1c>)
    2eae:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2eb0:	4770      	bx	lr
    2eb2:	bf00      	nop
    2eb4:	40007000 	.word	0x40007000
    2eb8:	40007004 	.word	0x40007004

00002ebc <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    2ebc:	7908      	ldrb	r0, [r1, #4]
{
    2ebe:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    2ec0:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    2ec4:	2c07      	cmp	r4, #7
    2ec6:	d81f      	bhi.n	2f08 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    2ec8:	780b      	ldrb	r3, [r1, #0]
    2eca:	2b09      	cmp	r3, #9
    2ecc:	d81c      	bhi.n	2f08 <adc_nrfx_channel_setup+0x4c>
    2ece:	e8df f003 	tbb	[pc, r3]
    2ed2:	0606      	.short	0x0606
    2ed4:	1b060606 	.word	0x1b060606
    2ed8:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    2edc:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    2ede:	784a      	ldrb	r2, [r1, #1]
    2ee0:	2a03      	cmp	r2, #3
    2ee2:	d018      	beq.n	2f16 <adc_nrfx_channel_setup+0x5a>
    2ee4:	2a04      	cmp	r2, #4
    2ee6:	d10f      	bne.n	2f08 <adc_nrfx_channel_setup+0x4c>
    2ee8:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    2eea:	884a      	ldrh	r2, [r1, #2]
    2eec:	f244 060a 	movw	r6, #16394	; 0x400a
    2ef0:	42b2      	cmp	r2, r6
    2ef2:	d044      	beq.n	2f7e <adc_nrfx_channel_setup+0xc2>
    2ef4:	d811      	bhi.n	2f1a <adc_nrfx_channel_setup+0x5e>
    2ef6:	f244 0603 	movw	r6, #16387	; 0x4003
    2efa:	42b2      	cmp	r2, r6
    2efc:	d03b      	beq.n	2f76 <adc_nrfx_channel_setup+0xba>
    2efe:	f244 0605 	movw	r6, #16389	; 0x4005
    2f02:	42b2      	cmp	r2, r6
    2f04:	d039      	beq.n	2f7a <adc_nrfx_channel_setup+0xbe>
    2f06:	b3d2      	cbz	r2, 2f7e <adc_nrfx_channel_setup+0xc2>
    2f08:	f06f 0015 	mvn.w	r0, #21
    2f0c:	e032      	b.n	2f74 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    2f0e:	2306      	movs	r3, #6
		break;
    2f10:	e7e5      	b.n	2ede <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    2f12:	2307      	movs	r3, #7
		break;
    2f14:	e7e3      	b.n	2ede <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    2f16:	2501      	movs	r5, #1
    2f18:	e7e7      	b.n	2eea <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    2f1a:	f244 0614 	movw	r6, #16404	; 0x4014
    2f1e:	42b2      	cmp	r2, r6
    2f20:	d02f      	beq.n	2f82 <adc_nrfx_channel_setup+0xc6>
    2f22:	f244 0628 	movw	r6, #16424	; 0x4028
    2f26:	42b2      	cmp	r2, r6
    2f28:	d02d      	beq.n	2f86 <adc_nrfx_channel_setup+0xca>
    2f2a:	f244 060f 	movw	r6, #16399	; 0x400f
    2f2e:	42b2      	cmp	r2, r6
    2f30:	d1ea      	bne.n	2f08 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    2f32:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2f34:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    2f38:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    2f3a:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    2f3e:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    2f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    2f46:	0122      	lsls	r2, r4, #4
    2f48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2f4c:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    2f50:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    2f52:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    2f56:	0123      	lsls	r3, r4, #4
    2f58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2f5c:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    2f60:	798a      	ldrb	r2, [r1, #6]
    2f62:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    2f66:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    2f6a:	4b08      	ldr	r3, [pc, #32]	; (2f8c <adc_nrfx_channel_setup+0xd0>)
    2f6c:	441c      	add	r4, r3
    2f6e:	794b      	ldrb	r3, [r1, #5]
    2f70:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
    2f74:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    2f76:	2200      	movs	r2, #0
    2f78:	e7dc      	b.n	2f34 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    2f7a:	2201      	movs	r2, #1
    2f7c:	e7da      	b.n	2f34 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    2f7e:	2202      	movs	r2, #2
    2f80:	e7d8      	b.n	2f34 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    2f82:	2204      	movs	r2, #4
    2f84:	e7d6      	b.n	2f34 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    2f86:	2205      	movs	r2, #5
    2f88:	e7d4      	b.n	2f34 <adc_nrfx_channel_setup+0x78>
    2f8a:	bf00      	nop
    2f8c:	20000000 	.word	0x20000000

00002f90 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f90:	4b2d      	ldr	r3, [pc, #180]	; (3048 <saadc_irq_handler+0xb8>)
    2f92:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
    2f94:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    2f96:	2a00      	cmp	r2, #0
    2f98:	d048      	beq.n	302c <saadc_irq_handler+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f9a:	2200      	movs	r2, #0
    2f9c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2f9e:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    2fa0:	4c2a      	ldr	r4, [pc, #168]	; (304c <saadc_irq_handler+0xbc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fa2:	4b2b      	ldr	r3, [pc, #172]	; (3050 <saadc_irq_handler+0xc0>)
    2fa4:	2101      	movs	r1, #1
    2fa6:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    2fa8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    2fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2fae:	b3c3      	cbz	r3, 3022 <saadc_irq_handler+0x92>
		adc_sequence_callback callback = ctx->options.callback;
    2fb0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    2fb2:	b143      	cbz	r3, 2fc6 <saadc_irq_handler+0x36>
			action = callback(dev,
    2fb4:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    2fb8:	f104 0164 	add.w	r1, r4, #100	; 0x64
    2fbc:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    2fbe:	2801      	cmp	r0, #1
    2fc0:	d014      	beq.n	2fec <saadc_irq_handler+0x5c>
    2fc2:	2802      	cmp	r0, #2
    2fc4:	d028      	beq.n	3018 <saadc_irq_handler+0x88>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    2fc6:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    2fca:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    2fce:	429a      	cmp	r2, r3
    2fd0:	d922      	bls.n	3018 <saadc_irq_handler+0x88>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    2fd2:	3301      	adds	r3, #1
    2fd4:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    2fd8:	4b1e      	ldr	r3, [pc, #120]	; (3054 <saadc_irq_handler+0xc4>)
    2fda:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    2fde:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    2fe2:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    2fe4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    2fe8:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    2fec:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    2fee:	b92b      	cbnz	r3, 2ffc <saadc_irq_handler+0x6c>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    2ff0:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    2ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ff8:	f7ff bf50 	b.w	2e9c <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2ffc:	f3bf 8f5b 	dmb	ish
    3000:	e854 3f00 	ldrex	r3, [r4]
    3004:	1e5a      	subs	r2, r3, #1
    3006:	e844 2100 	strex	r1, r2, [r4]
    300a:	2900      	cmp	r1, #0
    300c:	d1f8      	bne.n	3000 <saadc_irq_handler+0x70>
    300e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    3012:	2b01      	cmp	r3, #1
    3014:	dcec      	bgt.n	2ff0 <saadc_irq_handler+0x60>
    3016:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    3018:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    301a:	b113      	cbz	r3, 3022 <saadc_irq_handler+0x92>
	z_impl_k_timer_stop(timer);
    301c:	480e      	ldr	r0, [pc, #56]	; (3058 <saadc_irq_handler+0xc8>)
    301e:	f005 fdc1 	bl	8ba4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3022:	480e      	ldr	r0, [pc, #56]	; (305c <saadc_irq_handler+0xcc>)
    3024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3028:	f003 b8da 	b.w	61e0 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    302c:	4b0c      	ldr	r3, [pc, #48]	; (3060 <saadc_irq_handler+0xd0>)
    302e:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    3030:	2900      	cmp	r1, #0
    3032:	d0f0      	beq.n	3016 <saadc_irq_handler+0x86>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3034:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3036:	4a06      	ldr	r2, [pc, #24]	; (3050 <saadc_irq_handler+0xc0>)
    3038:	681b      	ldr	r3, [r3, #0]
    303a:	2301      	movs	r3, #1
    303c:	6013      	str	r3, [r2, #0]
    303e:	f842 3c08 	str.w	r3, [r2, #-8]
    3042:	f842 3c04 	str.w	r3, [r2, #-4]
}
    3046:	e7e6      	b.n	3016 <saadc_irq_handler+0x86>
    3048:	40007104 	.word	0x40007104
    304c:	20000000 	.word	0x20000000
    3050:	40007008 	.word	0x40007008
    3054:	40007000 	.word	0x40007000
    3058:	20000008 	.word	0x20000008
    305c:	20000050 	.word	0x20000050
    3060:	40007110 	.word	0x40007110

00003064 <adc_nrfx_read>:
{
    3064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3066:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
    3068:	485d      	ldr	r0, [pc, #372]	; (31e0 <adc_nrfx_read+0x17c>)
    306a:	f04f 32ff 	mov.w	r2, #4294967295
    306e:	f04f 33ff 	mov.w	r3, #4294967295
    3072:	f003 f8f3 	bl	625c <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    3076:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
    3078:	b910      	cbnz	r0, 3080 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
    307a:	f06f 0415 	mvn.w	r4, #21
    307e:	e097      	b.n	31b0 <adc_nrfx_read+0x14c>
	if (!selected_channels ||
    3080:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    3084:	d1f9      	bne.n	307a <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
    3086:	4c57      	ldr	r4, [pc, #348]	; (31e4 <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    3088:	4f57      	ldr	r7, [pc, #348]	; (31e8 <adc_nrfx_read+0x184>)
	active_channels = 0U;
    308a:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    308c:	fa20 f302 	lsr.w	r3, r0, r2
    3090:	f013 0301 	ands.w	r3, r3, #1
    3094:	d032      	beq.n	30fc <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
    3096:	18bb      	adds	r3, r7, r2
    3098:	f893 c090 	ldrb.w	ip, [r3, #144]	; 0x90
    309c:	f1bc 0f00 	cmp.w	ip, #0
    30a0:	d0eb      	beq.n	307a <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    30a2:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    30a6:	7c6e      	ldrb	r6, [r5, #17]
    30a8:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    30ac:	3e00      	subs	r6, #0
    30ae:	bf18      	it	ne
    30b0:	2601      	movne	r6, #1
    30b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    30b6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    30ba:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    30be:	f102 0351 	add.w	r3, r2, #81	; 0x51
    30c2:	011b      	lsls	r3, r3, #4
			++active_channels;
    30c4:	3101      	adds	r1, #1
    30c6:	f844 c003 	str.w	ip, [r4, r3]
    30ca:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    30cc:	3201      	adds	r2, #1
    30ce:	2a08      	cmp	r2, #8
    30d0:	d1dc      	bne.n	308c <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
    30d2:	7c2b      	ldrb	r3, [r5, #16]
    30d4:	3b08      	subs	r3, #8
    30d6:	2b06      	cmp	r3, #6
    30d8:	d8cf      	bhi.n	307a <adc_nrfx_read+0x16>
    30da:	a201      	add	r2, pc, #4	; (adr r2, 30e0 <adc_nrfx_read+0x7c>)
    30dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    30e0:	000031c5 	.word	0x000031c5
    30e4:	0000307b 	.word	0x0000307b
    30e8:	00003107 	.word	0x00003107
    30ec:	0000307b 	.word	0x0000307b
    30f0:	000031bd 	.word	0x000031bd
    30f4:	0000307b 	.word	0x0000307b
    30f8:	000031c1 	.word	0x000031c1
    30fc:	f102 0651 	add.w	r6, r2, #81	; 0x51
    3100:	0136      	lsls	r6, r6, #4
    3102:	51a3      	str	r3, [r4, r6]
}
    3104:	e7e2      	b.n	30cc <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
    3106:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    3108:	4b36      	ldr	r3, [pc, #216]	; (31e4 <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    310a:	2901      	cmp	r1, #1
    310c:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    3110:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3112:	d959      	bls.n	31c8 <adc_nrfx_read+0x164>
    3114:	2a00      	cmp	r2, #0
    3116:	d1b0      	bne.n	307a <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
    3118:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    311c:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    311e:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    3120:	b112      	cbz	r2, 3128 <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    3122:	8992      	ldrh	r2, [r2, #12]
    3124:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    3128:	68ea      	ldr	r2, [r5, #12]
    312a:	429a      	cmp	r2, r3
    312c:	d354      	bcc.n	31d8 <adc_nrfx_read+0x174>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    312e:	4b2d      	ldr	r3, [pc, #180]	; (31e4 <adc_nrfx_read+0x180>)
    3130:	68aa      	ldr	r2, [r5, #8]
    3132:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
    3136:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    3138:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    313c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    313e:	4c2a      	ldr	r4, [pc, #168]	; (31e8 <adc_nrfx_read+0x184>)
    3140:	f104 0664 	add.w	r6, r4, #100	; 0x64
    3144:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    3146:	683b      	ldr	r3, [r7, #0]
    3148:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
    314a:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    314c:	2600      	movs	r6, #0
    314e:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    3150:	2b00      	cmp	r3, #0
    3152:	d03c      	beq.n	31ce <adc_nrfx_read+0x16a>
		ctx->options = *sequence->options;
    3154:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3156:	f104 0578 	add.w	r5, r4, #120	; 0x78
    315a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    315e:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    3160:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88
		if (ctx->options.interval_us != 0U) {
    3164:	b398      	cbz	r0, 31ce <adc_nrfx_read+0x16a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3166:	f3bf 8f5b 	dmb	ish
    316a:	e854 3f00 	ldrex	r3, [r4]
    316e:	e844 6200 	strex	r2, r6, [r4]
    3172:	2a00      	cmp	r2, #0
    3174:	d1f9      	bne.n	316a <adc_nrfx_read+0x106>
    3176:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    317a:	481c      	ldr	r0, [pc, #112]	; (31ec <adc_nrfx_read+0x188>)
    317c:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    317e:	4a1c      	ldr	r2, [pc, #112]	; (31f0 <adc_nrfx_read+0x18c>)
    3180:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3184:	2100      	movs	r1, #0
    3186:	2300      	movs	r3, #0
    3188:	fbe5 0106 	umlal	r0, r1, r5, r6
    318c:	f7fd fad2 	bl	734 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    3190:	2200      	movs	r2, #0
    3192:	e9cd 0100 	strd	r0, r1, [sp]
    3196:	2300      	movs	r3, #0
    3198:	f104 0008 	add.w	r0, r4, #8
    319c:	f004 fe44 	bl	7e28 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    31a0:	4814      	ldr	r0, [pc, #80]	; (31f4 <adc_nrfx_read+0x190>)
    31a2:	f04f 32ff 	mov.w	r2, #4294967295
    31a6:	f04f 33ff 	mov.w	r3, #4294967295
    31aa:	f003 f857 	bl	625c <z_impl_k_sem_take>
	return ctx->status;
    31ae:	6e24      	ldr	r4, [r4, #96]	; 0x60
	z_impl_k_sem_give(sem);
    31b0:	480b      	ldr	r0, [pc, #44]	; (31e0 <adc_nrfx_read+0x17c>)
    31b2:	f003 f815 	bl	61e0 <z_impl_k_sem_give>
}
    31b6:	4620      	mov	r0, r4
    31b8:	b003      	add	sp, #12
    31ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    31bc:	2202      	movs	r2, #2
		break;
    31be:	e7a3      	b.n	3108 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    31c0:	2203      	movs	r2, #3
		break;
    31c2:	e7a1      	b.n	3108 <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    31c4:	2200      	movs	r2, #0
    31c6:	e79f      	b.n	3108 <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
    31c8:	2a08      	cmp	r2, #8
    31ca:	d9a5      	bls.n	3118 <adc_nrfx_read+0xb4>
    31cc:	e755      	b.n	307a <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
    31ce:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    31d2:	f7ff fe63 	bl	2e9c <adc_context_start_sampling.isra.0>
    31d6:	e7e3      	b.n	31a0 <adc_nrfx_read+0x13c>
		return -ENOMEM;
    31d8:	f06f 040b 	mvn.w	r4, #11
    31dc:	e7e8      	b.n	31b0 <adc_nrfx_read+0x14c>
    31de:	bf00      	nop
    31e0:	20000040 	.word	0x20000040
    31e4:	40007000 	.word	0x40007000
    31e8:	20000000 	.word	0x20000000
    31ec:	000f423f 	.word	0x000f423f
    31f0:	000f4240 	.word	0x000f4240
    31f4:	20000050 	.word	0x20000050

000031f8 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    31f8:	4b0d      	ldr	r3, [pc, #52]	; (3230 <init_saadc+0x38>)

static int init_saadc(const struct device *dev)
{
    31fa:	b510      	push	{r4, lr}
    31fc:	2400      	movs	r4, #0
    31fe:	601c      	str	r4, [r3, #0]
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	4b0c      	ldr	r3, [pc, #48]	; (3234 <init_saadc+0x3c>)
    3204:	601c      	str	r4, [r3, #0]
    3206:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3208:	4b0b      	ldr	r3, [pc, #44]	; (3238 <init_saadc+0x40>)
    320a:	2212      	movs	r2, #18
    320c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    3210:	2007      	movs	r0, #7
    3212:	f7ff f98b 	bl	252c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3216:	4622      	mov	r2, r4
    3218:	2101      	movs	r1, #1
    321a:	2007      	movs	r0, #7
    321c:	f7ff f9a4 	bl	2568 <z_arm_irq_priority_set>
		/* coverity[OVERRUN] */
		return (unsigned int) arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_COUNT_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_count_get(sem);
    3220:	4806      	ldr	r0, [pc, #24]	; (323c <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    3222:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3224:	b913      	cbnz	r3, 322c <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    3226:	3040      	adds	r0, #64	; 0x40
    3228:	f002 ffda 	bl	61e0 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    322c:	2000      	movs	r0, #0
    322e:	bd10      	pop	{r4, pc}
    3230:	40007104 	.word	0x40007104
    3234:	40007110 	.word	0x40007110
    3238:	40007000 	.word	0x40007000
    323c:	20000000 	.word	0x20000000

00003240 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3244:	4c10      	ldr	r4, [pc, #64]	; (3288 <onoff_start+0x48>)
    3246:	1b07      	subs	r7, r0, r4
    3248:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    324c:	f04f 080c 	mov.w	r8, #12
    3250:	fb08 f807 	mul.w	r8, r8, r7
{
    3254:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    3256:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    325a:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    325c:	4420      	add	r0, r4
    325e:	2140      	movs	r1, #64	; 0x40
    3260:	f005 f9ae 	bl	85c0 <set_starting_state>
	if (err < 0) {
    3264:	1e01      	subs	r1, r0, #0
    3266:	db09      	blt.n	327c <onoff_start+0x3c>
	subdata->cb = cb;
    3268:	4b08      	ldr	r3, [pc, #32]	; (328c <onoff_start+0x4c>)
    326a:	4444      	add	r4, r8
	subdata->user_data = user_data;
    326c:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    3270:	4b07      	ldr	r3, [pc, #28]	; (3290 <onoff_start+0x50>)
    3272:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    327a:	4718      	bx	r3
		notify(mgr, err);
    327c:	4630      	mov	r0, r6
    327e:	462b      	mov	r3, r5
}
    3280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3284:	4718      	bx	r3
    3286:	bf00      	nop
    3288:	20000bf8 	.word	0x20000bf8
    328c:	00008623 	.word	0x00008623
    3290:	00008f34 	.word	0x00008f34

00003294 <get_status>:
{
    3294:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    3296:	b2cc      	uxtb	r4, r1
    3298:	2c01      	cmp	r4, #1
{
    329a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    329c:	d909      	bls.n	32b2 <get_status+0x1e>
    329e:	4909      	ldr	r1, [pc, #36]	; (32c4 <get_status+0x30>)
    32a0:	4809      	ldr	r0, [pc, #36]	; (32c8 <get_status+0x34>)
    32a2:	4a0a      	ldr	r2, [pc, #40]	; (32cc <get_status+0x38>)
    32a4:	2379      	movs	r3, #121	; 0x79
    32a6:	f005 f833 	bl	8310 <printk>
    32aa:	4808      	ldr	r0, [pc, #32]	; (32cc <get_status+0x38>)
    32ac:	2179      	movs	r1, #121	; 0x79
    32ae:	f005 f8fb 	bl	84a8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    32b2:	692b      	ldr	r3, [r5, #16]
    32b4:	210c      	movs	r1, #12
    32b6:	fb04 3401 	mla	r4, r4, r1, r3
    32ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    32bc:	f000 0007 	and.w	r0, r0, #7
    32c0:	bd38      	pop	{r3, r4, r5, pc}
    32c2:	bf00      	nop
    32c4:	00009ad3 	.word	0x00009ad3
    32c8:	00009128 	.word	0x00009128
    32cc:	00009a96 	.word	0x00009a96

000032d0 <stop>:
{
    32d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32d2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    32d4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    32d6:	6907      	ldr	r7, [r0, #16]
{
    32d8:	4605      	mov	r5, r0
    32da:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    32dc:	d90b      	bls.n	32f6 <stop+0x26>
    32de:	4918      	ldr	r1, [pc, #96]	; (3340 <stop+0x70>)
    32e0:	4818      	ldr	r0, [pc, #96]	; (3344 <stop+0x74>)
    32e2:	4a19      	ldr	r2, [pc, #100]	; (3348 <stop+0x78>)
    32e4:	f240 134d 	movw	r3, #333	; 0x14d
    32e8:	f005 f812 	bl	8310 <printk>
    32ec:	4816      	ldr	r0, [pc, #88]	; (3348 <stop+0x78>)
    32ee:	f240 114d 	movw	r1, #333	; 0x14d
    32f2:	f005 f8d9 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    32f6:	f04f 0320 	mov.w	r3, #32
    32fa:	f3ef 8211 	mrs	r2, BASEPRI
    32fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3302:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3306:	230c      	movs	r3, #12
    3308:	fb03 7104 	mla	r1, r3, r4, r7
    330c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    330e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    3312:	d001      	beq.n	3318 <stop+0x48>
    3314:	428e      	cmp	r6, r1
    3316:	d110      	bne.n	333a <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    3318:	fb03 7304 	mla	r3, r3, r4, r7
    331c:	2101      	movs	r1, #1
    331e:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    3320:	2000      	movs	r0, #0
	__asm__ volatile(
    3322:	f382 8811 	msr	BASEPRI, r2
    3326:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    332a:	b928      	cbnz	r0, 3338 <stop+0x68>
	get_sub_config(dev, type)->stop();
    332c:	6869      	ldr	r1, [r5, #4]
    332e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    3332:	6863      	ldr	r3, [r4, #4]
    3334:	4798      	blx	r3
	return 0;
    3336:	2000      	movs	r0, #0
}
    3338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    333a:	f04f 30ff 	mov.w	r0, #4294967295
    333e:	e7f0      	b.n	3322 <stop+0x52>
    3340:	00009ad3 	.word	0x00009ad3
    3344:	00009128 	.word	0x00009128
    3348:	00009a96 	.word	0x00009a96

0000334c <onoff_stop>:
{
    334c:	b570      	push	{r4, r5, r6, lr}
    334e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3350:	4906      	ldr	r1, [pc, #24]	; (336c <onoff_stop+0x20>)
    3352:	1a41      	subs	r1, r0, r1
{
    3354:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3356:	1149      	asrs	r1, r1, #5
    3358:	4805      	ldr	r0, [pc, #20]	; (3370 <onoff_stop+0x24>)
    335a:	2240      	movs	r2, #64	; 0x40
    335c:	f7ff ffb8 	bl	32d0 <stop>
	notify(mgr, res);
    3360:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3362:	4601      	mov	r1, r0
	notify(mgr, res);
    3364:	4620      	mov	r0, r4
}
    3366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    336a:	4718      	bx	r3
    336c:	20000bf8 	.word	0x20000bf8
    3370:	00008c54 	.word	0x00008c54

00003374 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3374:	2200      	movs	r2, #0
{
    3376:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3378:	2101      	movs	r1, #1
{
    337a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    337c:	4610      	mov	r0, r2
    337e:	f7ff f8f3 	bl	2568 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3382:	2000      	movs	r0, #0
    3384:	f7ff f8d2 	bl	252c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3388:	480f      	ldr	r0, [pc, #60]	; (33c8 <clk_init+0x54>)
    338a:	f001 fa13 	bl	47b4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    338e:	4b0f      	ldr	r3, [pc, #60]	; (33cc <clk_init+0x58>)
    3390:	4298      	cmp	r0, r3
    3392:	d115      	bne.n	33c0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    3394:	f001 fa32 	bl	47fc <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3398:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    339a:	490d      	ldr	r1, [pc, #52]	; (33d0 <clk_init+0x5c>)
    339c:	4630      	mov	r0, r6
    339e:	f005 f805 	bl	83ac <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    33a2:	2800      	cmp	r0, #0
    33a4:	db0b      	blt.n	33be <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    33a6:	2501      	movs	r5, #1
    33a8:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    33aa:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    33ac:	4908      	ldr	r1, [pc, #32]	; (33d0 <clk_init+0x5c>)
    33ae:	f104 0020 	add.w	r0, r4, #32
    33b2:	f004 fffb 	bl	83ac <onoff_manager_init>
		if (err < 0) {
    33b6:	2800      	cmp	r0, #0
    33b8:	db01      	blt.n	33be <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    33ba:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    33bc:	2000      	movs	r0, #0
}
    33be:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    33c0:	f06f 0004 	mvn.w	r0, #4
    33c4:	e7fb      	b.n	33be <clk_init+0x4a>
    33c6:	bf00      	nop
    33c8:	00003409 	.word	0x00003409
    33cc:	0bad0000 	.word	0x0bad0000
    33d0:	00008f44 	.word	0x00008f44

000033d4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    33d4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    33d6:	230c      	movs	r3, #12
    33d8:	4809      	ldr	r0, [pc, #36]	; (3400 <clkstarted_handle.constprop.0+0x2c>)
    33da:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    33dc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    33de:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    33e0:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    33e4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    33e6:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    33e8:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    33ea:	4418      	add	r0, r3
    33ec:	f005 f906 	bl	85fc <set_on_state>
	if (callback) {
    33f0:	b12d      	cbz	r5, 33fe <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    33f2:	4632      	mov	r2, r6
    33f4:	462b      	mov	r3, r5
    33f6:	4803      	ldr	r0, [pc, #12]	; (3404 <clkstarted_handle.constprop.0+0x30>)
}
    33f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    33fc:	4718      	bx	r3
}
    33fe:	bd70      	pop	{r4, r5, r6, pc}
    3400:	20000bf8 	.word	0x20000bf8
    3404:	00008c54 	.word	0x00008c54

00003408 <clock_event_handler>:
	switch (event) {
    3408:	2801      	cmp	r0, #1
{
    340a:	b508      	push	{r3, lr}
	switch (event) {
    340c:	d006      	beq.n	341c <clock_event_handler+0x14>
    340e:	2803      	cmp	r0, #3
    3410:	d008      	beq.n	3424 <clock_event_handler+0x1c>
    3412:	b9a8      	cbnz	r0, 3440 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3414:	4b10      	ldr	r3, [pc, #64]	; (3458 <clock_event_handler+0x50>)
    3416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    3418:	075b      	lsls	r3, r3, #29
    341a:	d11b      	bne.n	3454 <clock_event_handler+0x4c>
}
    341c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3420:	f7ff bfd8 	b.w	33d4 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3424:	490d      	ldr	r1, [pc, #52]	; (345c <clock_event_handler+0x54>)
    3426:	4a0e      	ldr	r2, [pc, #56]	; (3460 <clock_event_handler+0x58>)
    3428:	480e      	ldr	r0, [pc, #56]	; (3464 <clock_event_handler+0x5c>)
    342a:	f240 235e 	movw	r3, #606	; 0x25e
    342e:	f004 ff6f 	bl	8310 <printk>
    3432:	f240 215e 	movw	r1, #606	; 0x25e
}
    3436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    343a:	4809      	ldr	r0, [pc, #36]	; (3460 <clock_event_handler+0x58>)
    343c:	f005 b834 	b.w	84a8 <assert_post_action>
    3440:	4906      	ldr	r1, [pc, #24]	; (345c <clock_event_handler+0x54>)
    3442:	4a07      	ldr	r2, [pc, #28]	; (3460 <clock_event_handler+0x58>)
    3444:	4807      	ldr	r0, [pc, #28]	; (3464 <clock_event_handler+0x5c>)
    3446:	f240 2362 	movw	r3, #610	; 0x262
    344a:	f004 ff61 	bl	8310 <printk>
    344e:	f240 2162 	movw	r1, #610	; 0x262
    3452:	e7f0      	b.n	3436 <clock_event_handler+0x2e>
}
    3454:	bd08      	pop	{r3, pc}
    3456:	bf00      	nop
    3458:	20000bf8 	.word	0x20000bf8
    345c:	00009d9f 	.word	0x00009d9f
    3460:	00009a96 	.word	0x00009a96
    3464:	00009128 	.word	0x00009128

00003468 <generic_hfclk_start>:
{
    3468:	b508      	push	{r3, lr}
	__asm__ volatile(
    346a:	f04f 0320 	mov.w	r3, #32
    346e:	f3ef 8111 	mrs	r1, BASEPRI
    3472:	f383 8812 	msr	BASEPRI_MAX, r3
    3476:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    347a:	4a12      	ldr	r2, [pc, #72]	; (34c4 <generic_hfclk_start+0x5c>)
    347c:	6813      	ldr	r3, [r2, #0]
    347e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3482:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3486:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3488:	d00c      	beq.n	34a4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    348a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    348e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3492:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3496:	f013 0301 	ands.w	r3, r3, #1
    349a:	d003      	beq.n	34a4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    349c:	480a      	ldr	r0, [pc, #40]	; (34c8 <generic_hfclk_start+0x60>)
    349e:	f005 f8ad 	bl	85fc <set_on_state>
			already_started = true;
    34a2:	2301      	movs	r3, #1
	__asm__ volatile(
    34a4:	f381 8811 	msr	BASEPRI, r1
    34a8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    34ac:	b123      	cbz	r3, 34b8 <generic_hfclk_start+0x50>
}
    34ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    34b2:	2000      	movs	r0, #0
    34b4:	f7ff bf8e 	b.w	33d4 <clkstarted_handle.constprop.0>
}
    34b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    34bc:	2001      	movs	r0, #1
    34be:	f001 b9bd 	b.w	483c <nrfx_clock_start>
    34c2:	bf00      	nop
    34c4:	20000c50 	.word	0x20000c50
    34c8:	20000c40 	.word	0x20000c40

000034cc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    34cc:	4b09      	ldr	r3, [pc, #36]	; (34f4 <generic_hfclk_stop+0x28>)
    34ce:	f3bf 8f5b 	dmb	ish
    34d2:	e853 2f00 	ldrex	r2, [r3]
    34d6:	f022 0102 	bic.w	r1, r2, #2
    34da:	e843 1000 	strex	r0, r1, [r3]
    34de:	2800      	cmp	r0, #0
    34e0:	d1f7      	bne.n	34d2 <generic_hfclk_stop+0x6>
    34e2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    34e6:	07d3      	lsls	r3, r2, #31
    34e8:	d402      	bmi.n	34f0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    34ea:	2001      	movs	r0, #1
    34ec:	f001 b9fa 	b.w	48e4 <nrfx_clock_stop>
}
    34f0:	4770      	bx	lr
    34f2:	bf00      	nop
    34f4:	20000c50 	.word	0x20000c50

000034f8 <api_blocking_start>:
{
    34f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    34fa:	2200      	movs	r2, #0
    34fc:	2301      	movs	r3, #1
    34fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3502:	4a09      	ldr	r2, [pc, #36]	; (3528 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3504:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3508:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    350a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    350e:	f005 f89a 	bl	8646 <api_start>
	if (err < 0) {
    3512:	2800      	cmp	r0, #0
    3514:	db05      	blt.n	3522 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    3516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    351a:	2300      	movs	r3, #0
    351c:	4668      	mov	r0, sp
    351e:	f002 fe9d 	bl	625c <z_impl_k_sem_take>
}
    3522:	b005      	add	sp, #20
    3524:	f85d fb04 	ldr.w	pc, [sp], #4
    3528:	00008641 	.word	0x00008641

0000352c <z_nrf_clock_control_lf_on>:
{
    352c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3530:	4949      	ldr	r1, [pc, #292]	; (3658 <z_nrf_clock_control_lf_on+0x12c>)
    3532:	f3bf 8f5b 	dmb	ish
    3536:	4605      	mov	r5, r0
    3538:	2201      	movs	r2, #1
    353a:	e851 3f00 	ldrex	r3, [r1]
    353e:	e841 2000 	strex	r0, r2, [r1]
    3542:	2800      	cmp	r0, #0
    3544:	d1f9      	bne.n	353a <z_nrf_clock_control_lf_on+0xe>
    3546:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    354a:	b9a3      	cbnz	r3, 3576 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    354c:	4943      	ldr	r1, [pc, #268]	; (365c <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    354e:	4844      	ldr	r0, [pc, #272]	; (3660 <z_nrf_clock_control_lf_on+0x134>)
    3550:	604b      	str	r3, [r1, #4]
    3552:	60cb      	str	r3, [r1, #12]
    3554:	608a      	str	r2, [r1, #8]
    3556:	f7fe f94f 	bl	17f8 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    355a:	2800      	cmp	r0, #0
    355c:	da0b      	bge.n	3576 <z_nrf_clock_control_lf_on+0x4a>
    355e:	4941      	ldr	r1, [pc, #260]	; (3664 <z_nrf_clock_control_lf_on+0x138>)
    3560:	4841      	ldr	r0, [pc, #260]	; (3668 <z_nrf_clock_control_lf_on+0x13c>)
    3562:	4a42      	ldr	r2, [pc, #264]	; (366c <z_nrf_clock_control_lf_on+0x140>)
    3564:	f44f 7308 	mov.w	r3, #544	; 0x220
    3568:	f004 fed2 	bl	8310 <printk>
    356c:	483f      	ldr	r0, [pc, #252]	; (366c <z_nrf_clock_control_lf_on+0x140>)
    356e:	f44f 7108 	mov.w	r1, #544	; 0x220
    3572:	f004 ff99 	bl	84a8 <assert_post_action>
	switch (start_mode) {
    3576:	b3ad      	cbz	r5, 35e4 <z_nrf_clock_control_lf_on+0xb8>
    3578:	1e6b      	subs	r3, r5, #1
    357a:	2b01      	cmp	r3, #1
    357c:	d856      	bhi.n	362c <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    357e:	2d01      	cmp	r5, #1
    3580:	d107      	bne.n	3592 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3582:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3586:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    358a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    358e:	2b01      	cmp	r3, #1
    3590:	d028      	beq.n	35e4 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3592:	f005 fabd 	bl	8b10 <k_is_in_isr>
    3596:	4604      	mov	r4, r0
    3598:	b918      	cbnz	r0, 35a2 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    359a:	4b35      	ldr	r3, [pc, #212]	; (3670 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    359c:	781b      	ldrb	r3, [r3, #0]
    359e:	2b00      	cmp	r3, #0
    35a0:	d152      	bne.n	3648 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    35a2:	f04f 0320 	mov.w	r3, #32
    35a6:	f3ef 8611 	mrs	r6, BASEPRI
    35aa:	f383 8812 	msr	BASEPRI_MAX, r3
    35ae:	f3bf 8f6f 	isb	sy
    35b2:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35b4:	4f2f      	ldr	r7, [pc, #188]	; (3674 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    35b6:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 367c <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35ba:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 3680 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    35be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    35c2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    35c6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    35ca:	03d2      	lsls	r2, r2, #15
    35cc:	d50c      	bpl.n	35e8 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    35ce:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    35d2:	2b01      	cmp	r3, #1
    35d4:	d001      	beq.n	35da <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    35d6:	2d01      	cmp	r5, #1
    35d8:	d106      	bne.n	35e8 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    35da:	b30c      	cbz	r4, 3620 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    35dc:	f386 8811 	msr	BASEPRI, r6
    35e0:	f3bf 8f6f 	isb	sy
}
    35e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    35e8:	b1ac      	cbz	r4, 3616 <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    35ea:	4630      	mov	r0, r6
    35ec:	f7fe ff94 	bl	2518 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    35f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    35f4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    35f8:	2b00      	cmp	r3, #0
    35fa:	d1e0      	bne.n	35be <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    35fc:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    35fe:	2900      	cmp	r1, #0
    3600:	d0dd      	beq.n	35be <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3602:	603b      	str	r3, [r7, #0]
    3604:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3606:	2301      	movs	r3, #1
    3608:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    360c:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3610:	f8c9 3000 	str.w	r3, [r9]
}
    3614:	e7d3      	b.n	35be <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    3616:	2100      	movs	r1, #0
    3618:	2021      	movs	r0, #33	; 0x21
    361a:	f003 ff1f 	bl	745c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    361e:	e7e7      	b.n	35f0 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    3620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3624:	2202      	movs	r2, #2
    3626:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    362a:	e7db      	b.n	35e4 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    362c:	4912      	ldr	r1, [pc, #72]	; (3678 <z_nrf_clock_control_lf_on+0x14c>)
    362e:	480e      	ldr	r0, [pc, #56]	; (3668 <z_nrf_clock_control_lf_on+0x13c>)
    3630:	4a0e      	ldr	r2, [pc, #56]	; (366c <z_nrf_clock_control_lf_on+0x140>)
    3632:	f240 2332 	movw	r3, #562	; 0x232
    3636:	f004 fe6b 	bl	8310 <printk>
}
    363a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    363e:	480b      	ldr	r0, [pc, #44]	; (366c <z_nrf_clock_control_lf_on+0x140>)
    3640:	f240 2132 	movw	r1, #562	; 0x232
    3644:	f004 bf30 	b.w	84a8 <assert_post_action>
    p_reg->INTENCLR = mask;
    3648:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    364c:	2202      	movs	r2, #2
    364e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3652:	4606      	mov	r6, r0
}
    3654:	e7ae      	b.n	35b4 <z_nrf_clock_control_lf_on+0x88>
    3656:	bf00      	nop
    3658:	20000c54 	.word	0x20000c54
    365c:	20000be8 	.word	0x20000be8
    3660:	20000c18 	.word	0x20000c18
    3664:	00009af7 	.word	0x00009af7
    3668:	00009128 	.word	0x00009128
    366c:	00009a96 	.word	0x00009a96
    3670:	20000d0c 	.word	0x20000d0c
    3674:	40000104 	.word	0x40000104
    3678:	00009d9f 	.word	0x00009d9f
    367c:	e000e100 	.word	0xe000e100
    3680:	40000008 	.word	0x40000008

00003684 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    3684:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3686:	4b08      	ldr	r3, [pc, #32]	; (36a8 <uart_console_init+0x24>)
    3688:	4808      	ldr	r0, [pc, #32]	; (36ac <uart_console_init+0x28>)
    368a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    368c:	f005 fa1a 	bl	8ac4 <z_device_ready>
    3690:	b138      	cbz	r0, 36a2 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    3692:	4807      	ldr	r0, [pc, #28]	; (36b0 <uart_console_init+0x2c>)
    3694:	f7ff fb8c 	bl	2db0 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3698:	4805      	ldr	r0, [pc, #20]	; (36b0 <uart_console_init+0x2c>)
    369a:	f7fd fe6d 	bl	1378 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    369e:	2000      	movs	r0, #0
}
    36a0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    36a2:	f06f 0012 	mvn.w	r0, #18
    36a6:	e7fb      	b.n	36a0 <uart_console_init+0x1c>
    36a8:	20000c58 	.word	0x20000c58
    36ac:	00008cb4 	.word	0x00008cb4
    36b0:	000036b5 	.word	0x000036b5

000036b4 <console_out>:
	if ('\n' == c) {
    36b4:	280a      	cmp	r0, #10
{
    36b6:	b538      	push	{r3, r4, r5, lr}
    36b8:	4d07      	ldr	r5, [pc, #28]	; (36d8 <console_out+0x24>)
    36ba:	4604      	mov	r4, r0
	if ('\n' == c) {
    36bc:	d104      	bne.n	36c8 <console_out+0x14>
    36be:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    36c0:	6883      	ldr	r3, [r0, #8]
    36c2:	210d      	movs	r1, #13
    36c4:	685b      	ldr	r3, [r3, #4]
    36c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    36c8:	6828      	ldr	r0, [r5, #0]
    36ca:	6883      	ldr	r3, [r0, #8]
    36cc:	b2e1      	uxtb	r1, r4
    36ce:	685b      	ldr	r3, [r3, #4]
    36d0:	4798      	blx	r3
}
    36d2:	4620      	mov	r0, r4
    36d4:	bd38      	pop	{r3, r4, r5, pc}
    36d6:	bf00      	nop
    36d8:	20000c58 	.word	0x20000c58

000036dc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    36dc:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    36de:	6905      	ldr	r5, [r0, #16]
{
    36e0:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    36e2:	460c      	mov	r4, r1
    36e4:	b961      	cbnz	r1, 3700 <gpio_nrfx_manage_callback+0x24>
    36e6:	4922      	ldr	r1, [pc, #136]	; (3770 <gpio_nrfx_manage_callback+0x94>)
    36e8:	4a22      	ldr	r2, [pc, #136]	; (3774 <gpio_nrfx_manage_callback+0x98>)
    36ea:	4823      	ldr	r0, [pc, #140]	; (3778 <gpio_nrfx_manage_callback+0x9c>)
    36ec:	2324      	movs	r3, #36	; 0x24
    36ee:	f004 fe0f 	bl	8310 <printk>
    36f2:	4822      	ldr	r0, [pc, #136]	; (377c <gpio_nrfx_manage_callback+0xa0>)
    36f4:	f004 fe0c 	bl	8310 <printk>
    36f8:	481e      	ldr	r0, [pc, #120]	; (3774 <gpio_nrfx_manage_callback+0x98>)
    36fa:	2124      	movs	r1, #36	; 0x24
    36fc:	f004 fed4 	bl	84a8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    3700:	6863      	ldr	r3, [r4, #4]
    3702:	b963      	cbnz	r3, 371e <gpio_nrfx_manage_callback+0x42>
    3704:	491e      	ldr	r1, [pc, #120]	; (3780 <gpio_nrfx_manage_callback+0xa4>)
    3706:	4a1b      	ldr	r2, [pc, #108]	; (3774 <gpio_nrfx_manage_callback+0x98>)
    3708:	481b      	ldr	r0, [pc, #108]	; (3778 <gpio_nrfx_manage_callback+0x9c>)
    370a:	2325      	movs	r3, #37	; 0x25
    370c:	f004 fe00 	bl	8310 <printk>
    3710:	481c      	ldr	r0, [pc, #112]	; (3784 <gpio_nrfx_manage_callback+0xa8>)
    3712:	f004 fdfd 	bl	8310 <printk>
    3716:	4817      	ldr	r0, [pc, #92]	; (3774 <gpio_nrfx_manage_callback+0x98>)
    3718:	2125      	movs	r1, #37	; 0x25
    371a:	f004 fec5 	bl	84a8 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    371e:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    3720:	b15b      	cbz	r3, 373a <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3722:	2200      	movs	r2, #0
    3724:	429c      	cmp	r4, r3
    3726:	d113      	bne.n	3750 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    3728:	6823      	ldr	r3, [r4, #0]
    372a:	b95a      	cbnz	r2, 3744 <gpio_nrfx_manage_callback+0x68>
    372c:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    372e:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    3730:	4294      	cmp	r4, r2
    3732:	d100      	bne.n	3736 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    3734:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    3736:	2300      	movs	r3, #0
    3738:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    373a:	b976      	cbnz	r6, 375a <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    373c:	2000      	movs	r0, #0
				     callback, set);
}
    373e:	bd70      	pop	{r4, r5, r6, pc}
    3740:	460b      	mov	r3, r1
    3742:	e7ef      	b.n	3724 <gpio_nrfx_manage_callback+0x48>
    3744:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    3746:	68ab      	ldr	r3, [r5, #8]
    3748:	429c      	cmp	r4, r3
	list->tail = node;
    374a:	bf08      	it	eq
    374c:	60aa      	streq	r2, [r5, #8]
}
    374e:	e7f2      	b.n	3736 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3750:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3752:	461a      	mov	r2, r3
    3754:	2900      	cmp	r1, #0
    3756:	d1f3      	bne.n	3740 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    3758:	b13e      	cbz	r6, 376a <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    375a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    375c:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    375e:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    3760:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    3762:	2800      	cmp	r0, #0
    3764:	d1ea      	bne.n	373c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    3766:	60ac      	str	r4, [r5, #8]
}
    3768:	e7e9      	b.n	373e <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    376a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    376e:	e7e6      	b.n	373e <gpio_nrfx_manage_callback+0x62>
    3770:	00009b33 	.word	0x00009b33
    3774:	00009b06 	.word	0x00009b06
    3778:	00009128 	.word	0x00009128
    377c:	00009b3c 	.word	0x00009b3c
    3780:	00009b4b 	.word	0x00009b4b
    3784:	00009b5d 	.word	0x00009b5d

00003788 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3788:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    378a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    378e:	d003      	beq.n	3798 <nrfx_gpio_handler+0x10>
    3790:	2b01      	cmp	r3, #1
    3792:	d036      	beq.n	3802 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3798:	4f1b      	ldr	r7, [pc, #108]	; (3808 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    379a:	693b      	ldr	r3, [r7, #16]
    379c:	685c      	ldr	r4, [r3, #4]
    379e:	2c00      	cmp	r4, #0
    37a0:	d0f8      	beq.n	3794 <nrfx_gpio_handler+0xc>
    37a2:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    37a4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3814 <nrfx_gpio_handler+0x8c>
    37a8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3818 <nrfx_gpio_handler+0x90>
    37ac:	f8df a06c 	ldr.w	sl, [pc, #108]	; 381c <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    37b0:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    37b4:	2601      	movs	r6, #1
    37b6:	2d00      	cmp	r5, #0
    37b8:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    37bc:	bf38      	it	cc
    37be:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    37c0:	68a3      	ldr	r3, [r4, #8]
    37c2:	421e      	tst	r6, r3
    37c4:	d014      	beq.n	37f0 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    37c6:	6863      	ldr	r3, [r4, #4]
    37c8:	b963      	cbnz	r3, 37e4 <nrfx_gpio_handler+0x5c>
    37ca:	4649      	mov	r1, r9
    37cc:	2345      	movs	r3, #69	; 0x45
    37ce:	4642      	mov	r2, r8
    37d0:	4650      	mov	r0, sl
    37d2:	f004 fd9d 	bl	8310 <printk>
    37d6:	480d      	ldr	r0, [pc, #52]	; (380c <nrfx_gpio_handler+0x84>)
    37d8:	f004 fd9a 	bl	8310 <printk>
    37dc:	2145      	movs	r1, #69	; 0x45
    37de:	4640      	mov	r0, r8
    37e0:	f004 fe62 	bl	84a8 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    37e4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    37e8:	4621      	mov	r1, r4
    37ea:	4032      	ands	r2, r6
    37ec:	4638      	mov	r0, r7
    37ee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    37f0:	2d00      	cmp	r5, #0
    37f2:	d0cf      	beq.n	3794 <nrfx_gpio_handler+0xc>
    37f4:	682b      	ldr	r3, [r5, #0]
    37f6:	2b00      	cmp	r3, #0
    37f8:	bf38      	it	cc
    37fa:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    37fc:	462c      	mov	r4, r5
    37fe:	461d      	mov	r5, r3
    3800:	e7de      	b.n	37c0 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3802:	4f03      	ldr	r7, [pc, #12]	; (3810 <nrfx_gpio_handler+0x88>)
    3804:	e7c9      	b.n	379a <nrfx_gpio_handler+0x12>
    3806:	bf00      	nop
    3808:	00008c6c 	.word	0x00008c6c
    380c:	00009b5d 	.word	0x00009b5d
    3810:	00008c84 	.word	0x00008c84
    3814:	00009b06 	.word	0x00009b06
    3818:	00009b74 	.word	0x00009b74
    381c:	00009128 	.word	0x00009128

00003820 <gpio_nrfx_pin_interrupt_configure>:
{
    3820:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3822:	6840      	ldr	r0, [r0, #4]
    3824:	7b05      	ldrb	r5, [r0, #12]
    3826:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    382a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    382e:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3832:	f04f 0500 	mov.w	r5, #0
    3836:	d104      	bne.n	3842 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3838:	4620      	mov	r0, r4
    383a:	f001 fba5 	bl	4f88 <nrfx_gpiote_trigger_disable>
	return 0;
    383e:	2000      	movs	r0, #0
    3840:	e054      	b.n	38ec <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3842:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3846:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    384a:	d151      	bne.n	38f0 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    384c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3850:	bf0c      	ite	eq
    3852:	2304      	moveq	r3, #4
    3854:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3856:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    385a:	6883      	ldr	r3, [r0, #8]
    385c:	fa23 f101 	lsr.w	r1, r3, r1
    3860:	f011 0101 	ands.w	r1, r1, #1
    3864:	d155      	bne.n	3912 <gpio_nrfx_pin_interrupt_configure+0xf2>
    3866:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    386a:	d152      	bne.n	3912 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    386c:	0966      	lsrs	r6, r4, #5
    386e:	d04a      	beq.n	3906 <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    3870:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3874:	2e01      	cmp	r6, #1
    3876:	bf08      	it	eq
    3878:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    387a:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    387e:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3880:	07ca      	lsls	r2, r1, #31
    3882:	d40b      	bmi.n	389c <gpio_nrfx_pin_interrupt_configure+0x7c>
    3884:	492b      	ldr	r1, [pc, #172]	; (3934 <gpio_nrfx_pin_interrupt_configure+0x114>)
    3886:	482c      	ldr	r0, [pc, #176]	; (3938 <gpio_nrfx_pin_interrupt_configure+0x118>)
    3888:	4a2c      	ldr	r2, [pc, #176]	; (393c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    388a:	f240 2329 	movw	r3, #553	; 0x229
    388e:	f004 fd3f 	bl	8310 <printk>
    3892:	482a      	ldr	r0, [pc, #168]	; (393c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3894:	f240 2129 	movw	r1, #553	; 0x229
    3898:	f004 fe06 	bl	84a8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    389c:	b16e      	cbz	r6, 38ba <gpio_nrfx_pin_interrupt_configure+0x9a>
    389e:	2e01      	cmp	r6, #1
    38a0:	d034      	beq.n	390c <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    38a2:	4927      	ldr	r1, [pc, #156]	; (3940 <gpio_nrfx_pin_interrupt_configure+0x120>)
    38a4:	4824      	ldr	r0, [pc, #144]	; (3938 <gpio_nrfx_pin_interrupt_configure+0x118>)
    38a6:	4a25      	ldr	r2, [pc, #148]	; (393c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    38a8:	f240 232e 	movw	r3, #558	; 0x22e
    38ac:	f004 fd30 	bl	8310 <printk>
    38b0:	4822      	ldr	r0, [pc, #136]	; (393c <gpio_nrfx_pin_interrupt_configure+0x11c>)
    38b2:	f240 212e 	movw	r1, #558	; 0x22e
    38b6:	f004 fdf7 	bl	84a8 <assert_post_action>
        case 0: return NRF_P0;
    38ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    38be:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    38c2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    38c6:	07db      	lsls	r3, r3, #31
    38c8:	d423      	bmi.n	3912 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    38ca:	f10d 0507 	add.w	r5, sp, #7
    38ce:	4629      	mov	r1, r5
    38d0:	4620      	mov	r0, r4
    38d2:	f001 fa83 	bl	4ddc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    38d6:	4b1b      	ldr	r3, [pc, #108]	; (3944 <gpio_nrfx_pin_interrupt_configure+0x124>)
    38d8:	4298      	cmp	r0, r3
    38da:	d119      	bne.n	3910 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    38dc:	4628      	mov	r0, r5
    38de:	f001 fadd 	bl	4e9c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    38e2:	4b19      	ldr	r3, [pc, #100]	; (3948 <gpio_nrfx_pin_interrupt_configure+0x128>)
    38e4:	4298      	cmp	r0, r3
    38e6:	d013      	beq.n	3910 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    38e8:	f06f 000b 	mvn.w	r0, #11
}
    38ec:	b004      	add	sp, #16
    38ee:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    38f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    38f4:	d005      	beq.n	3902 <gpio_nrfx_pin_interrupt_configure+0xe2>
    38f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    38fa:	bf0c      	ite	eq
    38fc:	2302      	moveq	r3, #2
    38fe:	2301      	movne	r3, #1
    3900:	e7a9      	b.n	3856 <gpio_nrfx_pin_interrupt_configure+0x36>
    3902:	2303      	movs	r3, #3
    3904:	e7a7      	b.n	3856 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    3906:	f04f 31ff 	mov.w	r1, #4294967295
    390a:	e7b6      	b.n	387a <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    390c:	4b0f      	ldr	r3, [pc, #60]	; (394c <gpio_nrfx_pin_interrupt_configure+0x12c>)
    390e:	e7d6      	b.n	38be <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    3910:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3912:	2300      	movs	r3, #0
    3914:	4619      	mov	r1, r3
    3916:	aa02      	add	r2, sp, #8
    3918:	4620      	mov	r0, r4
    391a:	f001 f941 	bl	4ba0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    391e:	4b0a      	ldr	r3, [pc, #40]	; (3948 <gpio_nrfx_pin_interrupt_configure+0x128>)
    3920:	4298      	cmp	r0, r3
    3922:	d104      	bne.n	392e <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3924:	2101      	movs	r1, #1
    3926:	4620      	mov	r0, r4
    3928:	f001 fabe 	bl	4ea8 <nrfx_gpiote_trigger_enable>
    392c:	e787      	b.n	383e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    392e:	f06f 0004 	mvn.w	r0, #4
    3932:	e7db      	b.n	38ec <gpio_nrfx_pin_interrupt_configure+0xcc>
    3934:	00009bb3 	.word	0x00009bb3
    3938:	00009128 	.word	0x00009128
    393c:	00009b80 	.word	0x00009b80
    3940:	00009d9f 	.word	0x00009d9f
    3944:	0bad0004 	.word	0x0bad0004
    3948:	0bad0000 	.word	0x0bad0000
    394c:	50000300 	.word	0x50000300

00003950 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3950:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3952:	f001 fa93 	bl	4e7c <nrfx_gpiote_is_init>
    3956:	4604      	mov	r4, r0
    3958:	b968      	cbnz	r0, 3976 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    395a:	f001 fa67 	bl	4e2c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    395e:	4b08      	ldr	r3, [pc, #32]	; (3980 <gpio_nrfx_init+0x30>)
    3960:	4298      	cmp	r0, r3
    3962:	d10a      	bne.n	397a <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3964:	4807      	ldr	r0, [pc, #28]	; (3984 <gpio_nrfx_init+0x34>)
    3966:	4621      	mov	r1, r4
    3968:	f001 fa32 	bl	4dd0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    396c:	4622      	mov	r2, r4
    396e:	2105      	movs	r1, #5
    3970:	2006      	movs	r0, #6
    3972:	f7fe fdf9 	bl	2568 <z_arm_irq_priority_set>
		return 0;
    3976:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3978:	bd10      	pop	{r4, pc}
		return -EIO;
    397a:	f06f 0004 	mvn.w	r0, #4
    397e:	e7fb      	b.n	3978 <gpio_nrfx_init+0x28>
    3980:	0bad0000 	.word	0x0bad0000
    3984:	00003789 	.word	0x00003789

00003988 <gpio_nrfx_pin_configure>:
{
    3988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    398c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    398e:	7b3b      	ldrb	r3, [r7, #12]
    3990:	f001 051f 	and.w	r5, r1, #31
{
    3994:	b085      	sub	sp, #20
    3996:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3998:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    399c:	4614      	mov	r4, r2
    399e:	b9ca      	cbnz	r2, 39d4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    39a0:	a902      	add	r1, sp, #8
    39a2:	4628      	mov	r0, r5
    39a4:	f001 fa1a 	bl	4ddc <nrfx_gpiote_channel_get>
    39a8:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    39aa:	4628      	mov	r0, r5
    39ac:	f001 fb0e 	bl	4fcc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    39b0:	4b48      	ldr	r3, [pc, #288]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    39b2:	4298      	cmp	r0, r3
    39b4:	d004      	beq.n	39c0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    39b6:	f06f 0004 	mvn.w	r0, #4
}
    39ba:	b005      	add	sp, #20
    39bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    39c0:	4284      	cmp	r4, r0
    39c2:	d105      	bne.n	39d0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    39c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    39c8:	f001 fa62 	bl	4e90 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    39cc:	42a0      	cmp	r0, r4
    39ce:	d1f2      	bne.n	39b6 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    39d0:	2000      	movs	r0, #0
    39d2:	e7f2      	b.n	39ba <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    39d4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    39d8:	f10d 0103 	add.w	r1, sp, #3
    39dc:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    39de:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    39e2:	f001 f9fb 	bl	4ddc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    39e6:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    39e8:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    39ea:	aa02      	add	r2, sp, #8
    39ec:	4649      	mov	r1, r9
    39ee:	4628      	mov	r0, r5
    39f0:	f001 f8d6 	bl	4ba0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    39f4:	4b37      	ldr	r3, [pc, #220]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    39f6:	4298      	cmp	r0, r3
    39f8:	d002      	beq.n	3a00 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    39fa:	f06f 0015 	mvn.w	r0, #21
    39fe:	e7dc      	b.n	39ba <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3a00:	4580      	cmp	r8, r0
    3a02:	d103      	bne.n	3a0c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3a04:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3a08:	f001 fa42 	bl	4e90 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3a0c:	05a3      	lsls	r3, r4, #22
    3a0e:	d54e      	bpl.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3a10:	4b31      	ldr	r3, [pc, #196]	; (3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>)
    3a12:	4a32      	ldr	r2, [pc, #200]	; (3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>)
    3a14:	4023      	ands	r3, r4
    3a16:	4293      	cmp	r3, r2
    3a18:	d03a      	beq.n	3a90 <gpio_nrfx_pin_configure+0x108>
    3a1a:	d80c      	bhi.n	3a36 <gpio_nrfx_pin_configure+0xae>
    3a1c:	2b06      	cmp	r3, #6
    3a1e:	d014      	beq.n	3a4a <gpio_nrfx_pin_configure+0xc2>
    3a20:	d804      	bhi.n	3a2c <gpio_nrfx_pin_configure+0xa4>
    3a22:	b193      	cbz	r3, 3a4a <gpio_nrfx_pin_configure+0xc2>
    3a24:	2b02      	cmp	r3, #2
    3a26:	d1e8      	bne.n	39fa <gpio_nrfx_pin_configure+0x72>
    3a28:	2304      	movs	r3, #4
    3a2a:	e00e      	b.n	3a4a <gpio_nrfx_pin_configure+0xc2>
    3a2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3a30:	d1e3      	bne.n	39fa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3a32:	2301      	movs	r3, #1
    3a34:	e009      	b.n	3a4a <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3a36:	4a2a      	ldr	r2, [pc, #168]	; (3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>)
    3a38:	4293      	cmp	r3, r2
    3a3a:	d02b      	beq.n	3a94 <gpio_nrfx_pin_configure+0x10c>
    3a3c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3a40:	d02a      	beq.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3a46:	d1d8      	bne.n	39fa <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3a48:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3a4a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3a4e:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3a52:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3a56:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3a58:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3a5c:	bf54      	ite	pl
    3a5e:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3a62:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a64:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3a66:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3a6a:	d517      	bpl.n	3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3a6c:	687b      	ldr	r3, [r7, #4]
    3a6e:	2101      	movs	r1, #1
    3a70:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3a74:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3a78:	2200      	movs	r2, #0
    3a7a:	a901      	add	r1, sp, #4
    3a7c:	4628      	mov	r0, r5
    3a7e:	f001 f937 	bl	4cf0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3a82:	4b14      	ldr	r3, [pc, #80]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3a84:	4298      	cmp	r0, r3
    3a86:	bf14      	ite	ne
    3a88:	f06f 0015 	mvnne.w	r0, #21
    3a8c:	2000      	moveq	r0, #0
    3a8e:	e794      	b.n	39ba <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3a90:	2307      	movs	r3, #7
    3a92:	e7da      	b.n	3a4a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3a94:	2305      	movs	r3, #5
    3a96:	e7d8      	b.n	3a4a <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3a98:	2303      	movs	r3, #3
    3a9a:	e7d6      	b.n	3a4a <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3a9c:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3a9e:	bf41      	itttt	mi
    3aa0:	687b      	ldrmi	r3, [r7, #4]
    3aa2:	2101      	movmi	r1, #1
    3aa4:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3aa8:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3aac:	e7e4      	b.n	3a78 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3aae:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3ab0:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3ab4:	bf54      	ite	pl
    3ab6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3aba:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3abc:	461a      	mov	r2, r3
    3abe:	a901      	add	r1, sp, #4
    3ac0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3ac2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3ac6:	f001 f86b 	bl	4ba0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3aca:	4b02      	ldr	r3, [pc, #8]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3acc:	4298      	cmp	r0, r3
    3ace:	f43f af7f 	beq.w	39d0 <gpio_nrfx_pin_configure+0x48>
    3ad2:	e792      	b.n	39fa <gpio_nrfx_pin_configure+0x72>
    3ad4:	0bad0000 	.word	0x0bad0000
    3ad8:	00f00006 	.word	0x00f00006
    3adc:	00100006 	.word	0x00100006
    3ae0:	00400002 	.word	0x00400002

00003ae4 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3ae4:	4802      	ldr	r0, [pc, #8]	; (3af0 <pwm_nrfx_get_cycles_per_sec+0xc>)
    3ae6:	2100      	movs	r1, #0
    3ae8:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3aec:	2000      	movs	r0, #0
    3aee:	4770      	bx	lr
    3af0:	00f42400 	.word	0x00f42400

00003af4 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3af4:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    3af6:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3af8:	6912      	ldr	r2, [r2, #16]
{
    3afa:	b538      	push	{r3, r4, r5, lr}
    3afc:	f100 0308 	add.w	r3, r0, #8
    3b00:	3204      	adds	r2, #4
    3b02:	f100 040c 	add.w	r4, r0, #12
    3b06:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    3b08:	f913 5b01 	ldrsb.w	r5, [r3], #1
    3b0c:	2d00      	cmp	r5, #0
    3b0e:	bfb4      	ite	lt
    3b10:	2500      	movlt	r5, #0
    3b12:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3b16:	42a3      	cmp	r3, r4

		data->current[i] = value;
    3b18:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3b1c:	d1f4      	bne.n	3b08 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3b1e:	2300      	movs	r3, #0
    3b20:	461a      	mov	r2, r3
    3b22:	f001 fc15 	bl	5350 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    3b26:	4b03      	ldr	r3, [pc, #12]	; (3b34 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    3b28:	4298      	cmp	r0, r3
	}

	return 0;
}
    3b2a:	bf14      	ite	ne
    3b2c:	f06f 000f 	mvnne.w	r0, #15
    3b30:	2000      	moveq	r0, #0
    3b32:	bd38      	pop	{r3, r4, r5, pc}
    3b34:	0bad0000 	.word	0x0bad0000

00003b38 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b38:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3b3a:	0953      	lsrs	r3, r2, #5
{
    3b3c:	b510      	push	{r4, lr}
    3b3e:	4604      	mov	r4, r0
    switch (port)
    3b40:	d02c      	beq.n	3b9c <nrf_gpio_pin_port_decode+0x64>
    3b42:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3b48:	bf18      	it	ne
    3b4a:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3b4c:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3b50:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b52:	07db      	lsls	r3, r3, #31
    3b54:	d40b      	bmi.n	3b6e <nrf_gpio_pin_port_decode+0x36>
    3b56:	4914      	ldr	r1, [pc, #80]	; (3ba8 <nrf_gpio_pin_port_decode+0x70>)
    3b58:	4814      	ldr	r0, [pc, #80]	; (3bac <nrf_gpio_pin_port_decode+0x74>)
    3b5a:	4a15      	ldr	r2, [pc, #84]	; (3bb0 <nrf_gpio_pin_port_decode+0x78>)
    3b5c:	f240 2329 	movw	r3, #553	; 0x229
    3b60:	f004 fbd6 	bl	8310 <printk>
    3b64:	4812      	ldr	r0, [pc, #72]	; (3bb0 <nrf_gpio_pin_port_decode+0x78>)
    3b66:	f240 2129 	movw	r1, #553	; 0x229
    3b6a:	f004 fc9d 	bl	84a8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3b6e:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3b70:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b74:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3b76:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b78:	d00d      	beq.n	3b96 <nrf_gpio_pin_port_decode+0x5e>
    3b7a:	2b01      	cmp	r3, #1
    3b7c:	d011      	beq.n	3ba2 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3b7e:	490d      	ldr	r1, [pc, #52]	; (3bb4 <nrf_gpio_pin_port_decode+0x7c>)
    3b80:	480a      	ldr	r0, [pc, #40]	; (3bac <nrf_gpio_pin_port_decode+0x74>)
    3b82:	4a0b      	ldr	r2, [pc, #44]	; (3bb0 <nrf_gpio_pin_port_decode+0x78>)
    3b84:	f240 232e 	movw	r3, #558	; 0x22e
    3b88:	f004 fbc2 	bl	8310 <printk>
    3b8c:	4808      	ldr	r0, [pc, #32]	; (3bb0 <nrf_gpio_pin_port_decode+0x78>)
    3b8e:	f240 212e 	movw	r1, #558	; 0x22e
    3b92:	f004 fc89 	bl	84a8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3b96:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3b9a:	bd10      	pop	{r4, pc}
    switch (port)
    3b9c:	f04f 33ff 	mov.w	r3, #4294967295
    3ba0:	e7d4      	b.n	3b4c <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3ba2:	4805      	ldr	r0, [pc, #20]	; (3bb8 <nrf_gpio_pin_port_decode+0x80>)
    3ba4:	e7f9      	b.n	3b9a <nrf_gpio_pin_port_decode+0x62>
    3ba6:	bf00      	nop
    3ba8:	00009bb3 	.word	0x00009bb3
    3bac:	00009128 	.word	0x00009128
    3bb0:	00009b80 	.word	0x00009b80
    3bb4:	00009d9f 	.word	0x00009d9f
    3bb8:	50000300 	.word	0x50000300

00003bbc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3bbe:	794b      	ldrb	r3, [r1, #5]
    3bc0:	2b01      	cmp	r3, #1
    3bc2:	d026      	beq.n	3c12 <uarte_nrfx_configure+0x56>
    3bc4:	2b03      	cmp	r3, #3
    3bc6:	d121      	bne.n	3c0c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3bc8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3bca:	798b      	ldrb	r3, [r1, #6]
    3bcc:	2b03      	cmp	r3, #3
    3bce:	d11d      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3bd0:	79cc      	ldrb	r4, [r1, #7]
    3bd2:	b10c      	cbz	r4, 3bd8 <uarte_nrfx_configure+0x1c>
    3bd4:	2c01      	cmp	r4, #1
    3bd6:	d119      	bne.n	3c0c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3bd8:	790a      	ldrb	r2, [r1, #4]
    3bda:	b112      	cbz	r2, 3be2 <uarte_nrfx_configure+0x26>
    3bdc:	2a02      	cmp	r2, #2
    3bde:	d115      	bne.n	3c0c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3be0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3be2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3be4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3be6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3bea:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3bec:	d065      	beq.n	3cba <uarte_nrfx_configure+0xfe>
    3bee:	d82d      	bhi.n	3c4c <uarte_nrfx_configure+0x90>
    3bf0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3bf4:	d064      	beq.n	3cc0 <uarte_nrfx_configure+0x104>
    3bf6:	d816      	bhi.n	3c26 <uarte_nrfx_configure+0x6a>
    3bf8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3bfc:	d062      	beq.n	3cc4 <uarte_nrfx_configure+0x108>
    3bfe:	d80a      	bhi.n	3c16 <uarte_nrfx_configure+0x5a>
    3c00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3c04:	d061      	beq.n	3cca <uarte_nrfx_configure+0x10e>
    3c06:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3c0a:	d061      	beq.n	3cd0 <uarte_nrfx_configure+0x114>
    3c0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3c10:	e052      	b.n	3cb8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3c12:	2600      	movs	r6, #0
    3c14:	e7d9      	b.n	3bca <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3c16:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3c1a:	d05c      	beq.n	3cd6 <uarte_nrfx_configure+0x11a>
    3c1c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3c20:	d1f4      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3c22:	4b37      	ldr	r3, [pc, #220]	; (3d00 <uarte_nrfx_configure+0x144>)
    3c24:	e03c      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c26:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3c2a:	d057      	beq.n	3cdc <uarte_nrfx_configure+0x120>
    3c2c:	d807      	bhi.n	3c3e <uarte_nrfx_configure+0x82>
    3c2e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3c32:	d055      	beq.n	3ce0 <uarte_nrfx_configure+0x124>
    3c34:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3c38:	d1e8      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3c3a:	4b32      	ldr	r3, [pc, #200]	; (3d04 <uarte_nrfx_configure+0x148>)
    3c3c:	e030      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c3e:	f647 2712 	movw	r7, #31250	; 0x7a12
    3c42:	42bb      	cmp	r3, r7
    3c44:	d1e2      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3c46:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3c4a:	e029      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c4c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3c50:	d048      	beq.n	3ce4 <uarte_nrfx_configure+0x128>
    3c52:	d813      	bhi.n	3c7c <uarte_nrfx_configure+0xc0>
    3c54:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3c58:	d047      	beq.n	3cea <uarte_nrfx_configure+0x12e>
    3c5a:	d809      	bhi.n	3c70 <uarte_nrfx_configure+0xb4>
    3c5c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3c60:	42bb      	cmp	r3, r7
    3c62:	d044      	beq.n	3cee <uarte_nrfx_configure+0x132>
    3c64:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3c68:	d1d0      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3c6a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3c6e:	e017      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c70:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3c74:	d1ca      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3c76:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3c7a:	e011      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c7c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3c80:	d038      	beq.n	3cf4 <uarte_nrfx_configure+0x138>
    3c82:	d808      	bhi.n	3c96 <uarte_nrfx_configure+0xda>
    3c84:	4f20      	ldr	r7, [pc, #128]	; (3d08 <uarte_nrfx_configure+0x14c>)
    3c86:	42bb      	cmp	r3, r7
    3c88:	d037      	beq.n	3cfa <uarte_nrfx_configure+0x13e>
    3c8a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3c8e:	d1bd      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3c90:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3c94:	e004      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3c96:	4f1d      	ldr	r7, [pc, #116]	; (3d0c <uarte_nrfx_configure+0x150>)
    3c98:	42bb      	cmp	r3, r7
    3c9a:	d1b7      	bne.n	3c0c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3c9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3ca0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3ca4:	6903      	ldr	r3, [r0, #16]
    3ca6:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3ca8:	4334      	orrs	r4, r6
    3caa:	4322      	orrs	r2, r4
    3cac:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3cae:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3cb2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3cb6:	2000      	movs	r0, #0
}
    3cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3cba:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3cbe:	e7ef      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3cc0:	4b13      	ldr	r3, [pc, #76]	; (3d10 <uarte_nrfx_configure+0x154>)
    3cc2:	e7ed      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3cc4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3cc8:	e7ea      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3cca:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3cce:	e7e7      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3cd0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3cd4:	e7e4      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3cd6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3cda:	e7e1      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3cdc:	4b0d      	ldr	r3, [pc, #52]	; (3d14 <uarte_nrfx_configure+0x158>)
    3cde:	e7df      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3ce0:	4b0d      	ldr	r3, [pc, #52]	; (3d18 <uarte_nrfx_configure+0x15c>)
    3ce2:	e7dd      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3ce4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3ce8:	e7da      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3cea:	4b0c      	ldr	r3, [pc, #48]	; (3d1c <uarte_nrfx_configure+0x160>)
    3cec:	e7d8      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3cee:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3cf2:	e7d5      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3cf4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3cf8:	e7d2      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3cfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3cfe:	e7cf      	b.n	3ca0 <uarte_nrfx_configure+0xe4>
    3d00:	0013b000 	.word	0x0013b000
    3d04:	004ea000 	.word	0x004ea000
    3d08:	0003d090 	.word	0x0003d090
    3d0c:	000f4240 	.word	0x000f4240
    3d10:	00275000 	.word	0x00275000
    3d14:	0075c000 	.word	0x0075c000
    3d18:	003af000 	.word	0x003af000
    3d1c:	013a9000 	.word	0x013a9000

00003d20 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d20:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3d22:	0953      	lsrs	r3, r2, #5
{
    3d24:	b510      	push	{r4, lr}
    3d26:	4604      	mov	r4, r0
    switch (port)
    3d28:	d02c      	beq.n	3d84 <nrf_gpio_pin_port_decode+0x64>
    3d2a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3d2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3d30:	bf18      	it	ne
    3d32:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3d34:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3d38:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3d3a:	07db      	lsls	r3, r3, #31
    3d3c:	d40b      	bmi.n	3d56 <nrf_gpio_pin_port_decode+0x36>
    3d3e:	4914      	ldr	r1, [pc, #80]	; (3d90 <nrf_gpio_pin_port_decode+0x70>)
    3d40:	4814      	ldr	r0, [pc, #80]	; (3d94 <nrf_gpio_pin_port_decode+0x74>)
    3d42:	4a15      	ldr	r2, [pc, #84]	; (3d98 <nrf_gpio_pin_port_decode+0x78>)
    3d44:	f240 2329 	movw	r3, #553	; 0x229
    3d48:	f004 fae2 	bl	8310 <printk>
    3d4c:	4812      	ldr	r0, [pc, #72]	; (3d98 <nrf_gpio_pin_port_decode+0x78>)
    3d4e:	f240 2129 	movw	r1, #553	; 0x229
    3d52:	f004 fba9 	bl	84a8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3d56:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3d58:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d5c:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3d5e:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d60:	d00d      	beq.n	3d7e <nrf_gpio_pin_port_decode+0x5e>
    3d62:	2b01      	cmp	r3, #1
    3d64:	d011      	beq.n	3d8a <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3d66:	490d      	ldr	r1, [pc, #52]	; (3d9c <nrf_gpio_pin_port_decode+0x7c>)
    3d68:	480a      	ldr	r0, [pc, #40]	; (3d94 <nrf_gpio_pin_port_decode+0x74>)
    3d6a:	4a0b      	ldr	r2, [pc, #44]	; (3d98 <nrf_gpio_pin_port_decode+0x78>)
    3d6c:	f240 232e 	movw	r3, #558	; 0x22e
    3d70:	f004 face 	bl	8310 <printk>
    3d74:	4808      	ldr	r0, [pc, #32]	; (3d98 <nrf_gpio_pin_port_decode+0x78>)
    3d76:	f240 212e 	movw	r1, #558	; 0x22e
    3d7a:	f004 fb95 	bl	84a8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3d7e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3d82:	bd10      	pop	{r4, pc}
    switch (port)
    3d84:	f04f 33ff 	mov.w	r3, #4294967295
    3d88:	e7d4      	b.n	3d34 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3d8a:	4805      	ldr	r0, [pc, #20]	; (3da0 <nrf_gpio_pin_port_decode+0x80>)
    3d8c:	e7f9      	b.n	3d82 <nrf_gpio_pin_port_decode+0x62>
    3d8e:	bf00      	nop
    3d90:	00009bb3 	.word	0x00009bb3
    3d94:	00009128 	.word	0x00009128
    3d98:	00009b80 	.word	0x00009b80
    3d9c:	00009d9f 	.word	0x00009d9f
    3da0:	50000300 	.word	0x50000300

00003da4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3da6:	6906      	ldr	r6, [r0, #16]
{
    3da8:	4605      	mov	r5, r0
    3daa:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3dac:	f004 feb0 	bl	8b10 <k_is_in_isr>
    3db0:	b910      	cbnz	r0, 3db8 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3db2:	4b2c      	ldr	r3, [pc, #176]	; (3e64 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    3db4:	781b      	ldrb	r3, [r3, #0]
    3db6:	b983      	cbnz	r3, 3dda <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3db8:	f04f 0320 	mov.w	r3, #32
    3dbc:	f3ef 8411 	mrs	r4, BASEPRI
    3dc0:	f383 8812 	msr	BASEPRI_MAX, r3
    3dc4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    3dc8:	4628      	mov	r0, r5
    3dca:	f004 fd94 	bl	88f6 <is_tx_ready>
    3dce:	bb28      	cbnz	r0, 3e1c <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3dd0:	f384 8811 	msr	BASEPRI, r4
    3dd4:	f3bf 8f6f 	isb	sy
}
    3dd8:	e7ee      	b.n	3db8 <uarte_nrfx_poll_out+0x14>
{
    3dda:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3ddc:	4628      	mov	r0, r5
    3dde:	f004 fd8a 	bl	88f6 <is_tx_ready>
    3de2:	b970      	cbnz	r0, 3e02 <uarte_nrfx_poll_out+0x5e>
    3de4:	2001      	movs	r0, #1
    3de6:	f004 fdd8 	bl	899a <nrfx_busy_wait>
    3dea:	3c01      	subs	r4, #1
    3dec:	d1f6      	bne.n	3ddc <uarte_nrfx_poll_out+0x38>
    3dee:	2100      	movs	r1, #0
    3df0:	2021      	movs	r0, #33	; 0x21
    3df2:	f003 fb33 	bl	745c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3df6:	e7f0      	b.n	3dda <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3df8:	f384 8811 	msr	BASEPRI, r4
    3dfc:	f3bf 8f6f 	isb	sy
}
    3e00:	e7f5      	b.n	3dee <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3e02:	f04f 0320 	mov.w	r3, #32
    3e06:	f3ef 8411 	mrs	r4, BASEPRI
    3e0a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e0e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3e12:	4628      	mov	r0, r5
    3e14:	f004 fd6f 	bl	88f6 <is_tx_ready>
    3e18:	2800      	cmp	r0, #0
    3e1a:	d0ed      	beq.n	3df8 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    3e1c:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3e20:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3e22:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3e24:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e26:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e2a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3e2e:	2200      	movs	r2, #0
    3e30:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3e34:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3e38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3e3c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3e40:	684a      	ldr	r2, [r1, #4]
    3e42:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3e44:	bf41      	itttt	mi
    3e46:	2208      	movmi	r2, #8
    3e48:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3e4c:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3e50:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e54:	2201      	movs	r2, #1
    3e56:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3e58:	f384 8811 	msr	BASEPRI, r4
    3e5c:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    3e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e62:	bf00      	nop
    3e64:	20000d0c 	.word	0x20000d0c

00003e68 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    3e68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3e6c:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3e70:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    3e72:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3e76:	2300      	movs	r3, #0
    3e78:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    3e7c:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    3e7e:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3e80:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    3e82:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3e84:	1c58      	adds	r0, r3, #1
    3e86:	d013      	beq.n	3eb0 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e88:	a801      	add	r0, sp, #4
    3e8a:	9301      	str	r3, [sp, #4]
    3e8c:	f7ff ff48 	bl	3d20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3e90:	9a01      	ldr	r2, [sp, #4]
    3e92:	2301      	movs	r3, #1
    3e94:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3e96:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3e9a:	68eb      	ldr	r3, [r5, #12]
    3e9c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3e9e:	a801      	add	r0, sp, #4
    3ea0:	f7ff ff3e 	bl	3d20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3ea4:	9b01      	ldr	r3, [sp, #4]
    3ea6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3eaa:	2203      	movs	r2, #3
    3eac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3eb0:	692b      	ldr	r3, [r5, #16]
    3eb2:	1c59      	adds	r1, r3, #1
    3eb4:	d011      	beq.n	3eda <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    3eb6:	7f2a      	ldrb	r2, [r5, #28]
    3eb8:	9301      	str	r3, [sp, #4]
    3eba:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ebc:	a801      	add	r0, sp, #4
    3ebe:	bf14      	ite	ne
    3ec0:	f04f 0903 	movne.w	r9, #3
    3ec4:	f04f 0900 	moveq.w	r9, #0
    3ec8:	f7ff ff2a 	bl	3d20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3ecc:	9b01      	ldr	r3, [sp, #4]
    3ece:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3ed2:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3ed6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3eda:	696b      	ldr	r3, [r5, #20]
    3edc:	1c5a      	adds	r2, r3, #1
    3ede:	d013      	beq.n	3f08 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ee0:	a801      	add	r0, sp, #4
    3ee2:	9301      	str	r3, [sp, #4]
    3ee4:	f7ff ff1c 	bl	3d20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3ee8:	9a01      	ldr	r2, [sp, #4]
    3eea:	2301      	movs	r3, #1
    3eec:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    3eee:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    3ef2:	696b      	ldr	r3, [r5, #20]
    3ef4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3ef6:	a801      	add	r0, sp, #4
    3ef8:	f7ff ff12 	bl	3d20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3efc:	9b01      	ldr	r3, [sp, #4]
    3efe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3f02:	2203      	movs	r2, #3
    3f04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    3f08:	69ab      	ldr	r3, [r5, #24]
    3f0a:	1c58      	adds	r0, r3, #1
    3f0c:	d011      	beq.n	3f32 <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    3f0e:	7f6a      	ldrb	r2, [r5, #29]
    3f10:	9301      	str	r3, [sp, #4]
    3f12:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3f14:	a801      	add	r0, sp, #4
    3f16:	bf14      	ite	ne
    3f18:	f04f 0903 	movne.w	r9, #3
    3f1c:	f04f 0900 	moveq.w	r9, #0
    3f20:	f7ff fefe 	bl	3d20 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    3f24:	9b01      	ldr	r3, [sp, #4]
    3f26:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3f2a:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    3f2e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    3f32:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    3f36:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    3f38:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    3f3c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    3f40:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    3f44:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3f48:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    3f4a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    3f4e:	3104      	adds	r1, #4
    3f50:	4630      	mov	r0, r6
    3f52:	f7ff fe33 	bl	3bbc <uarte_nrfx_configure>
	if (err) {
    3f56:	4605      	mov	r5, r0
    3f58:	2800      	cmp	r0, #0
    3f5a:	d146      	bne.n	3fea <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3f5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3f60:	0799      	lsls	r1, r3, #30
    3f62:	d519      	bpl.n	3f98 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3f64:	f107 0012 	add.w	r0, r7, #18
    3f68:	f001 f92e 	bl	51c8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3f6c:	4b22      	ldr	r3, [pc, #136]	; (3ff8 <uarte_instance_init.isra.0+0x190>)
    3f6e:	4298      	cmp	r0, r3
    3f70:	d13f      	bne.n	3ff2 <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3f72:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3f74:	00c3      	lsls	r3, r0, #3
    3f76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f7a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3f7e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3f82:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3f86:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3f8a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3f8e:	4a1b      	ldr	r2, [pc, #108]	; (3ffc <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3f90:	2301      	movs	r3, #1
    3f92:	4083      	lsls	r3, r0
    3f94:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3f98:	2308      	movs	r3, #8
    3f9a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    3f9e:	f898 3008 	ldrb.w	r3, [r8, #8]
    3fa2:	b95b      	cbnz	r3, 3fbc <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3fa4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3fa8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3fac:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3fb0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3fb4:	2301      	movs	r3, #1
    3fb6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fba:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3fbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3fc0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3fc2:	bf5c      	itt	pl
    3fc4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3fc8:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3fcc:	06db      	lsls	r3, r3, #27
    3fce:	bf44      	itt	mi
    3fd0:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3fd4:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3fd8:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    3fda:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3fdc:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3fe0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3fe4:	2301      	movs	r3, #1
    3fe6:	60a3      	str	r3, [r4, #8]
    3fe8:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3fea:	4628      	mov	r0, r5
    3fec:	b003      	add	sp, #12
    3fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    3ff2:	f06f 0504 	mvn.w	r5, #4
    3ff6:	e7f8      	b.n	3fea <uarte_instance_init.isra.0+0x182>
    3ff8:	0bad0000 	.word	0x0bad0000
    3ffc:	4001f000 	.word	0x4001f000

00004000 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4000:	4919      	ldr	r1, [pc, #100]	; (4068 <sys_clock_timeout_handler+0x68>)
{
    4002:	b570      	push	{r4, r5, r6, lr}
    4004:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4006:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    400a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    400c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4010:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4014:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4016:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    401a:	f04f 0500 	mov.w	r5, #0
    401e:	d20a      	bcs.n	4036 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4020:	4b12      	ldr	r3, [pc, #72]	; (406c <sys_clock_timeout_handler+0x6c>)
    4022:	6819      	ldr	r1, [r3, #0]
    4024:	060a      	lsls	r2, r1, #24
    4026:	0a0b      	lsrs	r3, r1, #8
    4028:	1992      	adds	r2, r2, r6
    402a:	4911      	ldr	r1, [pc, #68]	; (4070 <sys_clock_timeout_handler+0x70>)
    402c:	f143 0300 	adc.w	r3, r3, #0
    4030:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4034:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4036:	f003 fd27 	bl	7a88 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    403a:	00a3      	lsls	r3, r4, #2
    403c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4040:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4044:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4048:	42b2      	cmp	r2, r6
    404a:	d10b      	bne.n	4064 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    404c:	b91d      	cbnz	r5, 4056 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    404e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4052:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4056:	4b07      	ldr	r3, [pc, #28]	; (4074 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4058:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    405c:	fa00 f404 	lsl.w	r4, r0, r4
    4060:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4064:	bd70      	pop	{r4, r5, r6, pc}
    4066:	bf00      	nop
    4068:	200004e8 	.word	0x200004e8
    406c:	20000c8c 	.word	0x20000c8c
    4070:	200004d0 	.word	0x200004d0
    4074:	40011000 	.word	0x40011000

00004078 <compare_int_lock>:
{
    4078:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    407a:	2301      	movs	r3, #1
    407c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    407e:	4a11      	ldr	r2, [pc, #68]	; (40c4 <compare_int_lock+0x4c>)
    4080:	f3bf 8f5b 	dmb	ish
    4084:	43dc      	mvns	r4, r3
    4086:	e852 1f00 	ldrex	r1, [r2]
    408a:	ea01 0c04 	and.w	ip, r1, r4
    408e:	e842 ce00 	strex	lr, ip, [r2]
    4092:	f1be 0f00 	cmp.w	lr, #0
    4096:	d1f6      	bne.n	4086 <compare_int_lock+0xe>
    4098:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    409c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    40a0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    40a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    40a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    40ac:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    40b0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    40b4:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    40b8:	420b      	tst	r3, r1
}
    40ba:	bf14      	ite	ne
    40bc:	2001      	movne	r0, #1
    40be:	2000      	moveq	r0, #0
    40c0:	bd10      	pop	{r4, pc}
    40c2:	bf00      	nop
    40c4:	20000c88 	.word	0x20000c88

000040c8 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    40c8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    40ca:	4a12      	ldr	r2, [pc, #72]	; (4114 <compare_int_unlock.part.0+0x4c>)
    40cc:	f3bf 8f5b 	dmb	ish
    40d0:	4083      	lsls	r3, r0
    40d2:	e852 1f00 	ldrex	r1, [r2]
    40d6:	4319      	orrs	r1, r3
    40d8:	e842 1c00 	strex	ip, r1, [r2]
    40dc:	f1bc 0f00 	cmp.w	ip, #0
    40e0:	d1f7      	bne.n	40d2 <compare_int_unlock.part.0+0xa>
    40e2:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    40e6:	4a0c      	ldr	r2, [pc, #48]	; (4118 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    40e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    40ec:	4083      	lsls	r3, r0
    40ee:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    40f2:	4b0a      	ldr	r3, [pc, #40]	; (411c <compare_int_unlock.part.0+0x54>)
    40f4:	f3bf 8f5b 	dmb	ish
    40f8:	681b      	ldr	r3, [r3, #0]
    40fa:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    40fe:	fa23 f000 	lsr.w	r0, r3, r0
    4102:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4104:	bf42      	ittt	mi
    4106:	4b06      	ldrmi	r3, [pc, #24]	; (4120 <compare_int_unlock.part.0+0x58>)
    4108:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    410c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4110:	4770      	bx	lr
    4112:	bf00      	nop
    4114:	20000c88 	.word	0x20000c88
    4118:	40011000 	.word	0x40011000
    411c:	20000c84 	.word	0x20000c84
    4120:	e000e100 	.word	0xe000e100

00004124 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4124:	4b0d      	ldr	r3, [pc, #52]	; (415c <z_nrf_rtc_timer_read+0x38>)
    4126:	681b      	ldr	r3, [r3, #0]
    4128:	0a19      	lsrs	r1, r3, #8
    412a:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    412c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4130:	4b0b      	ldr	r3, [pc, #44]	; (4160 <z_nrf_rtc_timer_read+0x3c>)
    4132:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4136:	18c0      	adds	r0, r0, r3
    4138:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    413c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4140:	d20a      	bcs.n	4158 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4142:	4b08      	ldr	r3, [pc, #32]	; (4164 <z_nrf_rtc_timer_read+0x40>)
    4144:	e9d3 2300 	ldrd	r2, r3, [r3]
    4148:	4299      	cmp	r1, r3
    414a:	bf08      	it	eq
    414c:	4290      	cmpeq	r0, r2
    414e:	d203      	bcs.n	4158 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4150:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4154:	f141 0100 	adc.w	r1, r1, #0
}
    4158:	4770      	bx	lr
    415a:	bf00      	nop
    415c:	20000c8c 	.word	0x20000c8c
    4160:	40011000 	.word	0x40011000
    4164:	200004d0 	.word	0x200004d0

00004168 <compare_set>:
{
    4168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    416c:	b085      	sub	sp, #20
    416e:	4616      	mov	r6, r2
    4170:	461f      	mov	r7, r3
    4172:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4174:	f7ff ff80 	bl	4078 <compare_int_lock>
    4178:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    417a:	f7ff ffd3 	bl	4124 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    417e:	42b9      	cmp	r1, r7
    4180:	bf08      	it	eq
    4182:	42b0      	cmpeq	r0, r6
    4184:	d27f      	bcs.n	4286 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    4186:	ebb6 0800 	subs.w	r8, r6, r0
    418a:	eb67 0901 	sbc.w	r9, r7, r1
    418e:	2300      	movs	r3, #0
    4190:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    4194:	454b      	cmp	r3, r9
    4196:	bf08      	it	eq
    4198:	4542      	cmpeq	r2, r8
    419a:	f0c0 8085 	bcc.w	42a8 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    419e:	4b44      	ldr	r3, [pc, #272]	; (42b0 <compare_set+0x148>)
    41a0:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    41a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    41a8:	429f      	cmp	r7, r3
    41aa:	bf08      	it	eq
    41ac:	4296      	cmpeq	r6, r2
    41ae:	d054      	beq.n	425a <compare_set+0xf2>
    41b0:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41b4:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    41b8:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    41bc:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41c0:	fa0b f205 	lsl.w	r2, fp, r5
    41c4:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    41c8:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41cc:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    41d0:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    41d2:	4a38      	ldr	r2, [pc, #224]	; (42b4 <compare_set+0x14c>)
    return p_reg->CC[ch];
    41d4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    41d8:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41dc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    41e0:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    41e4:	461c      	mov	r4, r3
    41e6:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    41e8:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    41ec:	eba0 000a 	sub.w	r0, r0, sl
    41f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    41f4:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    41f8:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    41fa:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    41fe:	d105      	bne.n	420c <compare_set+0xa4>
    4200:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    4202:	2013      	movs	r0, #19
    4204:	f004 fcca 	bl	8b9c <z_impl_k_busy_wait>
    4208:	4a2a      	ldr	r2, [pc, #168]	; (42b4 <compare_set+0x14c>)
    420a:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    420c:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    420e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    4212:	eba4 000c 	sub.w	r0, r4, ip
    4216:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    421a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    421e:	bf88      	it	hi
    4220:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4222:	2000      	movs	r0, #0
    4224:	f8c8 0000 	str.w	r0, [r8]
    4228:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    422c:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4230:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4234:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4238:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    423c:	4582      	cmp	sl, r0
    423e:	d006      	beq.n	424e <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    4240:	1a20      	subs	r0, r4, r0
    4242:	3802      	subs	r0, #2
    4244:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    424c:	d819      	bhi.n	4282 <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    424e:	1ae4      	subs	r4, r4, r3
    4250:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4254:	1932      	adds	r2, r6, r4
    4256:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    425a:	4c15      	ldr	r4, [pc, #84]	; (42b0 <compare_set+0x148>)
    425c:	0129      	lsls	r1, r5, #4
    425e:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    4262:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    4266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    4268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    426a:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    426c:	6043      	str	r3, [r0, #4]
	return ret;
    426e:	2400      	movs	r4, #0
	if (key) {
    4270:	9b01      	ldr	r3, [sp, #4]
    4272:	b113      	cbz	r3, 427a <compare_set+0x112>
    4274:	4628      	mov	r0, r5
    4276:	f7ff ff27 	bl	40c8 <compare_int_unlock.part.0>
}
    427a:	4620      	mov	r0, r4
    427c:	b005      	add	sp, #20
    427e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4282:	4620      	mov	r0, r4
    4284:	e7b0      	b.n	41e8 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    4286:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4288:	4a0b      	ldr	r2, [pc, #44]	; (42b8 <compare_set+0x150>)
    428a:	f3bf 8f5b 	dmb	ish
    428e:	40ab      	lsls	r3, r5
    4290:	e852 1f00 	ldrex	r1, [r2]
    4294:	4319      	orrs	r1, r3
    4296:	e842 1000 	strex	r0, r1, [r2]
    429a:	2800      	cmp	r0, #0
    429c:	d1f8      	bne.n	4290 <compare_set+0x128>
    429e:	f3bf 8f5b 	dmb	ish
    42a2:	4632      	mov	r2, r6
    42a4:	463b      	mov	r3, r7
    42a6:	e7d8      	b.n	425a <compare_set+0xf2>
			return -EINVAL;
    42a8:	f06f 0415 	mvn.w	r4, #21
    42ac:	e7e0      	b.n	4270 <compare_set+0x108>
    42ae:	bf00      	nop
    42b0:	200004d8 	.word	0x200004d8
    42b4:	40011000 	.word	0x40011000
    42b8:	20000c84 	.word	0x20000c84

000042bc <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    42bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    42be:	4b19      	ldr	r3, [pc, #100]	; (4324 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    42c0:	4d19      	ldr	r5, [pc, #100]	; (4328 <sys_clock_driver_init+0x6c>)
    42c2:	2400      	movs	r4, #0
    42c4:	f04f 30ff 	mov.w	r0, #4294967295
    42c8:	f04f 31ff 	mov.w	r1, #4294967295
    42cc:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    42d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    42d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    42d8:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    42dc:	4b13      	ldr	r3, [pc, #76]	; (432c <sys_clock_driver_init+0x70>)
    42de:	2602      	movs	r6, #2
    42e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    42e4:	2101      	movs	r1, #1
    42e6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    42ea:	2011      	movs	r0, #17
    42ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    42f0:	4622      	mov	r2, r4
    42f2:	f7fe f939 	bl	2568 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    42f6:	2011      	movs	r0, #17
    42f8:	f7fe f918 	bl	252c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    42fc:	4a0c      	ldr	r2, [pc, #48]	; (4330 <sys_clock_driver_init+0x74>)
    42fe:	2301      	movs	r3, #1
    4300:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4302:	4a0c      	ldr	r2, [pc, #48]	; (4334 <sys_clock_driver_init+0x78>)
    4304:	602b      	str	r3, [r5, #0]
    4306:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4308:	4b0b      	ldr	r3, [pc, #44]	; (4338 <sys_clock_driver_init+0x7c>)
    430a:	4a0c      	ldr	r2, [pc, #48]	; (433c <sys_clock_driver_init+0x80>)
    430c:	9300      	str	r3, [sp, #0]
    430e:	9401      	str	r4, [sp, #4]
    4310:	2300      	movs	r3, #0
    4312:	4620      	mov	r0, r4
    4314:	f7ff ff28 	bl	4168 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4318:	4630      	mov	r0, r6
    431a:	f7ff f907 	bl	352c <z_nrf_clock_control_lf_on>

	return 0;
}
    431e:	4620      	mov	r0, r4
    4320:	b002      	add	sp, #8
    4322:	bd70      	pop	{r4, r5, r6, pc}
    4324:	200004d8 	.word	0x200004d8
    4328:	40011000 	.word	0x40011000
    432c:	e000e100 	.word	0xe000e100
    4330:	40011008 	.word	0x40011008
    4334:	20000c88 	.word	0x20000c88
    4338:	00004001 	.word	0x00004001
    433c:	007fffff 	.word	0x007fffff

00004340 <rtc_nrf_isr>:
{
    4340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4344:	4c34      	ldr	r4, [pc, #208]	; (4418 <rtc_nrf_isr+0xd8>)
    4346:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    434a:	079a      	lsls	r2, r3, #30
    434c:	d509      	bpl.n	4362 <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    434e:	4b33      	ldr	r3, [pc, #204]	; (441c <rtc_nrf_isr+0xdc>)
    4350:	681a      	ldr	r2, [r3, #0]
    4352:	b132      	cbz	r2, 4362 <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4354:	2200      	movs	r2, #0
    4356:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    4358:	4a31      	ldr	r2, [pc, #196]	; (4420 <rtc_nrf_isr+0xe0>)
    435a:	681b      	ldr	r3, [r3, #0]
    435c:	6813      	ldr	r3, [r2, #0]
    435e:	3301      	adds	r3, #1
    4360:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    4362:	f04f 0320 	mov.w	r3, #32
    4366:	f3ef 8211 	mrs	r2, BASEPRI
    436a:	f383 8812 	msr	BASEPRI_MAX, r3
    436e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    4372:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4376:	03db      	lsls	r3, r3, #15
    4378:	d512      	bpl.n	43a0 <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    437a:	f3bf 8f5b 	dmb	ish
    437e:	4b29      	ldr	r3, [pc, #164]	; (4424 <rtc_nrf_isr+0xe4>)
    4380:	e853 1f00 	ldrex	r1, [r3]
    4384:	f021 0001 	bic.w	r0, r1, #1
    4388:	e843 0600 	strex	r6, r0, [r3]
    438c:	2e00      	cmp	r6, #0
    438e:	d1f7      	bne.n	4380 <rtc_nrf_isr+0x40>
    4390:	f3bf 8f5b 	dmb	ish
    4394:	4b24      	ldr	r3, [pc, #144]	; (4428 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4396:	2900      	cmp	r1, #0
    4398:	d136      	bne.n	4408 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    439a:	6819      	ldr	r1, [r3, #0]
		if (result) {
    439c:	2900      	cmp	r1, #0
    439e:	d133      	bne.n	4408 <rtc_nrf_isr+0xc8>
{
    43a0:	2300      	movs	r3, #0
	__asm__ volatile(
    43a2:	f382 8811 	msr	BASEPRI, r2
    43a6:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    43aa:	b353      	cbz	r3, 4402 <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    43ac:	f7ff feba 	bl	4124 <z_nrf_rtc_timer_read>
    43b0:	4606      	mov	r6, r0
	__asm__ volatile(
    43b2:	f04f 0320 	mov.w	r3, #32
    43b6:	f3ef 8011 	mrs	r0, BASEPRI
    43ba:	f383 8812 	msr	BASEPRI_MAX, r3
    43be:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    43c2:	4b1a      	ldr	r3, [pc, #104]	; (442c <rtc_nrf_isr+0xec>)
    43c4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    43c8:	4549      	cmp	r1, r9
    43ca:	bf08      	it	eq
    43cc:	4546      	cmpeq	r6, r8
    43ce:	f04f 0200 	mov.w	r2, #0
    43d2:	d31e      	bcc.n	4412 <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    43d4:	f04f 36ff 	mov.w	r6, #4294967295
    43d8:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    43dc:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    43e0:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    43e4:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    43e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    43ea:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    43ee:	f380 8811 	msr	BASEPRI, r0
    43f2:	f3bf 8f6f 	isb	sy
		if (handler) {
    43f6:	b121      	cbz	r1, 4402 <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    43f8:	9500      	str	r5, [sp, #0]
    43fa:	4642      	mov	r2, r8
    43fc:	464b      	mov	r3, r9
    43fe:	2000      	movs	r0, #0
    4400:	4788      	blx	r1
}
    4402:	b003      	add	sp, #12
    4404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4408:	2100      	movs	r1, #0
    440a:	6019      	str	r1, [r3, #0]
    440c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    440e:	2301      	movs	r3, #1
}
    4410:	e7c7      	b.n	43a2 <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4412:	4611      	mov	r1, r2
    4414:	e7eb      	b.n	43ee <rtc_nrf_isr+0xae>
    4416:	bf00      	nop
    4418:	40011000 	.word	0x40011000
    441c:	40011104 	.word	0x40011104
    4420:	20000c8c 	.word	0x20000c8c
    4424:	20000c84 	.word	0x20000c84
    4428:	40011140 	.word	0x40011140
    442c:	200004d8 	.word	0x200004d8

00004430 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4430:	4b14      	ldr	r3, [pc, #80]	; (4484 <sys_clock_set_timeout+0x54>)
{
    4432:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4434:	f1b0 3fff 	cmp.w	r0, #4294967295
    4438:	bf08      	it	eq
    443a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    443c:	1e44      	subs	r4, r0, #1
    443e:	2c00      	cmp	r4, #0
    4440:	dd1e      	ble.n	4480 <sys_clock_set_timeout+0x50>
    4442:	429c      	cmp	r4, r3
    4444:	bfa8      	it	ge
    4446:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4448:	f7ff fe6c 	bl	4124 <z_nrf_rtc_timer_read>
    444c:	4b0e      	ldr	r3, [pc, #56]	; (4488 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    444e:	490f      	ldr	r1, [pc, #60]	; (448c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4450:	e9d3 2300 	ldrd	r2, r3, [r3]
    4454:	1a80      	subs	r0, r0, r2
		ticks = 0;
    4456:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    445a:	bf28      	it	cs
    445c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    445e:	3001      	adds	r0, #1
    4460:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    4462:	4808      	ldr	r0, [pc, #32]	; (4484 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4464:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    4466:	4284      	cmp	r4, r0
    4468:	bf28      	it	cs
    446a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    446c:	1912      	adds	r2, r2, r4
    446e:	f04f 0000 	mov.w	r0, #0
    4472:	9001      	str	r0, [sp, #4]
    4474:	f143 0300 	adc.w	r3, r3, #0
    4478:	f7ff fe76 	bl	4168 <compare_set>
}
    447c:	b002      	add	sp, #8
    447e:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4480:	2400      	movs	r4, #0
    4482:	e7e1      	b.n	4448 <sys_clock_set_timeout+0x18>
    4484:	007fffff 	.word	0x007fffff
    4488:	200004e8 	.word	0x200004e8
    448c:	00004001 	.word	0x00004001

00004490 <sys_clock_elapsed>:
{
    4490:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4492:	f7ff fe47 	bl	4124 <z_nrf_rtc_timer_read>
    4496:	4b02      	ldr	r3, [pc, #8]	; (44a0 <sys_clock_elapsed+0x10>)
    4498:	681b      	ldr	r3, [r3, #0]
}
    449a:	1ac0      	subs	r0, r0, r3
    449c:	bd08      	pop	{r3, pc}
    449e:	bf00      	nop
    44a0:	200004e8 	.word	0x200004e8

000044a4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    44a4:	4b03      	ldr	r3, [pc, #12]	; (44b4 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    44a6:	6818      	ldr	r0, [r3, #0]
}
    44a8:	f1a0 0308 	sub.w	r3, r0, #8
    44ac:	4258      	negs	r0, r3
    44ae:	4158      	adcs	r0, r3
    44b0:	4770      	bx	lr
    44b2:	bf00      	nop
    44b4:	10000130 	.word	0x10000130

000044b8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    44b8:	4b06      	ldr	r3, [pc, #24]	; (44d4 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    44ba:	681b      	ldr	r3, [r3, #0]
    44bc:	2b08      	cmp	r3, #8
    44be:	d106      	bne.n	44ce <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    44c0:	4b05      	ldr	r3, [pc, #20]	; (44d8 <nrf52_errata_103+0x20>)
    44c2:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    44c4:	2b05      	cmp	r3, #5
    44c6:	d802      	bhi.n	44ce <nrf52_errata_103+0x16>
    44c8:	4a04      	ldr	r2, [pc, #16]	; (44dc <nrf52_errata_103+0x24>)
    44ca:	5cd0      	ldrb	r0, [r2, r3]
    44cc:	4770      	bx	lr
        return false;
    44ce:	2000      	movs	r0, #0
}
    44d0:	4770      	bx	lr
    44d2:	bf00      	nop
    44d4:	10000130 	.word	0x10000130
    44d8:	10000134 	.word	0x10000134
    44dc:	00009bf1 	.word	0x00009bf1

000044e0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    44e0:	4a02      	ldr	r2, [pc, #8]	; (44ec <nvmc_wait+0xc>)
    44e2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    44e6:	2b00      	cmp	r3, #0
    44e8:	d0fb      	beq.n	44e2 <nvmc_wait+0x2>
}
    44ea:	4770      	bx	lr
    44ec:	4001e000 	.word	0x4001e000

000044f0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    44f0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    44f2:	f7ff ffd7 	bl	44a4 <nrf52_errata_136>
    44f6:	b140      	cbz	r0, 450a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    44f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44fc:	2200      	movs	r2, #0
    44fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4502:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4506:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    450a:	f7ff ffcb 	bl	44a4 <nrf52_errata_136>
    450e:	2800      	cmp	r0, #0
    4510:	d046      	beq.n	45a0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4516:	4b5b      	ldr	r3, [pc, #364]	; (4684 <SystemInit+0x194>)
    4518:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    451c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4520:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4524:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4528:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    452c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    4530:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4534:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4538:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    453c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4540:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4544:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4548:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    454c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4550:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4554:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4558:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    455c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4560:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4564:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4568:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    456c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4570:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4574:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4578:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    457c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4580:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    4584:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4588:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    458c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4590:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    4594:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4598:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    459c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    45a0:	f7ff ff8a 	bl	44b8 <nrf52_errata_103>
    45a4:	b110      	cbz	r0, 45ac <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    45a6:	4b38      	ldr	r3, [pc, #224]	; (4688 <SystemInit+0x198>)
    45a8:	4a38      	ldr	r2, [pc, #224]	; (468c <SystemInit+0x19c>)
    45aa:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    45ac:	f7ff ff84 	bl	44b8 <nrf52_errata_103>
    45b0:	b118      	cbz	r0, 45ba <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    45b2:	4b37      	ldr	r3, [pc, #220]	; (4690 <SystemInit+0x1a0>)
    45b4:	22fb      	movs	r2, #251	; 0xfb
    45b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    45ba:	f7ff ff7d 	bl	44b8 <nrf52_errata_103>
    45be:	b148      	cbz	r0, 45d4 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    45c0:	4934      	ldr	r1, [pc, #208]	; (4694 <SystemInit+0x1a4>)
    45c2:	4b35      	ldr	r3, [pc, #212]	; (4698 <SystemInit+0x1a8>)
    45c4:	680a      	ldr	r2, [r1, #0]
    45c6:	681b      	ldr	r3, [r3, #0]
    45c8:	f022 020f 	bic.w	r2, r2, #15
    45cc:	f003 030f 	and.w	r3, r3, #15
    45d0:	4313      	orrs	r3, r2
    45d2:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    45d4:	f7ff ff70 	bl	44b8 <nrf52_errata_103>
    45d8:	b118      	cbz	r0, 45e2 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    45da:	4b30      	ldr	r3, [pc, #192]	; (469c <SystemInit+0x1ac>)
    45dc:	f44f 7200 	mov.w	r2, #512	; 0x200
    45e0:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    45e2:	f7ff ff5f 	bl	44a4 <nrf52_errata_136>
    45e6:	b148      	cbz	r0, 45fc <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    45e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45ec:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    45f0:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    45f2:	bf44      	itt	mi
    45f4:	f06f 0201 	mvnmi.w	r2, #1
    45f8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    45fc:	4b28      	ldr	r3, [pc, #160]	; (46a0 <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    45fe:	681b      	ldr	r3, [r3, #0]
    4600:	2b08      	cmp	r3, #8
    4602:	d10e      	bne.n	4622 <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    4604:	4b27      	ldr	r3, [pc, #156]	; (46a4 <SystemInit+0x1b4>)
    4606:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    4608:	2b05      	cmp	r3, #5
    460a:	d802      	bhi.n	4612 <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    460c:	4a26      	ldr	r2, [pc, #152]	; (46a8 <SystemInit+0x1b8>)
    460e:	5cd3      	ldrb	r3, [r2, r3]
    4610:	b13b      	cbz	r3, 4622 <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4612:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4616:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    461a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    461e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4622:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4626:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    462a:	2a00      	cmp	r2, #0
    462c:	db03      	blt.n	4636 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    462e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4632:	2b00      	cmp	r3, #0
    4634:	da22      	bge.n	467c <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4636:	491d      	ldr	r1, [pc, #116]	; (46ac <SystemInit+0x1bc>)
    4638:	2301      	movs	r3, #1
    463a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    463e:	f7ff ff4f 	bl	44e0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4642:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    4646:	2412      	movs	r4, #18
    4648:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    464c:	f7ff ff48 	bl	44e0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4650:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4654:	f7ff ff44 	bl	44e0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4658:	2300      	movs	r3, #0
    465a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    465e:	f7ff ff3f 	bl	44e0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4662:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4666:	4912      	ldr	r1, [pc, #72]	; (46b0 <SystemInit+0x1c0>)
    4668:	4b12      	ldr	r3, [pc, #72]	; (46b4 <SystemInit+0x1c4>)
    466a:	68ca      	ldr	r2, [r1, #12]
    466c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4670:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4672:	60cb      	str	r3, [r1, #12]
    4674:	f3bf 8f4f 	dsb	sy
    __NOP();
    4678:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    467a:	e7fd      	b.n	4678 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    467c:	4b0e      	ldr	r3, [pc, #56]	; (46b8 <SystemInit+0x1c8>)
    467e:	4a0f      	ldr	r2, [pc, #60]	; (46bc <SystemInit+0x1cc>)
    4680:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4682:	bd10      	pop	{r4, pc}
    4684:	4000c000 	.word	0x4000c000
    4688:	4000568c 	.word	0x4000568c
    468c:	00038148 	.word	0x00038148
    4690:	4000f000 	.word	0x4000f000
    4694:	40000ee4 	.word	0x40000ee4
    4698:	10000258 	.word	0x10000258
    469c:	40029640 	.word	0x40029640
    46a0:	10000130 	.word	0x10000130
    46a4:	10000134 	.word	0x10000134
    46a8:	00009beb 	.word	0x00009beb
    46ac:	4001e000 	.word	0x4001e000
    46b0:	e000ed00 	.word	0xe000ed00
    46b4:	05fa0004 	.word	0x05fa0004
    46b8:	200000f8 	.word	0x200000f8
    46bc:	03d09000 	.word	0x03d09000

000046c0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    46c0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    46c2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    46c4:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    46c6:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    46ca:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    46cc:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    46d0:	d014      	beq.n	46fc <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    46d2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    46d6:	fa05 f204 	lsl.w	r2, r5, r4
    46da:	ea23 0202 	bic.w	r2, r3, r2
    46de:	e850 6f00 	ldrex	r6, [r0]
    46e2:	429e      	cmp	r6, r3
    46e4:	d104      	bne.n	46f0 <nrfx_flag32_alloc+0x30>
    46e6:	e840 2c00 	strex	ip, r2, [r0]
    46ea:	f1bc 0f00 	cmp.w	ip, #0
    46ee:	d1f6      	bne.n	46de <nrfx_flag32_alloc+0x1e>
    46f0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    46f4:	d1e6      	bne.n	46c4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    46f6:	4802      	ldr	r0, [pc, #8]	; (4700 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    46f8:	700c      	strb	r4, [r1, #0]
}
    46fa:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    46fc:	4801      	ldr	r0, [pc, #4]	; (4704 <nrfx_flag32_alloc+0x44>)
    46fe:	e7fc      	b.n	46fa <nrfx_flag32_alloc+0x3a>
    4700:	0bad0000 	.word	0x0bad0000
    4704:	0bad0002 	.word	0x0bad0002

00004708 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4708:	6803      	ldr	r3, [r0, #0]
    470a:	40cb      	lsrs	r3, r1
    470c:	07db      	lsls	r3, r3, #31
{
    470e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4710:	d415      	bmi.n	473e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4712:	2301      	movs	r3, #1
    4714:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4718:	6803      	ldr	r3, [r0, #0]
    471a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    471e:	ea41 0203 	orr.w	r2, r1, r3
    4722:	e850 4f00 	ldrex	r4, [r0]
    4726:	429c      	cmp	r4, r3
    4728:	d104      	bne.n	4734 <nrfx_flag32_free+0x2c>
    472a:	e840 2c00 	strex	ip, r2, [r0]
    472e:	f1bc 0f00 	cmp.w	ip, #0
    4732:	d1f6      	bne.n	4722 <nrfx_flag32_free+0x1a>
    4734:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4738:	d1ee      	bne.n	4718 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    473a:	4802      	ldr	r0, [pc, #8]	; (4744 <nrfx_flag32_free+0x3c>)
}
    473c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    473e:	4802      	ldr	r0, [pc, #8]	; (4748 <nrfx_flag32_free+0x40>)
    4740:	e7fc      	b.n	473c <nrfx_flag32_free+0x34>
    4742:	bf00      	nop
    4744:	0bad0000 	.word	0x0bad0000
    4748:	0bad0004 	.word	0x0bad0004

0000474c <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    474c:	b508      	push	{r3, lr}
    switch (domain)
    474e:	b178      	cbz	r0, 4770 <nrf_clock_is_running.constprop.0+0x24>
    4750:	2801      	cmp	r0, #1
    4752:	d01c      	beq.n	478e <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    4754:	4a14      	ldr	r2, [pc, #80]	; (47a8 <nrf_clock_is_running.constprop.0+0x5c>)
    4756:	4915      	ldr	r1, [pc, #84]	; (47ac <nrf_clock_is_running.constprop.0+0x60>)
    4758:	4815      	ldr	r0, [pc, #84]	; (47b0 <nrf_clock_is_running.constprop.0+0x64>)
    475a:	f44f 734f 	mov.w	r3, #828	; 0x33c
    475e:	f003 fdd7 	bl	8310 <printk>
    4762:	4811      	ldr	r0, [pc, #68]	; (47a8 <nrf_clock_is_running.constprop.0+0x5c>)
    4764:	f44f 714f 	mov.w	r1, #828	; 0x33c
    4768:	f003 fe9e 	bl	84a8 <assert_post_action>
            return false;
    476c:	2000      	movs	r0, #0
    476e:	e00d      	b.n	478c <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    4770:	b131      	cbz	r1, 4780 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4776:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    477a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    477e:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4784:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4788:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    478c:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    478e:	b131      	cbz	r1, 479e <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4794:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    4798:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    479c:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    479e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47a2:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    47a6:	e7ef      	b.n	4788 <nrf_clock_is_running.constprop.0+0x3c>
    47a8:	00009bf7 	.word	0x00009bf7
    47ac:	00009d9f 	.word	0x00009d9f
    47b0:	00009128 	.word	0x00009128

000047b4 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    47b4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    47b6:	4604      	mov	r4, r0
    47b8:	b948      	cbnz	r0, 47ce <nrfx_clock_init+0x1a>
    47ba:	490a      	ldr	r1, [pc, #40]	; (47e4 <nrfx_clock_init+0x30>)
    47bc:	480a      	ldr	r0, [pc, #40]	; (47e8 <nrfx_clock_init+0x34>)
    47be:	4a0b      	ldr	r2, [pc, #44]	; (47ec <nrfx_clock_init+0x38>)
    47c0:	23bd      	movs	r3, #189	; 0xbd
    47c2:	f003 fda5 	bl	8310 <printk>
    47c6:	4809      	ldr	r0, [pc, #36]	; (47ec <nrfx_clock_init+0x38>)
    47c8:	21bd      	movs	r1, #189	; 0xbd
    47ca:	f003 fe6d 	bl	84a8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    47ce:	4b08      	ldr	r3, [pc, #32]	; (47f0 <nrfx_clock_init+0x3c>)
    47d0:	791a      	ldrb	r2, [r3, #4]
    47d2:	b922      	cbnz	r2, 47de <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    47d4:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    47d6:	4807      	ldr	r0, [pc, #28]	; (47f4 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    47d8:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    47da:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    47dc:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    47de:	4806      	ldr	r0, [pc, #24]	; (47f8 <nrfx_clock_init+0x44>)
    return err_code;
    47e0:	e7fc      	b.n	47dc <nrfx_clock_init+0x28>
    47e2:	bf00      	nop
    47e4:	00009c68 	.word	0x00009c68
    47e8:	00009128 	.word	0x00009128
    47ec:	00009c2b 	.word	0x00009c2b
    47f0:	20000c90 	.word	0x20000c90
    47f4:	0bad0000 	.word	0x0bad0000
    47f8:	0bad000c 	.word	0x0bad000c

000047fc <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    47fc:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    47fe:	4b0b      	ldr	r3, [pc, #44]	; (482c <nrfx_clock_enable+0x30>)
    4800:	791b      	ldrb	r3, [r3, #4]
    4802:	b94b      	cbnz	r3, 4818 <nrfx_clock_enable+0x1c>
    4804:	490a      	ldr	r1, [pc, #40]	; (4830 <nrfx_clock_enable+0x34>)
    4806:	480b      	ldr	r0, [pc, #44]	; (4834 <nrfx_clock_enable+0x38>)
    4808:	4a0b      	ldr	r2, [pc, #44]	; (4838 <nrfx_clock_enable+0x3c>)
    480a:	23d6      	movs	r3, #214	; 0xd6
    480c:	f003 fd80 	bl	8310 <printk>
    4810:	4809      	ldr	r0, [pc, #36]	; (4838 <nrfx_clock_enable+0x3c>)
    4812:	21d6      	movs	r1, #214	; 0xd6
    4814:	f003 fe48 	bl	84a8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4818:	2000      	movs	r0, #0
    481a:	f7fd fe97 	bl	254c <arch_irq_is_enabled>
    481e:	b918      	cbnz	r0, 4828 <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    4820:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4824:	f7fd be82 	b.w	252c <arch_irq_enable>
    4828:	bd08      	pop	{r3, pc}
    482a:	bf00      	nop
    482c:	20000c90 	.word	0x20000c90
    4830:	00009c76 	.word	0x00009c76
    4834:	00009128 	.word	0x00009128
    4838:	00009c2b 	.word	0x00009c2b

0000483c <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    483c:	4b22      	ldr	r3, [pc, #136]	; (48c8 <nrfx_clock_start+0x8c>)
    483e:	791b      	ldrb	r3, [r3, #4]
{
    4840:	b513      	push	{r0, r1, r4, lr}
    4842:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4844:	b95b      	cbnz	r3, 485e <nrfx_clock_start+0x22>
    4846:	4921      	ldr	r1, [pc, #132]	; (48cc <nrfx_clock_start+0x90>)
    4848:	4821      	ldr	r0, [pc, #132]	; (48d0 <nrfx_clock_start+0x94>)
    484a:	4a22      	ldr	r2, [pc, #136]	; (48d4 <nrfx_clock_start+0x98>)
    484c:	f44f 7389 	mov.w	r3, #274	; 0x112
    4850:	f003 fd5e 	bl	8310 <printk>
    4854:	481f      	ldr	r0, [pc, #124]	; (48d4 <nrfx_clock_start+0x98>)
    4856:	f44f 7189 	mov.w	r1, #274	; 0x112
    485a:	f003 fe25 	bl	84a8 <assert_post_action>
    switch (domain)
    485e:	b174      	cbz	r4, 487e <nrfx_clock_start+0x42>
    4860:	2c01      	cmp	r4, #1
    4862:	d027      	beq.n	48b4 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4864:	4a1b      	ldr	r2, [pc, #108]	; (48d4 <nrfx_clock_start+0x98>)
    4866:	491c      	ldr	r1, [pc, #112]	; (48d8 <nrfx_clock_start+0x9c>)
    4868:	4819      	ldr	r0, [pc, #100]	; (48d0 <nrfx_clock_start+0x94>)
    486a:	f44f 73a2 	mov.w	r3, #324	; 0x144
    486e:	f003 fd4f 	bl	8310 <printk>
    4872:	4818      	ldr	r0, [pc, #96]	; (48d4 <nrfx_clock_start+0x98>)
    4874:	f44f 71a2 	mov.w	r1, #324	; 0x144
    4878:	f003 fe16 	bl	84a8 <assert_post_action>
            break;
    }
}
    487c:	e016      	b.n	48ac <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    487e:	a901      	add	r1, sp, #4
    4880:	4620      	mov	r0, r4
    4882:	f7ff ff63 	bl	474c <nrf_clock_is_running.constprop.0>
    4886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    488a:	b188      	cbz	r0, 48b0 <nrfx_clock_start+0x74>
    488c:	9a01      	ldr	r2, [sp, #4]
    488e:	2a01      	cmp	r2, #1
    4890:	d10e      	bne.n	48b0 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4892:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4896:	4b11      	ldr	r3, [pc, #68]	; (48dc <nrfx_clock_start+0xa0>)
    4898:	2200      	movs	r2, #0
    489a:	601a      	str	r2, [r3, #0]
    489c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    489e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48a2:	2202      	movs	r2, #2
    48a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48a8:	2201      	movs	r2, #1
    48aa:	609a      	str	r2, [r3, #8]
}
    48ac:	b002      	add	sp, #8
    48ae:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    48b0:	2200      	movs	r2, #0
    48b2:	e7ee      	b.n	4892 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48b4:	4b0a      	ldr	r3, [pc, #40]	; (48e0 <nrfx_clock_start+0xa4>)
    48b6:	2200      	movs	r2, #0
    48b8:	601a      	str	r2, [r3, #0]
    48ba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    48bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48c0:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48c4:	601c      	str	r4, [r3, #0]
}
    48c6:	e7f1      	b.n	48ac <nrfx_clock_start+0x70>
    48c8:	20000c90 	.word	0x20000c90
    48cc:	00009c76 	.word	0x00009c76
    48d0:	00009128 	.word	0x00009128
    48d4:	00009c2b 	.word	0x00009c2b
    48d8:	00009d9f 	.word	0x00009d9f
    48dc:	40000104 	.word	0x40000104
    48e0:	40000100 	.word	0x40000100

000048e4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    48e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48e6:	4d2f      	ldr	r5, [pc, #188]	; (49a4 <nrfx_clock_stop+0xc0>)
    48e8:	792a      	ldrb	r2, [r5, #4]
{
    48ea:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48ec:	b95a      	cbnz	r2, 4906 <nrfx_clock_stop+0x22>
    48ee:	492e      	ldr	r1, [pc, #184]	; (49a8 <nrfx_clock_stop+0xc4>)
    48f0:	482e      	ldr	r0, [pc, #184]	; (49ac <nrfx_clock_stop+0xc8>)
    48f2:	4a2f      	ldr	r2, [pc, #188]	; (49b0 <nrfx_clock_stop+0xcc>)
    48f4:	f240 134b 	movw	r3, #331	; 0x14b
    48f8:	f003 fd0a 	bl	8310 <printk>
    48fc:	482c      	ldr	r0, [pc, #176]	; (49b0 <nrfx_clock_stop+0xcc>)
    48fe:	f240 114b 	movw	r1, #331	; 0x14b
    4902:	f003 fdd1 	bl	84a8 <assert_post_action>
    switch (domain)
    4906:	b17c      	cbz	r4, 4928 <nrfx_clock_stop+0x44>
    4908:	2c01      	cmp	r4, #1
    490a:	d028      	beq.n	495e <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    490c:	4929      	ldr	r1, [pc, #164]	; (49b4 <nrfx_clock_stop+0xd0>)
    490e:	4827      	ldr	r0, [pc, #156]	; (49ac <nrfx_clock_stop+0xc8>)
    4910:	4a27      	ldr	r2, [pc, #156]	; (49b0 <nrfx_clock_stop+0xcc>)
    4912:	f240 1367 	movw	r3, #359	; 0x167
    4916:	f003 fcfb 	bl	8310 <printk>
    491a:	4825      	ldr	r0, [pc, #148]	; (49b0 <nrfx_clock_stop+0xcc>)
    491c:	f240 1167 	movw	r1, #359	; 0x167
    4920:	f003 fdc2 	bl	84a8 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4924:	b003      	add	sp, #12
    4926:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    4928:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    492c:	2202      	movs	r2, #2
    492e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4932:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    4936:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    493a:	2201      	movs	r2, #1
    493c:	681b      	ldr	r3, [r3, #0]
    493e:	4b1e      	ldr	r3, [pc, #120]	; (49b8 <nrfx_clock_stop+0xd4>)
    4940:	f242 7410 	movw	r4, #10000	; 0x2710
    4944:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    4946:	2100      	movs	r1, #0
    4948:	4608      	mov	r0, r1
    494a:	f7ff feff 	bl	474c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    494e:	2800      	cmp	r0, #0
    4950:	d0e8      	beq.n	4924 <nrfx_clock_stop+0x40>
    4952:	2001      	movs	r0, #1
    4954:	f004 f821 	bl	899a <nrfx_busy_wait>
    4958:	3c01      	subs	r4, #1
    495a:	d1f4      	bne.n	4946 <nrfx_clock_stop+0x62>
    495c:	e7e2      	b.n	4924 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    495e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4962:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4964:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4968:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    496c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    4970:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4972:	4b12      	ldr	r3, [pc, #72]	; (49bc <nrfx_clock_stop+0xd8>)
    4974:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4976:	f88d 4007 	strb.w	r4, [sp, #7]
    497a:	f242 7410 	movw	r4, #10000	; 0x2710
    497e:	f10d 0107 	add.w	r1, sp, #7
    4982:	2001      	movs	r0, #1
    4984:	f7ff fee2 	bl	474c <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4988:	b910      	cbnz	r0, 4990 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    498a:	2300      	movs	r3, #0
    498c:	716b      	strb	r3, [r5, #5]
    498e:	e7c9      	b.n	4924 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4990:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4994:	2801      	cmp	r0, #1
    4996:	d1f8      	bne.n	498a <nrfx_clock_stop+0xa6>
    4998:	f003 ffff 	bl	899a <nrfx_busy_wait>
    499c:	3c01      	subs	r4, #1
    499e:	d1ee      	bne.n	497e <nrfx_clock_stop+0x9a>
    49a0:	e7f3      	b.n	498a <nrfx_clock_stop+0xa6>
    49a2:	bf00      	nop
    49a4:	20000c90 	.word	0x20000c90
    49a8:	00009c76 	.word	0x00009c76
    49ac:	00009128 	.word	0x00009128
    49b0:	00009c2b 	.word	0x00009c2b
    49b4:	00009d9f 	.word	0x00009d9f
    49b8:	4000000c 	.word	0x4000000c
    49bc:	40000004 	.word	0x40000004

000049c0 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49c0:	4b16      	ldr	r3, [pc, #88]	; (4a1c <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    49c2:	b507      	push	{r0, r1, r2, lr}
    49c4:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    49c6:	b16a      	cbz	r2, 49e4 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49c8:	2200      	movs	r2, #0
    49ca:	601a      	str	r2, [r3, #0]
    49cc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    49ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49d2:	2201      	movs	r2, #1
    49d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    49d8:	4b11      	ldr	r3, [pc, #68]	; (4a20 <nrfx_power_clock_irq_handler+0x60>)
    49da:	7958      	ldrb	r0, [r3, #5]
    49dc:	b910      	cbnz	r0, 49e4 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    49de:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    49e0:	681b      	ldr	r3, [r3, #0]
    49e2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    49e4:	4b0f      	ldr	r3, [pc, #60]	; (4a24 <nrfx_power_clock_irq_handler+0x64>)
    49e6:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    49e8:	b16a      	cbz	r2, 4a06 <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49ea:	2000      	movs	r0, #0
    49ec:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    49ee:	a901      	add	r1, sp, #4
    49f0:	681b      	ldr	r3, [r3, #0]
    49f2:	f7ff feab 	bl	474c <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    49f6:	9a01      	ldr	r2, [sp, #4]
    49f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49fc:	b932      	cbnz	r2, 4a0c <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    49fe:	2201      	movs	r2, #1
    4a00:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a04:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4a06:	b003      	add	sp, #12
    4a08:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    4a0c:	2202      	movs	r2, #2
    4a0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a12:	4b03      	ldr	r3, [pc, #12]	; (4a20 <nrfx_power_clock_irq_handler+0x60>)
    4a14:	2001      	movs	r0, #1
    4a16:	681b      	ldr	r3, [r3, #0]
    4a18:	4798      	blx	r3
}
    4a1a:	e7f4      	b.n	4a06 <nrfx_power_clock_irq_handler+0x46>
    4a1c:	40000100 	.word	0x40000100
    4a20:	20000c90 	.word	0x20000c90
    4a24:	40000104 	.word	0x40000104

00004a28 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4a28:	4b05      	ldr	r3, [pc, #20]	; (4a40 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a2a:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4a2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4a30:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    4a34:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    4a38:	4258      	negs	r0, r3
    4a3a:	4158      	adcs	r0, r3
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop
    4a40:	200000fc 	.word	0x200000fc

00004a44 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4a44:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a46:	f100 0308 	add.w	r3, r0, #8
    4a4a:	4c0c      	ldr	r4, [pc, #48]	; (4a7c <call_handler+0x38>)
    4a4c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4a50:	05da      	lsls	r2, r3, #23
{
    4a52:	4605      	mov	r5, r0
    4a54:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a56:	d507      	bpl.n	4a68 <call_handler+0x24>
    4a58:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4a5c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4a60:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4a64:	6852      	ldr	r2, [r2, #4]
    4a66:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4a68:	68a3      	ldr	r3, [r4, #8]
    4a6a:	b12b      	cbz	r3, 4a78 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a6c:	68e2      	ldr	r2, [r4, #12]
    4a6e:	4631      	mov	r1, r6
    4a70:	4628      	mov	r0, r5
    }
}
    4a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4a76:	4718      	bx	r3
}
    4a78:	bd70      	pop	{r4, r5, r6, pc}
    4a7a:	bf00      	nop
    4a7c:	200000fc 	.word	0x200000fc

00004a80 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a80:	4b19      	ldr	r3, [pc, #100]	; (4ae8 <release_handler+0x68>)
    4a82:	3008      	adds	r0, #8
{
    4a84:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4a86:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4a8a:	05d1      	lsls	r1, r2, #23
    4a8c:	d51d      	bpl.n	4aca <release_handler+0x4a>
    4a8e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4a92:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    4a96:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4a9a:	f103 0410 	add.w	r4, r3, #16
    4a9e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4aa0:	f834 2b02 	ldrh.w	r2, [r4], #2
    4aa4:	f412 7f80 	tst.w	r2, #256	; 0x100
    4aa8:	d003      	beq.n	4ab2 <release_handler+0x32>
    4aaa:	f3c2 2243 	ubfx	r2, r2, #9, #4
    4aae:	4291      	cmp	r1, r2
    4ab0:	d00b      	beq.n	4aca <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4ab2:	3001      	adds	r0, #1
    4ab4:	2830      	cmp	r0, #48	; 0x30
    4ab6:	d1f3      	bne.n	4aa0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4ab8:	2200      	movs	r2, #0
    4aba:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4abe:	480b      	ldr	r0, [pc, #44]	; (4aec <release_handler+0x6c>)
    4ac0:	f7ff fe22 	bl	4708 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4ac4:	4b0a      	ldr	r3, [pc, #40]	; (4af0 <release_handler+0x70>)
    4ac6:	4298      	cmp	r0, r3
    4ac8:	d100      	bne.n	4acc <release_handler+0x4c>
}
    4aca:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4acc:	4909      	ldr	r1, [pc, #36]	; (4af4 <release_handler+0x74>)
    4ace:	480a      	ldr	r0, [pc, #40]	; (4af8 <release_handler+0x78>)
    4ad0:	4a0a      	ldr	r2, [pc, #40]	; (4afc <release_handler+0x7c>)
    4ad2:	f44f 7399 	mov.w	r3, #306	; 0x132
    4ad6:	f003 fc1b 	bl	8310 <printk>
}
    4ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4ade:	4807      	ldr	r0, [pc, #28]	; (4afc <release_handler+0x7c>)
    4ae0:	f44f 7199 	mov.w	r1, #306	; 0x132
    4ae4:	f003 bce0 	b.w	84a8 <assert_post_action>
    4ae8:	200000fc 	.word	0x200000fc
    4aec:	20000170 	.word	0x20000170
    4af0:	0bad0000 	.word	0x0bad0000
    4af4:	00009cf8 	.word	0x00009cf8
    4af8:	00009128 	.word	0x00009128
    4afc:	00009c94 	.word	0x00009c94

00004b00 <pin_handler_trigger_uninit>:
{
    4b00:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4b02:	4c0a      	ldr	r4, [pc, #40]	; (4b2c <pin_handler_trigger_uninit+0x2c>)
    4b04:	f100 0508 	add.w	r5, r0, #8
    4b08:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    4b0c:	069a      	lsls	r2, r3, #26
    4b0e:	d506      	bpl.n	4b1e <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4b10:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4b12:	4a07      	ldr	r2, [pc, #28]	; (4b30 <pin_handler_trigger_uninit+0x30>)
    4b14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4b18:	2100      	movs	r1, #0
    4b1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    4b1e:	f7ff ffaf 	bl	4a80 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4b22:	2300      	movs	r3, #0
    4b24:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4b28:	bd38      	pop	{r3, r4, r5, pc}
    4b2a:	bf00      	nop
    4b2c:	200000fc 	.word	0x200000fc
    4b30:	40006000 	.word	0x40006000

00004b34 <nrf_gpio_pin_port_decode>:
{
    4b34:	b510      	push	{r4, lr}
    4b36:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4b38:	6800      	ldr	r0, [r0, #0]
    4b3a:	f003 ff30 	bl	899e <nrf_gpio_pin_present_check>
    4b3e:	b958      	cbnz	r0, 4b58 <nrf_gpio_pin_port_decode+0x24>
    4b40:	4912      	ldr	r1, [pc, #72]	; (4b8c <nrf_gpio_pin_port_decode+0x58>)
    4b42:	4813      	ldr	r0, [pc, #76]	; (4b90 <nrf_gpio_pin_port_decode+0x5c>)
    4b44:	4a13      	ldr	r2, [pc, #76]	; (4b94 <nrf_gpio_pin_port_decode+0x60>)
    4b46:	f240 2329 	movw	r3, #553	; 0x229
    4b4a:	f003 fbe1 	bl	8310 <printk>
    4b4e:	4811      	ldr	r0, [pc, #68]	; (4b94 <nrf_gpio_pin_port_decode+0x60>)
    4b50:	f240 2129 	movw	r1, #553	; 0x229
    4b54:	f003 fca8 	bl	84a8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4b58:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4b5a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b5e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4b60:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b62:	d00d      	beq.n	4b80 <nrf_gpio_pin_port_decode+0x4c>
    4b64:	2b01      	cmp	r3, #1
    4b66:	d00e      	beq.n	4b86 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    4b68:	490b      	ldr	r1, [pc, #44]	; (4b98 <nrf_gpio_pin_port_decode+0x64>)
    4b6a:	4809      	ldr	r0, [pc, #36]	; (4b90 <nrf_gpio_pin_port_decode+0x5c>)
    4b6c:	4a09      	ldr	r2, [pc, #36]	; (4b94 <nrf_gpio_pin_port_decode+0x60>)
    4b6e:	f240 232e 	movw	r3, #558	; 0x22e
    4b72:	f003 fbcd 	bl	8310 <printk>
    4b76:	4807      	ldr	r0, [pc, #28]	; (4b94 <nrf_gpio_pin_port_decode+0x60>)
    4b78:	f240 212e 	movw	r1, #558	; 0x22e
    4b7c:	f003 fc94 	bl	84a8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4b80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4b84:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    4b86:	4805      	ldr	r0, [pc, #20]	; (4b9c <nrf_gpio_pin_port_decode+0x68>)
    4b88:	e7fc      	b.n	4b84 <nrf_gpio_pin_port_decode+0x50>
    4b8a:	bf00      	nop
    4b8c:	00009bb3 	.word	0x00009bb3
    4b90:	00009128 	.word	0x00009128
    4b94:	00009b80 	.word	0x00009b80
    4b98:	00009d9f 	.word	0x00009d9f
    4b9c:	50000300 	.word	0x50000300

00004ba0 <nrfx_gpiote_input_configure>:
{
    4ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ba2:	4604      	mov	r4, r0
    4ba4:	b085      	sub	sp, #20
    4ba6:	4617      	mov	r7, r2
    4ba8:	461d      	mov	r5, r3
    if (p_input_config)
    4baa:	b1f1      	cbz	r1, 4bea <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4bac:	f7ff ff3c 	bl	4a28 <pin_is_task_output>
    4bb0:	b110      	cbz	r0, 4bb8 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    4bb2:	484a      	ldr	r0, [pc, #296]	; (4cdc <nrfx_gpiote_input_configure+0x13c>)
}
    4bb4:	b005      	add	sp, #20
    4bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4bb8:	460b      	mov	r3, r1
    4bba:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4bbe:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4bc2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4bc6:	f10d 020f 	add.w	r2, sp, #15
    4bca:	f10d 010e 	add.w	r1, sp, #14
    4bce:	4620      	mov	r0, r4
    4bd0:	f003 fefa 	bl	89c8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4bd4:	4a42      	ldr	r2, [pc, #264]	; (4ce0 <nrfx_gpiote_input_configure+0x140>)
    4bd6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4bda:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4bde:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4be2:	f043 0301 	orr.w	r3, r3, #1
    4be6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4bea:	b197      	cbz	r7, 4c12 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4bec:	4b3c      	ldr	r3, [pc, #240]	; (4ce0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4bee:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4bf0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4bf2:	f104 0008 	add.w	r0, r4, #8
    4bf6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4bfa:	078f      	lsls	r7, r1, #30
    4bfc:	d50c      	bpl.n	4c18 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    4bfe:	2a00      	cmp	r2, #0
    4c00:	d1d7      	bne.n	4bb2 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4c02:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4c06:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4c0a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4c0e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    4c12:	bbcd      	cbnz	r5, 4c88 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    4c14:	4833      	ldr	r0, [pc, #204]	; (4ce4 <nrfx_gpiote_input_configure+0x144>)
    4c16:	e7cd      	b.n	4bb4 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4c18:	f021 0120 	bic.w	r1, r1, #32
    4c1c:	04c9      	lsls	r1, r1, #19
    4c1e:	0cc9      	lsrs	r1, r1, #19
    4c20:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4c24:	2a00      	cmp	r2, #0
    4c26:	d0ec      	beq.n	4c02 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    4c28:	2e03      	cmp	r6, #3
    4c2a:	d8c2      	bhi.n	4bb2 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4c2c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4c2e:	b92e      	cbnz	r6, 4c3c <nrfx_gpiote_input_configure+0x9c>
    4c30:	4a2d      	ldr	r2, [pc, #180]	; (4ce8 <nrfx_gpiote_input_configure+0x148>)
    4c32:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4c36:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4c3a:	e7e2      	b.n	4c02 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4c3c:	00ba      	lsls	r2, r7, #2
    4c3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4c42:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4c46:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4c4a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4c4e:	f02c 0c03 	bic.w	ip, ip, #3
    4c52:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4c56:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4c5a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4c5e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4c62:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4c66:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4c6a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4c6e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4c72:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4c76:	ea4c 0c0e 	orr.w	ip, ip, lr
    4c7a:	f041 0120 	orr.w	r1, r1, #32
    4c7e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4c82:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4c86:	e7bc      	b.n	4c02 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4c88:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4c8c:	4620      	mov	r0, r4
    4c8e:	f7ff fef7 	bl	4a80 <release_handler>
    if (!handler)
    4c92:	2e00      	cmp	r6, #0
    4c94:	d0be      	beq.n	4c14 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4c96:	4d12      	ldr	r5, [pc, #72]	; (4ce0 <nrfx_gpiote_input_configure+0x140>)
    4c98:	682b      	ldr	r3, [r5, #0]
    4c9a:	429e      	cmp	r6, r3
    4c9c:	d104      	bne.n	4ca8 <nrfx_gpiote_input_configure+0x108>
    4c9e:	686b      	ldr	r3, [r5, #4]
    4ca0:	429f      	cmp	r7, r3
    4ca2:	d101      	bne.n	4ca8 <nrfx_gpiote_input_configure+0x108>
    4ca4:	2200      	movs	r2, #0
    4ca6:	e00a      	b.n	4cbe <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4ca8:	4810      	ldr	r0, [pc, #64]	; (4cec <nrfx_gpiote_input_configure+0x14c>)
    4caa:	f10d 010f 	add.w	r1, sp, #15
    4cae:	f7ff fd07 	bl	46c0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4cb2:	4b0c      	ldr	r3, [pc, #48]	; (4ce4 <nrfx_gpiote_input_configure+0x144>)
    4cb4:	4298      	cmp	r0, r3
    4cb6:	f47f af7d 	bne.w	4bb4 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4cba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4cbe:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4cc2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cc6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4cc8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4cca:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4cce:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4cd6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4cda:	e79b      	b.n	4c14 <nrfx_gpiote_input_configure+0x74>
    4cdc:	0bad0004 	.word	0x0bad0004
    4ce0:	200000fc 	.word	0x200000fc
    4ce4:	0bad0000 	.word	0x0bad0000
    4ce8:	40006000 	.word	0x40006000
    4cec:	20000170 	.word	0x20000170

00004cf0 <nrfx_gpiote_output_configure>:
{
    4cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cf2:	4604      	mov	r4, r0
    4cf4:	b085      	sub	sp, #20
    4cf6:	4615      	mov	r5, r2
    if (p_config)
    4cf8:	b309      	cbz	r1, 4d3e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cfa:	f100 0708 	add.w	r7, r0, #8
    4cfe:	4e31      	ldr	r6, [pc, #196]	; (4dc4 <nrfx_gpiote_output_configure+0xd4>)
    4d00:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4d04:	0798      	lsls	r0, r3, #30
    4d06:	d401      	bmi.n	4d0c <nrfx_gpiote_output_configure+0x1c>
    4d08:	069a      	lsls	r2, r3, #26
    4d0a:	d458      	bmi.n	4dbe <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4d0c:	f013 0f1c 	tst.w	r3, #28
    4d10:	d002      	beq.n	4d18 <nrfx_gpiote_output_configure+0x28>
    4d12:	784b      	ldrb	r3, [r1, #1]
    4d14:	2b01      	cmp	r3, #1
    4d16:	d052      	beq.n	4dbe <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4d18:	2301      	movs	r3, #1
    4d1a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4d1e:	2300      	movs	r3, #0
    4d20:	e9cd 1300 	strd	r1, r3, [sp]
    4d24:	1c4a      	adds	r2, r1, #1
    4d26:	1c8b      	adds	r3, r1, #2
    4d28:	4620      	mov	r0, r4
    4d2a:	f10d 010f 	add.w	r1, sp, #15
    4d2e:	f003 fe4b 	bl	89c8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4d32:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4d36:	f043 0303 	orr.w	r3, r3, #3
    4d3a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4d3e:	b915      	cbnz	r5, 4d46 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    4d40:	4821      	ldr	r0, [pc, #132]	; (4dc8 <nrfx_gpiote_output_configure+0xd8>)
}
    4d42:	b005      	add	sp, #20
    4d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d46:	4e1f      	ldr	r6, [pc, #124]	; (4dc4 <nrfx_gpiote_output_configure+0xd4>)
    4d48:	f104 0708 	add.w	r7, r4, #8
    4d4c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4d50:	0783      	lsls	r3, r0, #30
    4d52:	d534      	bpl.n	4dbe <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    4d54:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4d58:	4661      	mov	r1, ip
    4d5a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4d5c:	f020 0020 	bic.w	r0, r0, #32
    4d60:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4d64:	04c0      	lsls	r0, r0, #19
    4d66:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4d6a:	0cc0      	lsrs	r0, r0, #19
    4d6c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4d70:	2300      	movs	r3, #0
    4d72:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4d76:	786a      	ldrb	r2, [r5, #1]
    4d78:	2a00      	cmp	r2, #0
    4d7a:	d0e1      	beq.n	4d40 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4d7c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4d80:	78ad      	ldrb	r5, [r5, #2]
    4d82:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4d86:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4d8a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d8e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4d92:	0223      	lsls	r3, r4, #8
    4d94:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d98:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d9a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4d9e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4da2:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4da4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4da6:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4daa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4dae:	432b      	orrs	r3, r5
    4db0:	f040 0020 	orr.w	r0, r0, #32
    4db4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4db8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4dbc:	e7c0      	b.n	4d40 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    4dbe:	4803      	ldr	r0, [pc, #12]	; (4dcc <nrfx_gpiote_output_configure+0xdc>)
    4dc0:	e7bf      	b.n	4d42 <nrfx_gpiote_output_configure+0x52>
    4dc2:	bf00      	nop
    4dc4:	200000fc 	.word	0x200000fc
    4dc8:	0bad0000 	.word	0x0bad0000
    4dcc:	0bad0004 	.word	0x0bad0004

00004dd0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4dd0:	4b01      	ldr	r3, [pc, #4]	; (4dd8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4dd2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4dd6:	4770      	bx	lr
    4dd8:	200000fc 	.word	0x200000fc

00004ddc <nrfx_gpiote_channel_get>:
{
    4ddc:	b538      	push	{r3, r4, r5, lr}
    4dde:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4de0:	460d      	mov	r5, r1
    4de2:	b959      	cbnz	r1, 4dfc <nrfx_gpiote_channel_get+0x20>
    4de4:	490b      	ldr	r1, [pc, #44]	; (4e14 <nrfx_gpiote_channel_get+0x38>)
    4de6:	480c      	ldr	r0, [pc, #48]	; (4e18 <nrfx_gpiote_channel_get+0x3c>)
    4de8:	4a0c      	ldr	r2, [pc, #48]	; (4e1c <nrfx_gpiote_channel_get+0x40>)
    4dea:	f240 2335 	movw	r3, #565	; 0x235
    4dee:	f003 fa8f 	bl	8310 <printk>
    4df2:	480a      	ldr	r0, [pc, #40]	; (4e1c <nrfx_gpiote_channel_get+0x40>)
    4df4:	f240 2135 	movw	r1, #565	; 0x235
    4df8:	f003 fb56 	bl	84a8 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4dfc:	3408      	adds	r4, #8
    4dfe:	4b08      	ldr	r3, [pc, #32]	; (4e20 <nrfx_gpiote_channel_get+0x44>)
    4e00:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    4e04:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4e06:	bf43      	ittte	mi
    4e08:	0b5b      	lsrmi	r3, r3, #13
    4e0a:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    4e0c:	4805      	ldrmi	r0, [pc, #20]	; (4e24 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    4e0e:	4806      	ldrpl	r0, [pc, #24]	; (4e28 <nrfx_gpiote_channel_get+0x4c>)
}
    4e10:	bd38      	pop	{r3, r4, r5, pc}
    4e12:	bf00      	nop
    4e14:	00009d0c 	.word	0x00009d0c
    4e18:	00009128 	.word	0x00009128
    4e1c:	00009c94 	.word	0x00009c94
    4e20:	200000fc 	.word	0x200000fc
    4e24:	0bad0000 	.word	0x0bad0000
    4e28:	0bad0004 	.word	0x0bad0004

00004e2c <nrfx_gpiote_init>:
{
    4e2c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4e2e:	4c0e      	ldr	r4, [pc, #56]	; (4e68 <nrfx_gpiote_init+0x3c>)
    4e30:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4e34:	b9b5      	cbnz	r5, 4e64 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4e36:	2260      	movs	r2, #96	; 0x60
    4e38:	4629      	mov	r1, r5
    4e3a:	f104 0010 	add.w	r0, r4, #16
    4e3e:	f003 fb7c 	bl	853a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4e42:	2006      	movs	r0, #6
    4e44:	f7fd fb72 	bl	252c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e48:	4b08      	ldr	r3, [pc, #32]	; (4e6c <nrfx_gpiote_init+0x40>)
    return err_code;
    4e4a:	4809      	ldr	r0, [pc, #36]	; (4e70 <nrfx_gpiote_init+0x44>)
    4e4c:	601d      	str	r5, [r3, #0]
    4e4e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4e50:	4b08      	ldr	r3, [pc, #32]	; (4e74 <nrfx_gpiote_init+0x48>)
    4e52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4e56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4e5a:	2301      	movs	r3, #1
    4e5c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4e60:	6763      	str	r3, [r4, #116]	; 0x74
}
    4e62:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4e64:	4804      	ldr	r0, [pc, #16]	; (4e78 <nrfx_gpiote_init+0x4c>)
    4e66:	e7fc      	b.n	4e62 <nrfx_gpiote_init+0x36>
    4e68:	200000fc 	.word	0x200000fc
    4e6c:	4000617c 	.word	0x4000617c
    4e70:	0bad0000 	.word	0x0bad0000
    4e74:	40006000 	.word	0x40006000
    4e78:	0bad0005 	.word	0x0bad0005

00004e7c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4e7c:	4b03      	ldr	r3, [pc, #12]	; (4e8c <nrfx_gpiote_is_init+0x10>)
    4e7e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4e82:	3800      	subs	r0, #0
    4e84:	bf18      	it	ne
    4e86:	2001      	movne	r0, #1
    4e88:	4770      	bx	lr
    4e8a:	bf00      	nop
    4e8c:	200000fc 	.word	0x200000fc

00004e90 <nrfx_gpiote_channel_free>:
{
    4e90:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4e92:	4801      	ldr	r0, [pc, #4]	; (4e98 <nrfx_gpiote_channel_free+0x8>)
    4e94:	f7ff bc38 	b.w	4708 <nrfx_flag32_free>
    4e98:	2000016c 	.word	0x2000016c

00004e9c <nrfx_gpiote_channel_alloc>:
{
    4e9c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4e9e:	4801      	ldr	r0, [pc, #4]	; (4ea4 <nrfx_gpiote_channel_alloc+0x8>)
    4ea0:	f7ff bc0e 	b.w	46c0 <nrfx_flag32_alloc>
    4ea4:	2000016c 	.word	0x2000016c

00004ea8 <nrfx_gpiote_trigger_enable>:
{
    4ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4eaa:	4d31      	ldr	r5, [pc, #196]	; (4f70 <nrfx_gpiote_trigger_enable+0xc8>)
    4eac:	f100 0708 	add.w	r7, r0, #8
{
    4eb0:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4eb2:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    4eb6:	f013 0f1c 	tst.w	r3, #28
{
    4eba:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4ebc:	d10b      	bne.n	4ed6 <nrfx_gpiote_trigger_enable+0x2e>
    4ebe:	492d      	ldr	r1, [pc, #180]	; (4f74 <nrfx_gpiote_trigger_enable+0xcc>)
    4ec0:	482d      	ldr	r0, [pc, #180]	; (4f78 <nrfx_gpiote_trigger_enable+0xd0>)
    4ec2:	4a2e      	ldr	r2, [pc, #184]	; (4f7c <nrfx_gpiote_trigger_enable+0xd4>)
    4ec4:	f240 33df 	movw	r3, #991	; 0x3df
    4ec8:	f003 fa22 	bl	8310 <printk>
    4ecc:	482b      	ldr	r0, [pc, #172]	; (4f7c <nrfx_gpiote_trigger_enable+0xd4>)
    4ece:	f240 31df 	movw	r1, #991	; 0x3df
    4ed2:	f003 fae9 	bl	84a8 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4ed6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4eda:	0683      	lsls	r3, r0, #26
    4edc:	d51f      	bpl.n	4f1e <nrfx_gpiote_trigger_enable+0x76>
    4ede:	f010 0302 	ands.w	r3, r0, #2
    4ee2:	d11c      	bne.n	4f1e <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ee4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    4ee6:	4608      	mov	r0, r1
    4ee8:	f003 fd6a 	bl	89c0 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    4eec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4ef0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ef4:	6003      	str	r3, [r0, #0]
    4ef6:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4ef8:	008b      	lsls	r3, r1, #2
    4efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4efe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4f02:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4f06:	f042 0201 	orr.w	r2, r2, #1
    4f0a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    4f0e:	b126      	cbz	r6, 4f1a <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    4f10:	4a1b      	ldr	r2, [pc, #108]	; (4f80 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4f12:	2301      	movs	r3, #1
    4f14:	408b      	lsls	r3, r1
    4f16:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4f1a:	b003      	add	sp, #12
    4f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    4f1e:	b95e      	cbnz	r6, 4f38 <nrfx_gpiote_trigger_enable+0x90>
    4f20:	4918      	ldr	r1, [pc, #96]	; (4f84 <nrfx_gpiote_trigger_enable+0xdc>)
    4f22:	4815      	ldr	r0, [pc, #84]	; (4f78 <nrfx_gpiote_trigger_enable+0xd0>)
    4f24:	4a15      	ldr	r2, [pc, #84]	; (4f7c <nrfx_gpiote_trigger_enable+0xd4>)
    4f26:	f240 33ee 	movw	r3, #1006	; 0x3ee
    4f2a:	f003 f9f1 	bl	8310 <printk>
    4f2e:	4813      	ldr	r0, [pc, #76]	; (4f7c <nrfx_gpiote_trigger_enable+0xd4>)
    4f30:	f240 31ee 	movw	r1, #1006	; 0x3ee
    4f34:	f003 fab8 	bl	84a8 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4f38:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    4f3c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4f40:	2b04      	cmp	r3, #4
    4f42:	d010      	beq.n	4f66 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4f44:	2b05      	cmp	r3, #5
    4f46:	d010      	beq.n	4f6a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f48:	a801      	add	r0, sp, #4
    4f4a:	9401      	str	r4, [sp, #4]
    4f4c:	f7ff fdf2 	bl	4b34 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4f50:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    4f52:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4f56:	40d9      	lsrs	r1, r3
    4f58:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4f5c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4f5e:	4620      	mov	r0, r4
    4f60:	f003 fd7d 	bl	8a5e <nrf_gpio_cfg_sense_set>
}
    4f64:	e7d9      	b.n	4f1a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4f66:	2103      	movs	r1, #3
    4f68:	e7f9      	b.n	4f5e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4f6a:	2102      	movs	r1, #2
    4f6c:	e7f7      	b.n	4f5e <nrfx_gpiote_trigger_enable+0xb6>
    4f6e:	bf00      	nop
    4f70:	200000fc 	.word	0x200000fc
    4f74:	00009d16 	.word	0x00009d16
    4f78:	00009128 	.word	0x00009128
    4f7c:	00009c94 	.word	0x00009c94
    4f80:	40006000 	.word	0x40006000
    4f84:	00009d2b 	.word	0x00009d2b

00004f88 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4f88:	4b0e      	ldr	r3, [pc, #56]	; (4fc4 <nrfx_gpiote_trigger_disable+0x3c>)
    4f8a:	f100 0208 	add.w	r2, r0, #8
    4f8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4f92:	0699      	lsls	r1, r3, #26
    4f94:	d513      	bpl.n	4fbe <nrfx_gpiote_trigger_disable+0x36>
    4f96:	079a      	lsls	r2, r3, #30
    4f98:	d411      	bmi.n	4fbe <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f9a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4f9c:	2201      	movs	r2, #1
    4f9e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4fa0:	009b      	lsls	r3, r3, #2
    4fa2:	4909      	ldr	r1, [pc, #36]	; (4fc8 <nrfx_gpiote_trigger_disable+0x40>)
    4fa4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4fa8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4fac:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4fb0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4fb4:	f022 0203 	bic.w	r2, r2, #3
    4fb8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4fbc:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4fbe:	2100      	movs	r1, #0
    4fc0:	f003 bd4d 	b.w	8a5e <nrf_gpio_cfg_sense_set>
    4fc4:	200000fc 	.word	0x200000fc
    4fc8:	40006000 	.word	0x40006000

00004fcc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4fcc:	4b0e      	ldr	r3, [pc, #56]	; (5008 <nrfx_gpiote_pin_uninit+0x3c>)
    4fce:	f100 0208 	add.w	r2, r0, #8
{
    4fd2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4fd4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4fd8:	07db      	lsls	r3, r3, #31
{
    4fda:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4fdc:	d511      	bpl.n	5002 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    4fde:	f7ff ffd3 	bl	4f88 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4fe2:	4620      	mov	r0, r4
    4fe4:	f7ff fd8c 	bl	4b00 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4fe8:	a801      	add	r0, sp, #4
    4fea:	9401      	str	r4, [sp, #4]
    4fec:	f7ff fda2 	bl	4b34 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4ff0:	9b01      	ldr	r3, [sp, #4]
    4ff2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4ff6:	2202      	movs	r2, #2
    4ff8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4ffc:	4803      	ldr	r0, [pc, #12]	; (500c <nrfx_gpiote_pin_uninit+0x40>)
}
    4ffe:	b002      	add	sp, #8
    5000:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5002:	4803      	ldr	r0, [pc, #12]	; (5010 <nrfx_gpiote_pin_uninit+0x44>)
    5004:	e7fb      	b.n	4ffe <nrfx_gpiote_pin_uninit+0x32>
    5006:	bf00      	nop
    5008:	200000fc 	.word	0x200000fc
    500c:	0bad0000 	.word	0x0bad0000
    5010:	0bad0004 	.word	0x0bad0004

00005014 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5018:	4b65      	ldr	r3, [pc, #404]	; (51b0 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    501a:	4866      	ldr	r0, [pc, #408]	; (51b4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    501c:	4966      	ldr	r1, [pc, #408]	; (51b8 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    501e:	2500      	movs	r5, #0
{
    5020:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5022:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5024:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5026:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5028:	b136      	cbz	r6, 5038 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    502a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    502e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5030:	bf1e      	ittt	ne
    5032:	601c      	strne	r4, [r3, #0]
    5034:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5036:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    5038:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    503a:	428b      	cmp	r3, r1
        mask <<= 1;
    503c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5040:	d1f1      	bne.n	5026 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5042:	4f5e      	ldr	r7, [pc, #376]	; (51bc <nrfx_gpiote_irq_handler+0x1a8>)
    5044:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5046:	b37b      	cbz	r3, 50a8 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    5048:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    504c:	4e5c      	ldr	r6, [pc, #368]	; (51c0 <nrfx_gpiote_irq_handler+0x1ac>)
    504e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5052:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    5054:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5058:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    505c:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    505e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5062:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5064:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5068:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    506c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    5070:	f8d9 3000 	ldr.w	r3, [r9]
    5074:	b9f3      	cbnz	r3, 50b4 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5076:	f108 0820 	add.w	r8, r8, #32
    507a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    507e:	f109 0904 	add.w	r9, r9, #4
    5082:	d1f5      	bne.n	5070 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5084:	603b      	str	r3, [r7, #0]
    5086:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    5088:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    508a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    508e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5092:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    5094:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5098:	9b01      	ldr	r3, [sp, #4]
    509a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    509e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    50a0:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    50a4:	4313      	orrs	r3, r2
    50a6:	d1dd      	bne.n	5064 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    50a8:	2401      	movs	r4, #1
    while (mask)
    50aa:	2d00      	cmp	r5, #0
    50ac:	d168      	bne.n	5180 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    50ae:	b009      	add	sp, #36	; 0x24
    50b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    50b4:	fa93 f3a3 	rbit	r3, r3
    50b8:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    50bc:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    50c0:	f106 0208 	add.w	r2, r6, #8
    50c4:	4b3f      	ldr	r3, [pc, #252]	; (51c4 <nrfx_gpiote_irq_handler+0x1b0>)
    50c6:	9605      	str	r6, [sp, #20]
    50c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    50cc:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    50d0:	08f4      	lsrs	r4, r6, #3
    50d2:	9302      	str	r3, [sp, #8]
    50d4:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    50d6:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    50d8:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    50dc:	fa0b fc00 	lsl.w	ip, fp, r0
    50e0:	5d18      	ldrb	r0, [r3, r4]
    50e2:	ea20 000c 	bic.w	r0, r0, ip
    50e6:	5518      	strb	r0, [r3, r4]
    50e8:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50ea:	a805      	add	r0, sp, #20
    50ec:	9103      	str	r1, [sp, #12]
    50ee:	f7ff fd21 	bl	4b34 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    50f2:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    50f4:	9903      	ldr	r1, [sp, #12]
    50f6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    50fa:	074b      	lsls	r3, r1, #29
    50fc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5100:	f3c4 4401 	ubfx	r4, r4, #16, #2
    5104:	d523      	bpl.n	514e <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    5106:	4651      	mov	r1, sl
    5108:	4630      	mov	r0, r6
    510a:	f7ff fc9b 	bl	4a44 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    510e:	a805      	add	r0, sp, #20
    5110:	9605      	str	r6, [sp, #20]
    5112:	f7ff fd0f 	bl	4b34 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5116:	9a05      	ldr	r2, [sp, #20]
    5118:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    511c:	b2e4      	uxtb	r4, r4
    511e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5122:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5126:	4294      	cmp	r4, r2
    5128:	d107      	bne.n	513a <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    512a:	2100      	movs	r1, #0
    512c:	4630      	mov	r0, r6
    512e:	f003 fc96 	bl	8a5e <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5132:	4621      	mov	r1, r4
    5134:	4630      	mov	r0, r6
    5136:	f003 fc92 	bl	8a5e <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    513a:	a805      	add	r0, sp, #20
    513c:	9605      	str	r6, [sp, #20]
    513e:	f7ff fcf9 	bl	4b34 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5142:	9b05      	ldr	r3, [sp, #20]
    5144:	fa0b f303 	lsl.w	r3, fp, r3
    5148:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    514c:	e790      	b.n	5070 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    514e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5150:	bf0c      	ite	eq
    5152:	2103      	moveq	r1, #3
    5154:	2102      	movne	r1, #2
    5156:	4630      	mov	r0, r6
    5158:	f003 fc81 	bl	8a5e <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    515c:	9b02      	ldr	r3, [sp, #8]
    515e:	2b03      	cmp	r3, #3
    5160:	d004      	beq.n	516c <nrfx_gpiote_irq_handler+0x158>
    5162:	2c02      	cmp	r4, #2
    5164:	d107      	bne.n	5176 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5166:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    516a:	d1e6      	bne.n	513a <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    516c:	4651      	mov	r1, sl
    516e:	4630      	mov	r0, r6
    5170:	f7ff fc68 	bl	4a44 <call_handler>
    5174:	e7e1      	b.n	513a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5176:	2c03      	cmp	r4, #3
    5178:	d1df      	bne.n	513a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    517a:	f1ba 0f02 	cmp.w	sl, #2
    517e:	e7f4      	b.n	516a <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    5180:	fa95 f3a5 	rbit	r3, r5
    5184:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5188:	fa04 f203 	lsl.w	r2, r4, r3
    518c:	009b      	lsls	r3, r3, #2
    518e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5192:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5196:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    519a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    519e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    51a2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    51a6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    51aa:	f7ff fc4b 	bl	4a44 <call_handler>
    51ae:	e77c      	b.n	50aa <nrfx_gpiote_irq_handler+0x96>
    51b0:	40006100 	.word	0x40006100
    51b4:	40006000 	.word	0x40006000
    51b8:	40006120 	.word	0x40006120
    51bc:	4000617c 	.word	0x4000617c
    51c0:	50000300 	.word	0x50000300
    51c4:	200000fc 	.word	0x200000fc

000051c8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    51c8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    51ca:	4801      	ldr	r0, [pc, #4]	; (51d0 <nrfx_ppi_channel_alloc+0x8>)
    51cc:	f7ff ba78 	b.w	46c0 <nrfx_flag32_alloc>
    51d0:	20000178 	.word	0x20000178

000051d4 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    51d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51d8:	4604      	mov	r4, r0
    51da:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    51dc:	4615      	mov	r5, r2
    51de:	b95a      	cbnz	r2, 51f8 <nrf_pwm_sequence_set+0x24>
    51e0:	4932      	ldr	r1, [pc, #200]	; (52ac <nrf_pwm_sequence_set+0xd8>)
    51e2:	4833      	ldr	r0, [pc, #204]	; (52b0 <nrf_pwm_sequence_set+0xdc>)
    51e4:	4a33      	ldr	r2, [pc, #204]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    51e6:	f240 23a7 	movw	r3, #679	; 0x2a7
    51ea:	f003 f891 	bl	8310 <printk>
    51ee:	4831      	ldr	r0, [pc, #196]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    51f0:	f240 21a7 	movw	r1, #679	; 0x2a7
    51f4:	f003 f958 	bl	84a8 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    51f8:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    51fa:	b95f      	cbnz	r7, 5214 <nrf_pwm_sequence_set+0x40>
    51fc:	492e      	ldr	r1, [pc, #184]	; (52b8 <nrf_pwm_sequence_set+0xe4>)
    51fe:	482c      	ldr	r0, [pc, #176]	; (52b0 <nrf_pwm_sequence_set+0xdc>)
    5200:	4a2c      	ldr	r2, [pc, #176]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    5202:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    5206:	f003 f883 	bl	8310 <printk>
    520a:	482a      	ldr	r0, [pc, #168]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    520c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5210:	f003 f94a 	bl	84a8 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    5214:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    5218:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    521c:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    521e:	2f00      	cmp	r7, #0
    5220:	d138      	bne.n	5294 <nrf_pwm_sequence_set+0xc0>
    5222:	4926      	ldr	r1, [pc, #152]	; (52bc <nrf_pwm_sequence_set+0xe8>)
    5224:	4a23      	ldr	r2, [pc, #140]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    5226:	4822      	ldr	r0, [pc, #136]	; (52b0 <nrf_pwm_sequence_set+0xdc>)
    5228:	f240 23bd 	movw	r3, #701	; 0x2bd
    522c:	f003 f870 	bl	8310 <printk>
    5230:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    5234:	481f      	ldr	r0, [pc, #124]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    5236:	f003 f937 	bl	84a8 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    523a:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    523e:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    5240:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    5244:	d30b      	bcc.n	525e <nrf_pwm_sequence_set+0x8a>
    5246:	491e      	ldr	r1, [pc, #120]	; (52c0 <nrf_pwm_sequence_set+0xec>)
    5248:	4819      	ldr	r0, [pc, #100]	; (52b0 <nrf_pwm_sequence_set+0xdc>)
    524a:	4a1a      	ldr	r2, [pc, #104]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    524c:	f240 23c7 	movw	r3, #711	; 0x2c7
    5250:	f003 f85e 	bl	8310 <printk>
    5254:	4817      	ldr	r0, [pc, #92]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    5256:	f240 21c7 	movw	r1, #711	; 0x2c7
    525a:	f003 f925 	bl	84a8 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    525e:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    5260:	ea4f 1846 	mov.w	r8, r6, lsl #5
    5264:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    5268:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    526c:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    5270:	d30b      	bcc.n	528a <nrf_pwm_sequence_set+0xb6>
    5272:	4914      	ldr	r1, [pc, #80]	; (52c4 <nrf_pwm_sequence_set+0xf0>)
    5274:	480e      	ldr	r0, [pc, #56]	; (52b0 <nrf_pwm_sequence_set+0xdc>)
    5276:	4a0f      	ldr	r2, [pc, #60]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    5278:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    527c:	f003 f848 	bl	8310 <printk>
    5280:	480c      	ldr	r0, [pc, #48]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    5282:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    5286:	f003 f90f 	bl	84a8 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    528a:	4444      	add	r4, r8
    528c:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    5290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    5294:	043b      	lsls	r3, r7, #16
    5296:	d5d0      	bpl.n	523a <nrf_pwm_sequence_set+0x66>
    5298:	490b      	ldr	r1, [pc, #44]	; (52c8 <nrf_pwm_sequence_set+0xf4>)
    529a:	4a06      	ldr	r2, [pc, #24]	; (52b4 <nrf_pwm_sequence_set+0xe0>)
    529c:	4804      	ldr	r0, [pc, #16]	; (52b0 <nrf_pwm_sequence_set+0xdc>)
    529e:	f240 23be 	movw	r3, #702	; 0x2be
    52a2:	f003 f835 	bl	8310 <printk>
    52a6:	f240 21be 	movw	r1, #702	; 0x2be
    52aa:	e7c3      	b.n	5234 <nrf_pwm_sequence_set+0x60>
    52ac:	00009d68 	.word	0x00009d68
    52b0:	00009128 	.word	0x00009128
    52b4:	00009d36 	.word	0x00009d36
    52b8:	00009d7d 	.word	0x00009d7d
    52bc:	00009d95 	.word	0x00009d95
    52c0:	00009dbf 	.word	0x00009dbf
    52c4:	00009de0 	.word	0x00009de0
    52c8:	00009da1 	.word	0x00009da1

000052cc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52cc:	6802      	ldr	r2, [r0, #0]
    switch (port)
    52ce:	0953      	lsrs	r3, r2, #5
{
    52d0:	b510      	push	{r4, lr}
    52d2:	4604      	mov	r4, r0
    switch (port)
    52d4:	d02c      	beq.n	5330 <nrf_gpio_pin_port_decode+0x64>
    52d6:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    52d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    52dc:	bf18      	it	ne
    52de:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    52e0:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    52e4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    52e6:	07db      	lsls	r3, r3, #31
    52e8:	d40b      	bmi.n	5302 <nrf_gpio_pin_port_decode+0x36>
    52ea:	4914      	ldr	r1, [pc, #80]	; (533c <nrf_gpio_pin_port_decode+0x70>)
    52ec:	4814      	ldr	r0, [pc, #80]	; (5340 <nrf_gpio_pin_port_decode+0x74>)
    52ee:	4a15      	ldr	r2, [pc, #84]	; (5344 <nrf_gpio_pin_port_decode+0x78>)
    52f0:	f240 2329 	movw	r3, #553	; 0x229
    52f4:	f003 f80c 	bl	8310 <printk>
    52f8:	4812      	ldr	r0, [pc, #72]	; (5344 <nrf_gpio_pin_port_decode+0x78>)
    52fa:	f240 2129 	movw	r1, #553	; 0x229
    52fe:	f003 f8d3 	bl	84a8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5302:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5304:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5308:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    530a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    530c:	d00d      	beq.n	532a <nrf_gpio_pin_port_decode+0x5e>
    530e:	2b01      	cmp	r3, #1
    5310:	d011      	beq.n	5336 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    5312:	490d      	ldr	r1, [pc, #52]	; (5348 <nrf_gpio_pin_port_decode+0x7c>)
    5314:	480a      	ldr	r0, [pc, #40]	; (5340 <nrf_gpio_pin_port_decode+0x74>)
    5316:	4a0b      	ldr	r2, [pc, #44]	; (5344 <nrf_gpio_pin_port_decode+0x78>)
    5318:	f240 232e 	movw	r3, #558	; 0x22e
    531c:	f002 fff8 	bl	8310 <printk>
    5320:	4808      	ldr	r0, [pc, #32]	; (5344 <nrf_gpio_pin_port_decode+0x78>)
    5322:	f240 212e 	movw	r1, #558	; 0x22e
    5326:	f003 f8bf 	bl	84a8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    532a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    532e:	bd10      	pop	{r4, pc}
    switch (port)
    5330:	f04f 33ff 	mov.w	r3, #4294967295
    5334:	e7d4      	b.n	52e0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    5336:	4805      	ldr	r0, [pc, #20]	; (534c <nrf_gpio_pin_port_decode+0x80>)
    5338:	e7f9      	b.n	532e <nrf_gpio_pin_port_decode+0x62>
    533a:	bf00      	nop
    533c:	00009bb3 	.word	0x00009bb3
    5340:	00009128 	.word	0x00009128
    5344:	00009b80 	.word	0x00009b80
    5348:	00009d9f 	.word	0x00009d9f
    534c:	50000300 	.word	0x50000300

00005350 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    5350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5354:	4606      	mov	r6, r0
    5356:	b087      	sub	sp, #28
    5358:	4691      	mov	r9, r2
    535a:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    535c:	460c      	mov	r4, r1
    535e:	b949      	cbnz	r1, 5374 <nrfx_pwm_init+0x24>
    5360:	4959      	ldr	r1, [pc, #356]	; (54c8 <nrfx_pwm_init+0x178>)
    5362:	485a      	ldr	r0, [pc, #360]	; (54cc <nrfx_pwm_init+0x17c>)
    5364:	4a5a      	ldr	r2, [pc, #360]	; (54d0 <nrfx_pwm_init+0x180>)
    5366:	238c      	movs	r3, #140	; 0x8c
    5368:	f002 ffd2 	bl	8310 <printk>
    536c:	4858      	ldr	r0, [pc, #352]	; (54d0 <nrfx_pwm_init+0x180>)
    536e:	218c      	movs	r1, #140	; 0x8c
    5370:	f003 f89a 	bl	84a8 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5374:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5376:	4d57      	ldr	r5, [pc, #348]	; (54d4 <nrfx_pwm_init+0x184>)
    5378:	210c      	movs	r1, #12
    537a:	4379      	muls	r1, r7
    537c:	186b      	adds	r3, r5, r1
    537e:	7a1a      	ldrb	r2, [r3, #8]
    5380:	2a00      	cmp	r2, #0
    5382:	f040 809f 	bne.w	54c4 <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5386:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    5388:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    538c:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5390:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    5392:	2a00      	cmp	r2, #0
    5394:	d04d      	beq.n	5432 <nrfx_pwm_init+0xe2>
    5396:	7b63      	ldrb	r3, [r4, #13]
    5398:	2b00      	cmp	r3, #0
    539a:	d04a      	beq.n	5432 <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    539c:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    53a0:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    53a4:	2301      	movs	r3, #1
    53a6:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    53aa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    53ae:	f894 b005 	ldrb.w	fp, [r4, #5]
    53b2:	f894 a006 	ldrb.w	sl, [r4, #6]
    53b6:	2b00      	cmp	r3, #0
    53b8:	da0b      	bge.n	53d2 <nrfx_pwm_init+0x82>
    53ba:	4947      	ldr	r1, [pc, #284]	; (54d8 <nrfx_pwm_init+0x188>)
    53bc:	4843      	ldr	r0, [pc, #268]	; (54cc <nrfx_pwm_init+0x17c>)
    53be:	4a47      	ldr	r2, [pc, #284]	; (54dc <nrfx_pwm_init+0x18c>)
    53c0:	f44f 7327 	mov.w	r3, #668	; 0x29c
    53c4:	f002 ffa4 	bl	8310 <printk>
    53c8:	4844      	ldr	r0, [pc, #272]	; (54dc <nrfx_pwm_init+0x18c>)
    53ca:	f44f 7127 	mov.w	r1, #668	; 0x29c
    53ce:	f003 f86b 	bl	84a8 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    53d2:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    53d6:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    53d8:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    53dc:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    53e0:	8963      	ldrh	r3, [r4, #10]
    53e2:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    53e6:	2300      	movs	r3, #0
    53e8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    53ec:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53f0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    53f4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    53f8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    53fc:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    5400:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    5404:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5408:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    540c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    5410:	230c      	movs	r3, #12
    5412:	437b      	muls	r3, r7
    5414:	58eb      	ldr	r3, [r5, r3]
    5416:	b11b      	cbz	r3, 5420 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    5418:	f340 3007 	sbfx	r0, r0, #12, #8
    541c:	f7fd f886 	bl	252c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5420:	230c      	movs	r3, #12
    5422:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5426:	482e      	ldr	r0, [pc, #184]	; (54e0 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5428:	2301      	movs	r3, #1
    542a:	722b      	strb	r3, [r5, #8]
}
    542c:	b007      	add	sp, #28
    542e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5432:	f104 39ff 	add.w	r9, r4, #4294967295
    5436:	f10d 0808 	add.w	r8, sp, #8
    543a:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    543e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    5442:	2aff      	cmp	r2, #255	; 0xff
    5444:	d039      	beq.n	54ba <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    5446:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    5448:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    544c:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    5450:	b9b1      	cbnz	r1, 5480 <nrfx_pwm_init+0x130>
    if (value == 0)
    5452:	0613      	lsls	r3, r2, #24
    5454:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5458:	a801      	add	r0, sp, #4
    if (value == 0)
    545a:	d426      	bmi.n	54aa <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    545c:	f7ff ff36 	bl	52cc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5460:	9901      	ldr	r1, [sp, #4]
    5462:	2201      	movs	r2, #1
    5464:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    5466:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    546a:	a801      	add	r0, sp, #4
    546c:	f8cd b004 	str.w	fp, [sp, #4]
    5470:	f7ff ff2c 	bl	52cc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5474:	9b01      	ldr	r3, [sp, #4]
    5476:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    547a:	2203      	movs	r2, #3
    547c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    5480:	45d1      	cmp	r9, sl
    5482:	f108 0804 	add.w	r8, r8, #4
    5486:	d1da      	bne.n	543e <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    5488:	7b63      	ldrb	r3, [r4, #13]
    548a:	2b00      	cmp	r3, #0
    548c:	d186      	bne.n	539c <nrfx_pwm_init+0x4c>
    548e:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    5490:	9a02      	ldr	r2, [sp, #8]
    5492:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    5496:	9a03      	ldr	r2, [sp, #12]
    5498:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    549c:	9a04      	ldr	r2, [sp, #16]
    549e:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    54a2:	9a05      	ldr	r2, [sp, #20]
    54a4:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    54a8:	e778      	b.n	539c <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    54aa:	f7ff ff0f 	bl	52cc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    54ae:	9901      	ldr	r1, [sp, #4]
    54b0:	2201      	movs	r2, #1
    54b2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    54b4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    54b8:	e7d7      	b.n	546a <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    54ba:	f04f 33ff 	mov.w	r3, #4294967295
    54be:	f8c8 3000 	str.w	r3, [r8]
    54c2:	e7dd      	b.n	5480 <nrfx_pwm_init+0x130>
        return err_code;
    54c4:	4807      	ldr	r0, [pc, #28]	; (54e4 <nrfx_pwm_init+0x194>)
    54c6:	e7b1      	b.n	542c <nrfx_pwm_init+0xdc>
    54c8:	00009e3e 	.word	0x00009e3e
    54cc:	00009128 	.word	0x00009128
    54d0:	00009e03 	.word	0x00009e03
    54d4:	20000c98 	.word	0x20000c98
    54d8:	00009e47 	.word	0x00009e47
    54dc:	00009d36 	.word	0x00009d36
    54e0:	0bad0000 	.word	0x0bad0000
    54e4:	0bad0005 	.word	0x0bad0005

000054e8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    54e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54ec:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    54ee:	7903      	ldrb	r3, [r0, #4]
{
    54f0:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    54f2:	4a31      	ldr	r2, [pc, #196]	; (55b8 <nrfx_pwm_simple_playback+0xd0>)
{
    54f4:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    54f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    54fa:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    54fe:	210c      	movs	r1, #12
    5500:	fb01 2303 	mla	r3, r1, r3, r2
{
    5504:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5506:	7a1b      	ldrb	r3, [r3, #8]
    5508:	b95b      	cbnz	r3, 5522 <nrfx_pwm_simple_playback+0x3a>
    550a:	492c      	ldr	r1, [pc, #176]	; (55bc <nrfx_pwm_simple_playback+0xd4>)
    550c:	482c      	ldr	r0, [pc, #176]	; (55c0 <nrfx_pwm_simple_playback+0xd8>)
    550e:	4a2d      	ldr	r2, [pc, #180]	; (55c4 <nrfx_pwm_simple_playback+0xdc>)
    5510:	f44f 7396 	mov.w	r3, #300	; 0x12c
    5514:	f002 fefc 	bl	8310 <printk>
    5518:	482a      	ldr	r0, [pc, #168]	; (55c4 <nrfx_pwm_simple_playback+0xdc>)
    551a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    551e:	f002 ffc3 	bl	84a8 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    5522:	b95c      	cbnz	r4, 553c <nrfx_pwm_simple_playback+0x54>
    5524:	4928      	ldr	r1, [pc, #160]	; (55c8 <nrfx_pwm_simple_playback+0xe0>)
    5526:	4826      	ldr	r0, [pc, #152]	; (55c0 <nrfx_pwm_simple_playback+0xd8>)
    5528:	4a26      	ldr	r2, [pc, #152]	; (55c4 <nrfx_pwm_simple_playback+0xdc>)
    552a:	f240 132d 	movw	r3, #301	; 0x12d
    552e:	f002 feef 	bl	8310 <printk>
    5532:	4824      	ldr	r0, [pc, #144]	; (55c4 <nrfx_pwm_simple_playback+0xdc>)
    5534:	f240 112d 	movw	r1, #301	; 0x12d
    5538:	f002 ffb6 	bl	84a8 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    553c:	6833      	ldr	r3, [r6, #0]
    553e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    5542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5546:	d00b      	beq.n	5560 <nrfx_pwm_simple_playback+0x78>
    5548:	4920      	ldr	r1, [pc, #128]	; (55cc <nrfx_pwm_simple_playback+0xe4>)
    554a:	481d      	ldr	r0, [pc, #116]	; (55c0 <nrfx_pwm_simple_playback+0xd8>)
    554c:	4a1d      	ldr	r2, [pc, #116]	; (55c4 <nrfx_pwm_simple_playback+0xdc>)
    554e:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5552:	f002 fedd 	bl	8310 <printk>
    5556:	481b      	ldr	r0, [pc, #108]	; (55c4 <nrfx_pwm_simple_playback+0xdc>)
    5558:	f44f 7197 	mov.w	r1, #302	; 0x12e
    555c:	f002 ffa4 	bl	84a8 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    5560:	6828      	ldr	r0, [r5, #0]
    5562:	4632      	mov	r2, r6
    5564:	2100      	movs	r1, #0
    5566:	f7ff fe35 	bl	51d4 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    556a:	6828      	ldr	r0, [r5, #0]
    556c:	4632      	mov	r2, r6
    556e:	2101      	movs	r1, #1
    5570:	f7ff fe30 	bl	51d4 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    5574:	6828      	ldr	r0, [r5, #0]
    5576:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    557a:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    557e:	f018 0f01 	tst.w	r8, #1
    5582:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    5586:	d114      	bne.n	55b2 <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    5588:	f018 0202 	ands.w	r2, r8, #2
    558c:	d003      	beq.n	5596 <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    558e:	2b00      	cmp	r3, #0
    5590:	bf14      	ite	ne
    5592:	2208      	movne	r2, #8
    5594:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    5596:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    5598:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    559c:	4639      	mov	r1, r7
    559e:	fa5f f288 	uxtb.w	r2, r8
    55a2:	bf18      	it	ne
    55a4:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    55a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    55aa:	bf08      	it	eq
    55ac:	2308      	moveq	r3, #8
    55ae:	f003 ba65 	b.w	8a7c <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    55b2:	2210      	movs	r2, #16
    55b4:	e7ef      	b.n	5596 <nrfx_pwm_simple_playback+0xae>
    55b6:	bf00      	nop
    55b8:	20000c98 	.word	0x20000c98
    55bc:	00009e68 	.word	0x00009e68
    55c0:	00009128 	.word	0x00009128
    55c4:	00009e03 	.word	0x00009e03
    55c8:	00009e94 	.word	0x00009e94
    55cc:	00009ea7 	.word	0x00009ea7

000055d0 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    55d0:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    55d2:	4e12      	ldr	r6, [pc, #72]	; (561c <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    55d4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    55d6:	220c      	movs	r2, #12
    55d8:	fb02 6204 	mla	r2, r2, r4, r6
{
    55dc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    55de:	7a12      	ldrb	r2, [r2, #8]
    55e0:	b95a      	cbnz	r2, 55fa <nrfx_pwm_is_stopped+0x2a>
    55e2:	490f      	ldr	r1, [pc, #60]	; (5620 <nrfx_pwm_is_stopped+0x50>)
    55e4:	480f      	ldr	r0, [pc, #60]	; (5624 <nrfx_pwm_is_stopped+0x54>)
    55e6:	4a10      	ldr	r2, [pc, #64]	; (5628 <nrfx_pwm_is_stopped+0x58>)
    55e8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    55ec:	f002 fe90 	bl	8310 <printk>
    55f0:	480d      	ldr	r0, [pc, #52]	; (5628 <nrfx_pwm_is_stopped+0x58>)
    55f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    55f6:	f002 ff57 	bl	84a8 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    55fa:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    55fc:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    55fe:	fb03 6404 	mla	r4, r3, r4, r6
    5602:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5604:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    5608:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    560a:	b91a      	cbnz	r2, 5614 <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    560c:	1e98      	subs	r0, r3, #2
    560e:	bf18      	it	ne
    5610:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    5612:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5614:	2001      	movs	r0, #1
    5616:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    5618:	e7fb      	b.n	5612 <nrfx_pwm_is_stopped+0x42>
    561a:	bf00      	nop
    561c:	20000c98 	.word	0x20000c98
    5620:	00009e68 	.word	0x00009e68
    5624:	00009128 	.word	0x00009128
    5628:	00009e03 	.word	0x00009e03

0000562c <nrfx_pwm_stop>:
{
    562c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    562e:	4a14      	ldr	r2, [pc, #80]	; (5680 <nrfx_pwm_stop+0x54>)
    5630:	7903      	ldrb	r3, [r0, #4]
{
    5632:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    5634:	210c      	movs	r1, #12
    5636:	fb01 2303 	mla	r3, r1, r3, r2
{
    563a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    563c:	7a1b      	ldrb	r3, [r3, #8]
    563e:	b95b      	cbnz	r3, 5658 <nrfx_pwm_stop+0x2c>
    5640:	4910      	ldr	r1, [pc, #64]	; (5684 <nrfx_pwm_stop+0x58>)
    5642:	4811      	ldr	r0, [pc, #68]	; (5688 <nrfx_pwm_stop+0x5c>)
    5644:	4a11      	ldr	r2, [pc, #68]	; (568c <nrfx_pwm_stop+0x60>)
    5646:	f240 1385 	movw	r3, #389	; 0x185
    564a:	f002 fe61 	bl	8310 <printk>
    564e:	480f      	ldr	r0, [pc, #60]	; (568c <nrfx_pwm_stop+0x60>)
    5650:	f240 1185 	movw	r1, #389	; 0x185
    5654:	f002 ff28 	bl	84a8 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    5658:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    565a:	2200      	movs	r2, #0
    565c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5660:	2201      	movs	r2, #1
    5662:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    5664:	4620      	mov	r0, r4
    5666:	f7ff ffb3 	bl	55d0 <nrfx_pwm_is_stopped>
    566a:	b938      	cbnz	r0, 567c <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    566c:	4620      	mov	r0, r4
    566e:	f7ff ffaf 	bl	55d0 <nrfx_pwm_is_stopped>
    5672:	b918      	cbnz	r0, 567c <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    5674:	2d00      	cmp	r5, #0
    5676:	d1f9      	bne.n	566c <nrfx_pwm_stop+0x40>
}
    5678:	4628      	mov	r0, r5
    567a:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    567c:	2501      	movs	r5, #1
    567e:	e7fb      	b.n	5678 <nrfx_pwm_stop+0x4c>
    5680:	20000c98 	.word	0x20000c98
    5684:	00009ed0 	.word	0x00009ed0
    5688:	00009128 	.word	0x00009128
    568c:	00009e03 	.word	0x00009e03

00005690 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5690:	4b0e      	ldr	r3, [pc, #56]	; (56cc <z_sys_init_run_level+0x3c>)
{
    5692:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5694:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5698:	3001      	adds	r0, #1
    569a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    569e:	42a6      	cmp	r6, r4
    56a0:	d800      	bhi.n	56a4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    56a2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    56a4:	e9d4 3500 	ldrd	r3, r5, [r4]
    56a8:	4628      	mov	r0, r5
    56aa:	4798      	blx	r3
		if (dev != NULL) {
    56ac:	b165      	cbz	r5, 56c8 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    56ae:	68eb      	ldr	r3, [r5, #12]
    56b0:	b130      	cbz	r0, 56c0 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    56b2:	2800      	cmp	r0, #0
    56b4:	bfb8      	it	lt
    56b6:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    56b8:	28ff      	cmp	r0, #255	; 0xff
    56ba:	bfa8      	it	ge
    56bc:	20ff      	movge	r0, #255	; 0xff
    56be:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    56c0:	785a      	ldrb	r2, [r3, #1]
    56c2:	f042 0201 	orr.w	r2, r2, #1
    56c6:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    56c8:	3408      	adds	r4, #8
    56ca:	e7e8      	b.n	569e <z_sys_init_run_level+0xe>
    56cc:	00009018 	.word	0x00009018

000056d0 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    56d0:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    56d2:	4605      	mov	r5, r0
    56d4:	b910      	cbnz	r0, 56dc <z_impl_device_get_binding+0xc>
		return NULL;
    56d6:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    56d8:	4620      	mov	r0, r4
    56da:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    56dc:	7803      	ldrb	r3, [r0, #0]
    56de:	2b00      	cmp	r3, #0
    56e0:	d0f9      	beq.n	56d6 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    56e2:	4a0f      	ldr	r2, [pc, #60]	; (5720 <z_impl_device_get_binding+0x50>)
    56e4:	4c0f      	ldr	r4, [pc, #60]	; (5724 <z_impl_device_get_binding+0x54>)
    56e6:	4616      	mov	r6, r2
    56e8:	4294      	cmp	r4, r2
    56ea:	d108      	bne.n	56fe <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    56ec:	4c0d      	ldr	r4, [pc, #52]	; (5724 <z_impl_device_get_binding+0x54>)
    56ee:	42b4      	cmp	r4, r6
    56f0:	d0f1      	beq.n	56d6 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    56f2:	4620      	mov	r0, r4
    56f4:	f003 f9e6 	bl	8ac4 <z_device_ready>
    56f8:	b950      	cbnz	r0, 5710 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    56fa:	3418      	adds	r4, #24
    56fc:	e7f7      	b.n	56ee <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    56fe:	4620      	mov	r0, r4
    5700:	f003 f9e0 	bl	8ac4 <z_device_ready>
    5704:	b110      	cbz	r0, 570c <z_impl_device_get_binding+0x3c>
    5706:	6823      	ldr	r3, [r4, #0]
    5708:	42ab      	cmp	r3, r5
    570a:	d0e5      	beq.n	56d8 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    570c:	3418      	adds	r4, #24
    570e:	e7eb      	b.n	56e8 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5710:	6821      	ldr	r1, [r4, #0]
    5712:	4628      	mov	r0, r5
    5714:	f002 fefa 	bl	850c <strcmp>
    5718:	2800      	cmp	r0, #0
    571a:	d1ee      	bne.n	56fa <z_impl_device_get_binding+0x2a>
    571c:	e7dc      	b.n	56d8 <z_impl_device_get_binding+0x8>
    571e:	bf00      	nop
    5720:	00008cfc 	.word	0x00008cfc
    5724:	00008c54 	.word	0x00008c54

00005728 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    572a:	4604      	mov	r4, r0
    572c:	460e      	mov	r6, r1
	__asm__ volatile(
    572e:	f04f 0320 	mov.w	r3, #32
    5732:	f3ef 8711 	mrs	r7, BASEPRI
    5736:	f383 8812 	msr	BASEPRI_MAX, r3
    573a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    573e:	f001 fec5 	bl	74cc <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5742:	4631      	mov	r1, r6
    5744:	4605      	mov	r5, r0
    5746:	4620      	mov	r0, r4
    5748:	f003 f917 	bl	897a <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    574c:	2c04      	cmp	r4, #4
    574e:	d10c      	bne.n	576a <z_fatal_error+0x42>
    5750:	490a      	ldr	r1, [pc, #40]	; (577c <z_fatal_error+0x54>)
    5752:	4a0b      	ldr	r2, [pc, #44]	; (5780 <z_fatal_error+0x58>)
    5754:	480b      	ldr	r0, [pc, #44]	; (5784 <z_fatal_error+0x5c>)
    5756:	238f      	movs	r3, #143	; 0x8f
    5758:	f002 fdda 	bl	8310 <printk>
    575c:	480a      	ldr	r0, [pc, #40]	; (5788 <z_fatal_error+0x60>)
    575e:	f002 fdd7 	bl	8310 <printk>
    5762:	4807      	ldr	r0, [pc, #28]	; (5780 <z_fatal_error+0x58>)
    5764:	218f      	movs	r1, #143	; 0x8f
    5766:	f002 fe9f 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    576a:	f387 8811 	msr	BASEPRI, r7
    576e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5772:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5778:	f7fd b9e2 	b.w	2b40 <z_impl_k_thread_abort>
    577c:	00009f37 	.word	0x00009f37
    5780:	00009f15 	.word	0x00009f15
    5784:	00009128 	.word	0x00009128
    5788:	00009f54 	.word	0x00009f54

0000578c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    578c:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    578e:	2300      	movs	r3, #0
{
    5790:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    5792:	2201      	movs	r2, #1
    5794:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5798:	220f      	movs	r2, #15
    579a:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    579e:	4c0d      	ldr	r4, [pc, #52]	; (57d4 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    57a0:	4a0d      	ldr	r2, [pc, #52]	; (57d8 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    57a2:	9301      	str	r3, [sp, #4]
    57a4:	490d      	ldr	r1, [pc, #52]	; (57dc <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    57a6:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    57a8:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    57ac:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    57b0:	f44f 75b0 	mov.w	r5, #352	; 0x160
    57b4:	9300      	str	r3, [sp, #0]
    57b6:	fb05 1100 	mla	r1, r5, r0, r1
    57ba:	4b09      	ldr	r3, [pc, #36]	; (57e0 <init_idle_thread+0x54>)
    57bc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    57c0:	4620      	mov	r0, r4
    57c2:	f000 f9b1 	bl	5b28 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    57c6:	7b63      	ldrb	r3, [r4, #13]
    57c8:	f023 0304 	bic.w	r3, r3, #4
    57cc:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    57ce:	b007      	add	sp, #28
    57d0:	bd30      	pop	{r4, r5, pc}
    57d2:	bf00      	nop
    57d4:	200004f0 	.word	0x200004f0
    57d8:	20000ca4 	.word	0x20000ca4
    57dc:	200027a0 	.word	0x200027a0
    57e0:	00005df9 	.word	0x00005df9

000057e4 <bg_thread_main>:
{
    57e4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    57e6:	4b0a      	ldr	r3, [pc, #40]	; (5810 <bg_thread_main+0x2c>)
    57e8:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    57ea:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    57ec:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    57ee:	f7ff ff4f 	bl	5690 <z_sys_init_run_level>
	boot_banner();
    57f2:	f002 fb79 	bl	7ee8 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    57f6:	2003      	movs	r0, #3
    57f8:	f7ff ff4a 	bl	5690 <z_sys_init_run_level>
	z_init_static_threads();
    57fc:	f000 fa46 	bl	5c8c <z_init_static_threads>
	main();
    5800:	f7fb fc92 	bl	1128 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5804:	4a03      	ldr	r2, [pc, #12]	; (5814 <bg_thread_main+0x30>)
    5806:	7b13      	ldrb	r3, [r2, #12]
    5808:	f023 0301 	bic.w	r3, r3, #1
    580c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    580e:	bd08      	pop	{r3, pc}
    5810:	20000d0c 	.word	0x20000d0c
    5814:	20000570 	.word	0x20000570

00005818 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5818:	4802      	ldr	r0, [pc, #8]	; (5824 <z_bss_zero+0xc>)
    581a:	4a03      	ldr	r2, [pc, #12]	; (5828 <z_bss_zero+0x10>)
    581c:	2100      	movs	r1, #0
    581e:	1a12      	subs	r2, r2, r0
    5820:	f002 be8b 	b.w	853a <memset>
    5824:	20000250 	.word	0x20000250
    5828:	20000ecc 	.word	0x20000ecc

0000582c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    582c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    582e:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5908 <z_cstart+0xdc>
    5832:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5834:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5838:	4d2d      	ldr	r5, [pc, #180]	; (58f0 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    583a:	4e2e      	ldr	r6, [pc, #184]	; (58f4 <z_cstart+0xc8>)
    583c:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    583e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 590c <z_cstart+0xe0>
    5842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5846:	2400      	movs	r4, #0
    5848:	616b      	str	r3, [r5, #20]
    584a:	23e0      	movs	r3, #224	; 0xe0
    584c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5850:	77ec      	strb	r4, [r5, #31]
    5852:	762c      	strb	r4, [r5, #24]
    5854:	766c      	strb	r4, [r5, #25]
    5856:	76ac      	strb	r4, [r5, #26]
    5858:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    585c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    585e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5862:	626b      	str	r3, [r5, #36]	; 0x24
    5864:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5868:	f7fd f8e0 	bl	2a2c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    586c:	f7fc fe40 	bl	24f0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5870:	f04f 33ff 	mov.w	r3, #4294967295
    5874:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5876:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5878:	f7fd fa3c 	bl	2cf4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    587c:	f7fd f972 	bl	2b64 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5880:	f240 1301 	movw	r3, #257	; 0x101
    5884:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5888:	ab06      	add	r3, sp, #24
    588a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    588c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5890:	f003 f917 	bl	8ac2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5894:	4620      	mov	r0, r4
    5896:	f7ff fefb 	bl	5690 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    589a:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    589c:	4d16      	ldr	r5, [pc, #88]	; (58f8 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    589e:	f7ff fef7 	bl	5690 <z_sys_init_run_level>
	z_sched_init();
    58a2:	f001 fc7d 	bl	71a0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    58a6:	4b15      	ldr	r3, [pc, #84]	; (58fc <z_cstart+0xd0>)
    58a8:	9305      	str	r3, [sp, #20]
    58aa:	2301      	movs	r3, #1
    58ac:	4914      	ldr	r1, [pc, #80]	; (5900 <z_cstart+0xd4>)
    58ae:	9400      	str	r4, [sp, #0]
    58b0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    58b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    58b8:	464b      	mov	r3, r9
    58ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
    58be:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    58c0:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    58c2:	f000 f931 	bl	5b28 <z_setup_new_thread>
    58c6:	7b6a      	ldrb	r2, [r5, #13]
    58c8:	f022 0204 	bic.w	r2, r2, #4
    58cc:	736a      	strb	r2, [r5, #13]
    58ce:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    58d0:	4628      	mov	r0, r5
    58d2:	f001 f865 	bl	69a0 <z_ready_thread>
		init_idle_thread(i);
    58d6:	4620      	mov	r0, r4
    58d8:	f7ff ff58 	bl	578c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    58dc:	4b09      	ldr	r3, [pc, #36]	; (5904 <z_cstart+0xd8>)
    58de:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    58e0:	464a      	mov	r2, r9
    58e2:	4639      	mov	r1, r7
    58e4:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    58e6:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    58e8:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    58ec:	f7fc ff1a 	bl	2724 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    58f0:	e000ed00 	.word	0xe000ed00
    58f4:	20000ca4 	.word	0x20000ca4
    58f8:	20000570 	.word	0x20000570
    58fc:	00009f89 	.word	0x00009f89
    5900:	20002380 	.word	0x20002380
    5904:	200004f0 	.word	0x200004f0
    5908:	20003120 	.word	0x20003120
    590c:	000057e5 	.word	0x000057e5

00005910 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    5910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5914:	4d16      	ldr	r5, [pc, #88]	; (5970 <init_mem_slab_module+0x60>)
    5916:	4c17      	ldr	r4, [pc, #92]	; (5974 <init_mem_slab_module+0x64>)
    5918:	4e17      	ldr	r6, [pc, #92]	; (5978 <init_mem_slab_module+0x68>)
    591a:	46a8      	mov	r8, r5
    591c:	42ac      	cmp	r4, r5
    591e:	d90c      	bls.n	593a <init_mem_slab_module+0x2a>
    5920:	4916      	ldr	r1, [pc, #88]	; (597c <init_mem_slab_module+0x6c>)
    5922:	4817      	ldr	r0, [pc, #92]	; (5980 <init_mem_slab_module+0x70>)
    5924:	233c      	movs	r3, #60	; 0x3c
    5926:	4632      	mov	r2, r6
    5928:	f002 fcf2 	bl	8310 <printk>
    592c:	4815      	ldr	r0, [pc, #84]	; (5984 <init_mem_slab_module+0x74>)
    592e:	f002 fcef 	bl	8310 <printk>
    5932:	213c      	movs	r1, #60	; 0x3c
    5934:	4630      	mov	r0, r6
    5936:	f002 fdb7 	bl	84a8 <assert_post_action>
    593a:	4544      	cmp	r4, r8
    593c:	d302      	bcc.n	5944 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    593e:	2000      	movs	r0, #0
	return rc;
}
    5940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5944:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5948:	ea41 0302 	orr.w	r3, r1, r2
    594c:	f013 0303 	ands.w	r3, r3, #3
    5950:	d10b      	bne.n	596a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    5952:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5954:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5956:	4283      	cmp	r3, r0
    5958:	d101      	bne.n	595e <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    595a:	3420      	adds	r4, #32
    595c:	e7de      	b.n	591c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    595e:	69a7      	ldr	r7, [r4, #24]
    5960:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5962:	3301      	adds	r3, #1
		slab->free_list = p;
    5964:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    5966:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5968:	e7f5      	b.n	5956 <init_mem_slab_module+0x46>
		return -EINVAL;
    596a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    596e:	e7e7      	b.n	5940 <init_mem_slab_module+0x30>
    5970:	20000200 	.word	0x20000200
    5974:	20000200 	.word	0x20000200
    5978:	00009f8e 	.word	0x00009f8e
    597c:	00009fb3 	.word	0x00009fb3
    5980:	00009128 	.word	0x00009128
    5984:	00009fd0 	.word	0x00009fd0

00005988 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    598c:	4604      	mov	r4, r0
    598e:	460e      	mov	r6, r1
    5990:	4690      	mov	r8, r2
    5992:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5994:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5998:	f04f 0320 	mov.w	r3, #32
    599c:	f3ef 8711 	mrs	r7, BASEPRI
    59a0:	f383 8812 	msr	BASEPRI_MAX, r3
    59a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    59a8:	4628      	mov	r0, r5
    59aa:	f000 f9ff 	bl	5dac <z_spin_lock_valid>
    59ae:	b968      	cbnz	r0, 59cc <k_mem_slab_alloc+0x44>
    59b0:	4a24      	ldr	r2, [pc, #144]	; (5a44 <k_mem_slab_alloc+0xbc>)
    59b2:	4925      	ldr	r1, [pc, #148]	; (5a48 <k_mem_slab_alloc+0xc0>)
    59b4:	4825      	ldr	r0, [pc, #148]	; (5a4c <k_mem_slab_alloc+0xc4>)
    59b6:	2381      	movs	r3, #129	; 0x81
    59b8:	f002 fcaa 	bl	8310 <printk>
    59bc:	4824      	ldr	r0, [pc, #144]	; (5a50 <k_mem_slab_alloc+0xc8>)
    59be:	4629      	mov	r1, r5
    59c0:	f002 fca6 	bl	8310 <printk>
    59c4:	481f      	ldr	r0, [pc, #124]	; (5a44 <k_mem_slab_alloc+0xbc>)
    59c6:	2181      	movs	r1, #129	; 0x81
    59c8:	f002 fd6e 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    59cc:	4628      	mov	r0, r5
    59ce:	f000 fa0b 	bl	5de8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    59d2:	69a3      	ldr	r3, [r4, #24]
    59d4:	b1eb      	cbz	r3, 5a12 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    59d6:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    59d8:	681b      	ldr	r3, [r3, #0]
    59da:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    59dc:	69e3      	ldr	r3, [r4, #28]
    59de:	3301      	adds	r3, #1
    59e0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    59e2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    59e4:	4628      	mov	r0, r5
    59e6:	f000 f9ef 	bl	5dc8 <z_spin_unlock_valid>
    59ea:	b968      	cbnz	r0, 5a08 <k_mem_slab_alloc+0x80>
    59ec:	4a15      	ldr	r2, [pc, #84]	; (5a44 <k_mem_slab_alloc+0xbc>)
    59ee:	4919      	ldr	r1, [pc, #100]	; (5a54 <k_mem_slab_alloc+0xcc>)
    59f0:	4816      	ldr	r0, [pc, #88]	; (5a4c <k_mem_slab_alloc+0xc4>)
    59f2:	23ac      	movs	r3, #172	; 0xac
    59f4:	f002 fc8c 	bl	8310 <printk>
    59f8:	4817      	ldr	r0, [pc, #92]	; (5a58 <k_mem_slab_alloc+0xd0>)
    59fa:	4629      	mov	r1, r5
    59fc:	f002 fc88 	bl	8310 <printk>
    5a00:	4810      	ldr	r0, [pc, #64]	; (5a44 <k_mem_slab_alloc+0xbc>)
    5a02:	21ac      	movs	r1, #172	; 0xac
    5a04:	f002 fd50 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    5a08:	f387 8811 	msr	BASEPRI, r7
    5a0c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5a10:	e013      	b.n	5a3a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5a12:	ea58 0209 	orrs.w	r2, r8, r9
    5a16:	d103      	bne.n	5a20 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5a18:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5a1a:	f06f 040b 	mvn.w	r4, #11
    5a1e:	e7e1      	b.n	59e4 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5a20:	4622      	mov	r2, r4
    5a22:	e9cd 8900 	strd	r8, r9, [sp]
    5a26:	4639      	mov	r1, r7
    5a28:	4628      	mov	r0, r5
    5a2a:	f001 f96b 	bl	6d04 <z_pend_curr>
		if (result == 0) {
    5a2e:	4604      	mov	r4, r0
    5a30:	b918      	cbnz	r0, 5a3a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    5a32:	4b0a      	ldr	r3, [pc, #40]	; (5a5c <k_mem_slab_alloc+0xd4>)
    5a34:	689b      	ldr	r3, [r3, #8]
    5a36:	695b      	ldr	r3, [r3, #20]
    5a38:	6033      	str	r3, [r6, #0]
}
    5a3a:	4620      	mov	r0, r4
    5a3c:	b003      	add	sp, #12
    5a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5a42:	bf00      	nop
    5a44:	0000966e 	.word	0x0000966e
    5a48:	000096c0 	.word	0x000096c0
    5a4c:	00009128 	.word	0x00009128
    5a50:	000096d5 	.word	0x000096d5
    5a54:	00009694 	.word	0x00009694
    5a58:	000096ab 	.word	0x000096ab
    5a5c:	20000ca4 	.word	0x20000ca4

00005a60 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a64:	4604      	mov	r4, r0
    5a66:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5a68:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5a6c:	f04f 0320 	mov.w	r3, #32
    5a70:	f3ef 8711 	mrs	r7, BASEPRI
    5a74:	f383 8812 	msr	BASEPRI_MAX, r3
    5a78:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5a7c:	4628      	mov	r0, r5
    5a7e:	f000 f995 	bl	5dac <z_spin_lock_valid>
    5a82:	b968      	cbnz	r0, 5aa0 <k_mem_slab_free+0x40>
    5a84:	4a22      	ldr	r2, [pc, #136]	; (5b10 <k_mem_slab_free+0xb0>)
    5a86:	4923      	ldr	r1, [pc, #140]	; (5b14 <k_mem_slab_free+0xb4>)
    5a88:	4823      	ldr	r0, [pc, #140]	; (5b18 <k_mem_slab_free+0xb8>)
    5a8a:	2381      	movs	r3, #129	; 0x81
    5a8c:	f002 fc40 	bl	8310 <printk>
    5a90:	4822      	ldr	r0, [pc, #136]	; (5b1c <k_mem_slab_free+0xbc>)
    5a92:	4629      	mov	r1, r5
    5a94:	f002 fc3c 	bl	8310 <printk>
    5a98:	481d      	ldr	r0, [pc, #116]	; (5b10 <k_mem_slab_free+0xb0>)
    5a9a:	2181      	movs	r1, #129	; 0x81
    5a9c:	f002 fd04 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5aa0:	4628      	mov	r0, r5
    5aa2:	f000 f9a1 	bl	5de8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5aa6:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5aaa:	f1b8 0f00 	cmp.w	r8, #0
    5aae:	d10f      	bne.n	5ad0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5ab0:	4620      	mov	r0, r4
    5ab2:	f001 fb25 	bl	7100 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5ab6:	b158      	cbz	r0, 5ad0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5ab8:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5aba:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5abc:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    5ac0:	f000 ff6e 	bl	69a0 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5ac4:	4639      	mov	r1, r7
    5ac6:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5acc:	f000 bd14 	b.w	64f8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    5ad0:	6833      	ldr	r3, [r6, #0]
    5ad2:	69a2      	ldr	r2, [r4, #24]
    5ad4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5ad6:	6833      	ldr	r3, [r6, #0]
    5ad8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5ada:	69e3      	ldr	r3, [r4, #28]
    5adc:	3b01      	subs	r3, #1
    5ade:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ae0:	4628      	mov	r0, r5
    5ae2:	f000 f971 	bl	5dc8 <z_spin_unlock_valid>
    5ae6:	b968      	cbnz	r0, 5b04 <k_mem_slab_free+0xa4>
    5ae8:	4a09      	ldr	r2, [pc, #36]	; (5b10 <k_mem_slab_free+0xb0>)
    5aea:	490d      	ldr	r1, [pc, #52]	; (5b20 <k_mem_slab_free+0xc0>)
    5aec:	480a      	ldr	r0, [pc, #40]	; (5b18 <k_mem_slab_free+0xb8>)
    5aee:	23ac      	movs	r3, #172	; 0xac
    5af0:	f002 fc0e 	bl	8310 <printk>
    5af4:	480b      	ldr	r0, [pc, #44]	; (5b24 <k_mem_slab_free+0xc4>)
    5af6:	4629      	mov	r1, r5
    5af8:	f002 fc0a 	bl	8310 <printk>
    5afc:	4804      	ldr	r0, [pc, #16]	; (5b10 <k_mem_slab_free+0xb0>)
    5afe:	21ac      	movs	r1, #172	; 0xac
    5b00:	f002 fcd2 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    5b04:	f387 8811 	msr	BASEPRI, r7
    5b08:	f3bf 8f6f 	isb	sy
}
    5b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5b10:	0000966e 	.word	0x0000966e
    5b14:	000096c0 	.word	0x000096c0
    5b18:	00009128 	.word	0x00009128
    5b1c:	000096d5 	.word	0x000096d5
    5b20:	00009694 	.word	0x00009694
    5b24:	000096ab 	.word	0x000096ab

00005b28 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5b2c:	b085      	sub	sp, #20
    5b2e:	4604      	mov	r4, r0
    5b30:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    5b34:	f1b8 0f0f 	cmp.w	r8, #15
{
    5b38:	460f      	mov	r7, r1
    5b3a:	4615      	mov	r5, r2
    5b3c:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    5b3e:	d132      	bne.n	5ba6 <z_setup_new_thread+0x7e>
    5b40:	4b25      	ldr	r3, [pc, #148]	; (5bd8 <z_setup_new_thread+0xb0>)
    5b42:	4599      	cmp	r9, r3
    5b44:	d133      	bne.n	5bae <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5b46:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5b4a:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    5b4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5b50:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5b52:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    5b54:	2304      	movs	r3, #4
    5b56:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5b58:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5b5c:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    5b60:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    5b66:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b6a:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5b6c:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5b72:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    5b74:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b78:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    5b7a:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b7c:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5b7e:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    5b82:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    5b84:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    5b86:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5b88:	4642      	mov	r2, r8
    5b8a:	4639      	mov	r1, r7
    5b8c:	4620      	mov	r0, r4
    5b8e:	f7fc fd93 	bl	26b8 <arch_new_thread>
	if (!_current) {
    5b92:	4b12      	ldr	r3, [pc, #72]	; (5bdc <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    5b94:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    5b96:	689b      	ldr	r3, [r3, #8]
    5b98:	b103      	cbz	r3, 5b9c <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    5b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5b9c:	6723      	str	r3, [r4, #112]	; 0x70
}
    5b9e:	4640      	mov	r0, r8
    5ba0:	b005      	add	sp, #20
    5ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    5ba6:	f108 0310 	add.w	r3, r8, #16
    5baa:	2b1e      	cmp	r3, #30
    5bac:	d9cb      	bls.n	5b46 <z_setup_new_thread+0x1e>
    5bae:	4a0c      	ldr	r2, [pc, #48]	; (5be0 <z_setup_new_thread+0xb8>)
    5bb0:	490c      	ldr	r1, [pc, #48]	; (5be4 <z_setup_new_thread+0xbc>)
    5bb2:	480d      	ldr	r0, [pc, #52]	; (5be8 <z_setup_new_thread+0xc0>)
    5bb4:	f240 13ff 	movw	r3, #511	; 0x1ff
    5bb8:	f002 fbaa 	bl	8310 <printk>
    5bbc:	4641      	mov	r1, r8
    5bbe:	480b      	ldr	r0, [pc, #44]	; (5bec <z_setup_new_thread+0xc4>)
    5bc0:	f06f 030f 	mvn.w	r3, #15
    5bc4:	220e      	movs	r2, #14
    5bc6:	f002 fba3 	bl	8310 <printk>
    5bca:	4805      	ldr	r0, [pc, #20]	; (5be0 <z_setup_new_thread+0xb8>)
    5bcc:	f240 11ff 	movw	r1, #511	; 0x1ff
    5bd0:	f002 fc6a 	bl	84a8 <assert_post_action>
    5bd4:	e7b7      	b.n	5b46 <z_setup_new_thread+0x1e>
    5bd6:	bf00      	nop
    5bd8:	00005df9 	.word	0x00005df9
    5bdc:	20000ca4 	.word	0x20000ca4
    5be0:	00009fef 	.word	0x00009fef
    5be4:	0000a012 	.word	0x0000a012
    5be8:	00009128 	.word	0x00009128
    5bec:	0000a092 	.word	0x0000a092

00005bf0 <z_impl_k_thread_create>:
{
    5bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5bf4:	b087      	sub	sp, #28
    5bf6:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    5bfa:	4604      	mov	r4, r0
    5bfc:	460d      	mov	r5, r1
    5bfe:	4690      	mov	r8, r2
    5c00:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5c02:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    5c06:	b173      	cbz	r3, 5c26 <z_impl_k_thread_create+0x36>
    5c08:	491b      	ldr	r1, [pc, #108]	; (5c78 <z_impl_k_thread_create+0x88>)
    5c0a:	4a1c      	ldr	r2, [pc, #112]	; (5c7c <z_impl_k_thread_create+0x8c>)
    5c0c:	481c      	ldr	r0, [pc, #112]	; (5c80 <z_impl_k_thread_create+0x90>)
    5c0e:	f44f 731a 	mov.w	r3, #616	; 0x268
    5c12:	f002 fb7d 	bl	8310 <printk>
    5c16:	481b      	ldr	r0, [pc, #108]	; (5c84 <z_impl_k_thread_create+0x94>)
    5c18:	f002 fb7a 	bl	8310 <printk>
    5c1c:	4817      	ldr	r0, [pc, #92]	; (5c7c <z_impl_k_thread_create+0x8c>)
    5c1e:	f44f 711a 	mov.w	r1, #616	; 0x268
    5c22:	f002 fc41 	bl	84a8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5c26:	2300      	movs	r3, #0
    5c28:	9305      	str	r3, [sp, #20]
    5c2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5c2c:	9304      	str	r3, [sp, #16]
    5c2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5c30:	9303      	str	r3, [sp, #12]
    5c32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5c34:	9302      	str	r3, [sp, #8]
    5c36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5c38:	9301      	str	r3, [sp, #4]
    5c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5c3c:	9300      	str	r3, [sp, #0]
    5c3e:	4642      	mov	r2, r8
    5c40:	464b      	mov	r3, r9
    5c42:	4629      	mov	r1, r5
    5c44:	4620      	mov	r0, r4
    5c46:	f7ff ff6f 	bl	5b28 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5c4a:	1c7b      	adds	r3, r7, #1
    5c4c:	bf08      	it	eq
    5c4e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    5c52:	d005      	beq.n	5c60 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5c54:	ea56 0307 	orrs.w	r3, r6, r7
    5c58:	d106      	bne.n	5c68 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    5c5a:	4620      	mov	r0, r4
    5c5c:	f000 fee8 	bl	6a30 <z_sched_start>
}
    5c60:	4620      	mov	r0, r4
    5c62:	b007      	add	sp, #28
    5c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5c68:	4907      	ldr	r1, [pc, #28]	; (5c88 <z_impl_k_thread_create+0x98>)
    5c6a:	4632      	mov	r2, r6
    5c6c:	463b      	mov	r3, r7
    5c6e:	f104 0018 	add.w	r0, r4, #24
    5c72:	f001 fd4f 	bl	7714 <z_add_timeout>
    5c76:	e7f3      	b.n	5c60 <z_impl_k_thread_create+0x70>
    5c78:	0000a0c3 	.word	0x0000a0c3
    5c7c:	00009fef 	.word	0x00009fef
    5c80:	00009128 	.word	0x00009128
    5c84:	0000a0d5 	.word	0x0000a0d5
    5c88:	00006ad9 	.word	0x00006ad9

00005c8c <z_init_static_threads>:
{
    5c8c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    5c90:	4f3f      	ldr	r7, [pc, #252]	; (5d90 <z_init_static_threads+0x104>)
    5c92:	4d40      	ldr	r5, [pc, #256]	; (5d94 <z_init_static_threads+0x108>)
    5c94:	f8df 810c 	ldr.w	r8, [pc, #268]	; 5da4 <z_init_static_threads+0x118>
{
    5c98:	b086      	sub	sp, #24
    5c9a:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    5c9c:	42bd      	cmp	r5, r7
    5c9e:	d90e      	bls.n	5cbe <z_init_static_threads+0x32>
    5ca0:	493d      	ldr	r1, [pc, #244]	; (5d98 <z_init_static_threads+0x10c>)
    5ca2:	483e      	ldr	r0, [pc, #248]	; (5d9c <z_init_static_threads+0x110>)
    5ca4:	f240 23cf 	movw	r3, #719	; 0x2cf
    5ca8:	4642      	mov	r2, r8
    5caa:	f002 fb31 	bl	8310 <printk>
    5cae:	483c      	ldr	r0, [pc, #240]	; (5da0 <z_init_static_threads+0x114>)
    5cb0:	f002 fb2e 	bl	8310 <printk>
    5cb4:	f240 21cf 	movw	r1, #719	; 0x2cf
    5cb8:	4640      	mov	r0, r8
    5cba:	f002 fbf5 	bl	84a8 <assert_post_action>
    5cbe:	42b5      	cmp	r5, r6
    5cc0:	f105 0430 	add.w	r4, r5, #48	; 0x30
    5cc4:	d31f      	bcc.n	5d06 <z_init_static_threads+0x7a>
	k_sched_lock();
    5cc6:	f000 fc5b 	bl	6580 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5cca:	4c32      	ldr	r4, [pc, #200]	; (5d94 <z_init_static_threads+0x108>)
    5ccc:	4d35      	ldr	r5, [pc, #212]	; (5da4 <z_init_static_threads+0x118>)
    5cce:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 5d98 <z_init_static_threads+0x10c>
    5cd2:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 5d9c <z_init_static_threads+0x110>
    5cd6:	42b4      	cmp	r4, r6
    5cd8:	d90e      	bls.n	5cf8 <z_init_static_threads+0x6c>
    5cda:	4641      	mov	r1, r8
    5cdc:	f240 23ee 	movw	r3, #750	; 0x2ee
    5ce0:	462a      	mov	r2, r5
    5ce2:	4648      	mov	r0, r9
    5ce4:	f002 fb14 	bl	8310 <printk>
    5ce8:	482d      	ldr	r0, [pc, #180]	; (5da0 <z_init_static_threads+0x114>)
    5cea:	f002 fb11 	bl	8310 <printk>
    5cee:	f240 21ee 	movw	r1, #750	; 0x2ee
    5cf2:	4628      	mov	r0, r5
    5cf4:	f002 fbd8 	bl	84a8 <assert_post_action>
    5cf8:	42b4      	cmp	r4, r6
    5cfa:	d321      	bcc.n	5d40 <z_init_static_threads+0xb4>
}
    5cfc:	b006      	add	sp, #24
    5cfe:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    5d02:	f001 b935 	b.w	6f70 <k_sched_unlock>
		z_setup_new_thread(
    5d06:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5d0a:	9305      	str	r3, [sp, #20]
    5d0c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5d10:	9304      	str	r3, [sp, #16]
    5d12:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5d16:	9303      	str	r3, [sp, #12]
    5d18:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5d1c:	9302      	str	r3, [sp, #8]
    5d1e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5d22:	9301      	str	r3, [sp, #4]
    5d24:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5d28:	9300      	str	r3, [sp, #0]
    5d2a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5d2e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5d32:	f7ff fef9 	bl	5b28 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5d36:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5d3a:	655d      	str	r5, [r3, #84]	; 0x54
    5d3c:	4625      	mov	r5, r4
    5d3e:	e7ad      	b.n	5c9c <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5d40:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5d42:	1c4b      	adds	r3, r1, #1
    5d44:	d014      	beq.n	5d70 <z_init_static_threads+0xe4>
    5d46:	f240 32e7 	movw	r2, #999	; 0x3e7
    5d4a:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    5d4c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    5d50:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5d54:	4693      	mov	fp, r2
    5d56:	469c      	mov	ip, r3
    5d58:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5d5c:	459c      	cmp	ip, r3
    5d5e:	bf08      	it	eq
    5d60:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    5d62:	6827      	ldr	r7, [r4, #0]
    5d64:	4658      	mov	r0, fp
    5d66:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5d68:	d104      	bne.n	5d74 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    5d6a:	4638      	mov	r0, r7
    5d6c:	f000 fe60 	bl	6a30 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5d70:	3430      	adds	r4, #48	; 0x30
    5d72:	e7b0      	b.n	5cd6 <z_init_static_threads+0x4a>
    5d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d78:	2300      	movs	r3, #0
    5d7a:	f7fa fcdb 	bl	734 <__aeabi_uldivmod>
    5d7e:	4602      	mov	r2, r0
    5d80:	460b      	mov	r3, r1
    5d82:	f107 0018 	add.w	r0, r7, #24
    5d86:	4908      	ldr	r1, [pc, #32]	; (5da8 <z_init_static_threads+0x11c>)
    5d88:	f001 fcc4 	bl	7714 <z_add_timeout>
    5d8c:	e7f0      	b.n	5d70 <z_init_static_threads+0xe4>
    5d8e:	bf00      	nop
    5d90:	20000200 	.word	0x20000200
    5d94:	20000200 	.word	0x20000200
    5d98:	0000a0fa 	.word	0x0000a0fa
    5d9c:	00009128 	.word	0x00009128
    5da0:	00009fd0 	.word	0x00009fd0
    5da4:	00009fef 	.word	0x00009fef
    5da8:	00006ad9 	.word	0x00006ad9

00005dac <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    5dac:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    5dae:	b138      	cbz	r0, 5dc0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    5db0:	4b04      	ldr	r3, [pc, #16]	; (5dc4 <z_spin_lock_valid+0x18>)
    5db2:	7d1b      	ldrb	r3, [r3, #20]
    5db4:	f000 0003 	and.w	r0, r0, #3
    5db8:	1ac0      	subs	r0, r0, r3
    5dba:	bf18      	it	ne
    5dbc:	2001      	movne	r0, #1
    5dbe:	4770      	bx	lr
			return false;
		}
	}
	return true;
    5dc0:	2001      	movs	r0, #1
}
    5dc2:	4770      	bx	lr
    5dc4:	20000ca4 	.word	0x20000ca4

00005dc8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5dc8:	4906      	ldr	r1, [pc, #24]	; (5de4 <z_spin_unlock_valid+0x1c>)
{
    5dca:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    5dcc:	688a      	ldr	r2, [r1, #8]
    5dce:	7d08      	ldrb	r0, [r1, #20]
    5dd0:	6819      	ldr	r1, [r3, #0]
    5dd2:	4302      	orrs	r2, r0
    5dd4:	4291      	cmp	r1, r2
    5dd6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    5dda:	bf04      	itt	eq
    5ddc:	6018      	streq	r0, [r3, #0]
	return true;
    5dde:	2001      	moveq	r0, #1
}
    5de0:	4770      	bx	lr
    5de2:	bf00      	nop
    5de4:	20000ca4 	.word	0x20000ca4

00005de8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    5de8:	4a02      	ldr	r2, [pc, #8]	; (5df4 <z_spin_lock_set_owner+0xc>)
    5dea:	7d11      	ldrb	r1, [r2, #20]
    5dec:	6893      	ldr	r3, [r2, #8]
    5dee:	430b      	orrs	r3, r1
    5df0:	6003      	str	r3, [r0, #0]
}
    5df2:	4770      	bx	lr
    5df4:	20000ca4 	.word	0x20000ca4

00005df8 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5df8:	4c11      	ldr	r4, [pc, #68]	; (5e40 <idle+0x48>)
    5dfa:	68a2      	ldr	r2, [r4, #8]
    5dfc:	f992 200e 	ldrsb.w	r2, [r2, #14]
    5e00:	2a00      	cmp	r2, #0
{
    5e02:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5e04:	da09      	bge.n	5e1a <idle+0x22>
    5e06:	490f      	ldr	r1, [pc, #60]	; (5e44 <idle+0x4c>)
    5e08:	480f      	ldr	r0, [pc, #60]	; (5e48 <idle+0x50>)
    5e0a:	4a10      	ldr	r2, [pc, #64]	; (5e4c <idle+0x54>)
    5e0c:	2327      	movs	r3, #39	; 0x27
    5e0e:	f002 fa7f 	bl	8310 <printk>
    5e12:	480e      	ldr	r0, [pc, #56]	; (5e4c <idle+0x54>)
    5e14:	2127      	movs	r1, #39	; 0x27
    5e16:	f002 fb47 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    5e1a:	f04f 0220 	mov.w	r2, #32
    5e1e:	f3ef 8311 	mrs	r3, BASEPRI
    5e22:	f382 8812 	msr	BASEPRI_MAX, r2
    5e26:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5e2a:	f001 fd95 	bl	7958 <z_get_next_timeout_expiry>
    5e2e:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    5e30:	f7fc fa14 	bl	225c <pm_system_suspend>
    5e34:	2800      	cmp	r0, #0
    5e36:	d1f0      	bne.n	5e1a <idle+0x22>
	arch_cpu_idle();
    5e38:	f7fc fb60 	bl	24fc <arch_cpu_idle>
}
    5e3c:	e7ed      	b.n	5e1a <idle+0x22>
    5e3e:	bf00      	nop
    5e40:	20000ca4 	.word	0x20000ca4
    5e44:	0000a148 	.word	0x0000a148
    5e48:	00009128 	.word	0x00009128
    5e4c:	0000a127 	.word	0x0000a127

00005e50 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5e50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5e54:	4604      	mov	r4, r0
    5e56:	4616      	mov	r6, r2
    5e58:	461f      	mov	r7, r3
    5e5a:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5e5e:	b163      	cbz	r3, 5e7a <z_impl_k_mutex_lock+0x2a>
    5e60:	4970      	ldr	r1, [pc, #448]	; (6024 <z_impl_k_mutex_lock+0x1d4>)
    5e62:	4a71      	ldr	r2, [pc, #452]	; (6028 <z_impl_k_mutex_lock+0x1d8>)
    5e64:	4871      	ldr	r0, [pc, #452]	; (602c <z_impl_k_mutex_lock+0x1dc>)
    5e66:	2365      	movs	r3, #101	; 0x65
    5e68:	f002 fa52 	bl	8310 <printk>
    5e6c:	4870      	ldr	r0, [pc, #448]	; (6030 <z_impl_k_mutex_lock+0x1e0>)
    5e6e:	f002 fa4f 	bl	8310 <printk>
    5e72:	486d      	ldr	r0, [pc, #436]	; (6028 <z_impl_k_mutex_lock+0x1d8>)
    5e74:	2165      	movs	r1, #101	; 0x65
    5e76:	f002 fb17 	bl	84a8 <assert_post_action>
    5e7a:	f04f 0320 	mov.w	r3, #32
    5e7e:	f3ef 8811 	mrs	r8, BASEPRI
    5e82:	f383 8812 	msr	BASEPRI_MAX, r3
    5e86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5e8a:	486a      	ldr	r0, [pc, #424]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5e8c:	f7ff ff8e 	bl	5dac <z_spin_lock_valid>
    5e90:	b968      	cbnz	r0, 5eae <z_impl_k_mutex_lock+0x5e>
    5e92:	4a69      	ldr	r2, [pc, #420]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5e94:	4969      	ldr	r1, [pc, #420]	; (603c <z_impl_k_mutex_lock+0x1ec>)
    5e96:	4865      	ldr	r0, [pc, #404]	; (602c <z_impl_k_mutex_lock+0x1dc>)
    5e98:	2381      	movs	r3, #129	; 0x81
    5e9a:	f002 fa39 	bl	8310 <printk>
    5e9e:	4965      	ldr	r1, [pc, #404]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5ea0:	4867      	ldr	r0, [pc, #412]	; (6040 <z_impl_k_mutex_lock+0x1f0>)
    5ea2:	f002 fa35 	bl	8310 <printk>
    5ea6:	4864      	ldr	r0, [pc, #400]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5ea8:	2181      	movs	r1, #129	; 0x81
    5eaa:	f002 fafd 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5eae:	4861      	ldr	r0, [pc, #388]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5eb0:	f7ff ff9a 	bl	5de8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5eb4:	68e3      	ldr	r3, [r4, #12]
    5eb6:	4a63      	ldr	r2, [pc, #396]	; (6044 <z_impl_k_mutex_lock+0x1f4>)
    5eb8:	b1fb      	cbz	r3, 5efa <z_impl_k_mutex_lock+0xaa>
    5eba:	68a0      	ldr	r0, [r4, #8]
    5ebc:	6891      	ldr	r1, [r2, #8]
    5ebe:	4288      	cmp	r0, r1
    5ec0:	d03d      	beq.n	5f3e <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5ec2:	ea56 0307 	orrs.w	r3, r6, r7
    5ec6:	d13c      	bne.n	5f42 <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ec8:	485a      	ldr	r0, [pc, #360]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5eca:	f7ff ff7d 	bl	5dc8 <z_spin_unlock_valid>
    5ece:	b968      	cbnz	r0, 5eec <z_impl_k_mutex_lock+0x9c>
    5ed0:	4a59      	ldr	r2, [pc, #356]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5ed2:	495d      	ldr	r1, [pc, #372]	; (6048 <z_impl_k_mutex_lock+0x1f8>)
    5ed4:	4855      	ldr	r0, [pc, #340]	; (602c <z_impl_k_mutex_lock+0x1dc>)
    5ed6:	23ac      	movs	r3, #172	; 0xac
    5ed8:	f002 fa1a 	bl	8310 <printk>
    5edc:	4955      	ldr	r1, [pc, #340]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5ede:	485b      	ldr	r0, [pc, #364]	; (604c <z_impl_k_mutex_lock+0x1fc>)
    5ee0:	f002 fa16 	bl	8310 <printk>
    5ee4:	4854      	ldr	r0, [pc, #336]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5ee6:	21ac      	movs	r1, #172	; 0xac
    5ee8:	f002 fade 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    5eec:	f388 8811 	msr	BASEPRI, r8
    5ef0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5ef4:	f06f 000f 	mvn.w	r0, #15
    5ef8:	e01e      	b.n	5f38 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    5efa:	6891      	ldr	r1, [r2, #8]
    5efc:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5f00:	484c      	ldr	r0, [pc, #304]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5f02:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5f04:	3301      	adds	r3, #1
    5f06:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5f08:	6893      	ldr	r3, [r2, #8]
    5f0a:	60a3      	str	r3, [r4, #8]
    5f0c:	f7ff ff5c 	bl	5dc8 <z_spin_unlock_valid>
    5f10:	b968      	cbnz	r0, 5f2e <z_impl_k_mutex_lock+0xde>
    5f12:	4a49      	ldr	r2, [pc, #292]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5f14:	494c      	ldr	r1, [pc, #304]	; (6048 <z_impl_k_mutex_lock+0x1f8>)
    5f16:	4845      	ldr	r0, [pc, #276]	; (602c <z_impl_k_mutex_lock+0x1dc>)
    5f18:	23ac      	movs	r3, #172	; 0xac
    5f1a:	f002 f9f9 	bl	8310 <printk>
    5f1e:	4945      	ldr	r1, [pc, #276]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5f20:	484a      	ldr	r0, [pc, #296]	; (604c <z_impl_k_mutex_lock+0x1fc>)
    5f22:	f002 f9f5 	bl	8310 <printk>
    5f26:	4844      	ldr	r0, [pc, #272]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5f28:	21ac      	movs	r1, #172	; 0xac
    5f2a:	f002 fabd 	bl	84a8 <assert_post_action>
    5f2e:	f388 8811 	msr	BASEPRI, r8
    5f32:	f3bf 8f6f 	isb	sy
		return 0;
    5f36:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5f38:	b002      	add	sp, #8
    5f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5f3e:	6921      	ldr	r1, [r4, #16]
    5f40:	e7de      	b.n	5f00 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5f42:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5f46:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5f4a:	4299      	cmp	r1, r3
    5f4c:	bfa8      	it	ge
    5f4e:	4619      	movge	r1, r3
    5f50:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5f54:	4291      	cmp	r1, r2
    5f56:	bfb8      	it	lt
    5f58:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5f5a:	428b      	cmp	r3, r1
    5f5c:	dd44      	ble.n	5fe8 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    5f5e:	f000 ff01 	bl	6d64 <z_set_prio>
    5f62:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5f64:	e9cd 6700 	strd	r6, r7, [sp]
    5f68:	4832      	ldr	r0, [pc, #200]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5f6a:	4622      	mov	r2, r4
    5f6c:	4641      	mov	r1, r8
    5f6e:	f000 fec9 	bl	6d04 <z_pend_curr>
	if (got_mutex == 0) {
    5f72:	2800      	cmp	r0, #0
    5f74:	d0e0      	beq.n	5f38 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    5f76:	f04f 0320 	mov.w	r3, #32
    5f7a:	f3ef 8611 	mrs	r6, BASEPRI
    5f7e:	f383 8812 	msr	BASEPRI_MAX, r3
    5f82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5f86:	482b      	ldr	r0, [pc, #172]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5f88:	f7ff ff10 	bl	5dac <z_spin_lock_valid>
    5f8c:	b968      	cbnz	r0, 5faa <z_impl_k_mutex_lock+0x15a>
    5f8e:	4a2a      	ldr	r2, [pc, #168]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5f90:	492a      	ldr	r1, [pc, #168]	; (603c <z_impl_k_mutex_lock+0x1ec>)
    5f92:	4826      	ldr	r0, [pc, #152]	; (602c <z_impl_k_mutex_lock+0x1dc>)
    5f94:	2381      	movs	r3, #129	; 0x81
    5f96:	f002 f9bb 	bl	8310 <printk>
    5f9a:	4926      	ldr	r1, [pc, #152]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5f9c:	4828      	ldr	r0, [pc, #160]	; (6040 <z_impl_k_mutex_lock+0x1f0>)
    5f9e:	f002 f9b7 	bl	8310 <printk>
    5fa2:	4825      	ldr	r0, [pc, #148]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    5fa4:	2181      	movs	r1, #129	; 0x81
    5fa6:	f002 fa7f 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5faa:	4822      	ldr	r0, [pc, #136]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5fac:	f7ff ff1c 	bl	5de8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5fb0:	6823      	ldr	r3, [r4, #0]
    5fb2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fb4:	429c      	cmp	r4, r3
    5fb6:	d00a      	beq.n	5fce <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5fb8:	b14b      	cbz	r3, 5fce <z_impl_k_mutex_lock+0x17e>
    5fba:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5fbe:	4299      	cmp	r1, r3
    5fc0:	bfa8      	it	ge
    5fc2:	4619      	movge	r1, r3
    5fc4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5fc8:	4299      	cmp	r1, r3
    5fca:	bfb8      	it	lt
    5fcc:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5fce:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    5fd0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5fd4:	4299      	cmp	r1, r3
    5fd6:	d109      	bne.n	5fec <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    5fd8:	b16d      	cbz	r5, 5ff6 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    5fda:	4816      	ldr	r0, [pc, #88]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5fdc:	4631      	mov	r1, r6
    5fde:	f000 fa8b 	bl	64f8 <z_reschedule>
	return -EAGAIN;
    5fe2:	f06f 000a 	mvn.w	r0, #10
    5fe6:	e7a7      	b.n	5f38 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    5fe8:	2500      	movs	r5, #0
    5fea:	e7bb      	b.n	5f64 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    5fec:	f000 feba 	bl	6d64 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5ff0:	2800      	cmp	r0, #0
    5ff2:	d1f2      	bne.n	5fda <z_impl_k_mutex_lock+0x18a>
    5ff4:	e7f0      	b.n	5fd8 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5ff6:	480f      	ldr	r0, [pc, #60]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    5ff8:	f7ff fee6 	bl	5dc8 <z_spin_unlock_valid>
    5ffc:	b968      	cbnz	r0, 601a <z_impl_k_mutex_lock+0x1ca>
    5ffe:	4a0e      	ldr	r2, [pc, #56]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    6000:	4911      	ldr	r1, [pc, #68]	; (6048 <z_impl_k_mutex_lock+0x1f8>)
    6002:	480a      	ldr	r0, [pc, #40]	; (602c <z_impl_k_mutex_lock+0x1dc>)
    6004:	23ac      	movs	r3, #172	; 0xac
    6006:	f002 f983 	bl	8310 <printk>
    600a:	490a      	ldr	r1, [pc, #40]	; (6034 <z_impl_k_mutex_lock+0x1e4>)
    600c:	480f      	ldr	r0, [pc, #60]	; (604c <z_impl_k_mutex_lock+0x1fc>)
    600e:	f002 f97f 	bl	8310 <printk>
    6012:	4809      	ldr	r0, [pc, #36]	; (6038 <z_impl_k_mutex_lock+0x1e8>)
    6014:	21ac      	movs	r1, #172	; 0xac
    6016:	f002 fa47 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    601a:	f386 8811 	msr	BASEPRI, r6
    601e:	f3bf 8f6f 	isb	sy
    6022:	e7de      	b.n	5fe2 <z_impl_k_mutex_lock+0x192>
    6024:	0000a0c3 	.word	0x0000a0c3
    6028:	0000a170 	.word	0x0000a170
    602c:	00009128 	.word	0x00009128
    6030:	0000a192 	.word	0x0000a192
    6034:	20000ccc 	.word	0x20000ccc
    6038:	0000966e 	.word	0x0000966e
    603c:	000096c0 	.word	0x000096c0
    6040:	000096d5 	.word	0x000096d5
    6044:	20000ca4 	.word	0x20000ca4
    6048:	00009694 	.word	0x00009694
    604c:	000096ab 	.word	0x000096ab

00006050 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6050:	b538      	push	{r3, r4, r5, lr}
    6052:	4604      	mov	r4, r0
    6054:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6058:	b163      	cbz	r3, 6074 <z_impl_k_mutex_unlock+0x24>
    605a:	4952      	ldr	r1, [pc, #328]	; (61a4 <z_impl_k_mutex_unlock+0x154>)
    605c:	4a52      	ldr	r2, [pc, #328]	; (61a8 <z_impl_k_mutex_unlock+0x158>)
    605e:	4853      	ldr	r0, [pc, #332]	; (61ac <z_impl_k_mutex_unlock+0x15c>)
    6060:	23c7      	movs	r3, #199	; 0xc7
    6062:	f002 f955 	bl	8310 <printk>
    6066:	4852      	ldr	r0, [pc, #328]	; (61b0 <z_impl_k_mutex_unlock+0x160>)
    6068:	f002 f952 	bl	8310 <printk>
    606c:	484e      	ldr	r0, [pc, #312]	; (61a8 <z_impl_k_mutex_unlock+0x158>)
    606e:	21c7      	movs	r1, #199	; 0xc7
    6070:	f002 fa1a 	bl	84a8 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6074:	68a3      	ldr	r3, [r4, #8]
    6076:	2b00      	cmp	r3, #0
    6078:	f000 808d 	beq.w	6196 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    607c:	4d4d      	ldr	r5, [pc, #308]	; (61b4 <z_impl_k_mutex_unlock+0x164>)
    607e:	68aa      	ldr	r2, [r5, #8]
    6080:	4293      	cmp	r3, r2
    6082:	f040 808b 	bne.w	619c <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6086:	68e3      	ldr	r3, [r4, #12]
    6088:	b94b      	cbnz	r3, 609e <z_impl_k_mutex_unlock+0x4e>
    608a:	494b      	ldr	r1, [pc, #300]	; (61b8 <z_impl_k_mutex_unlock+0x168>)
    608c:	4847      	ldr	r0, [pc, #284]	; (61ac <z_impl_k_mutex_unlock+0x15c>)
    608e:	4a46      	ldr	r2, [pc, #280]	; (61a8 <z_impl_k_mutex_unlock+0x158>)
    6090:	23df      	movs	r3, #223	; 0xdf
    6092:	f002 f93d 	bl	8310 <printk>
    6096:	4844      	ldr	r0, [pc, #272]	; (61a8 <z_impl_k_mutex_unlock+0x158>)
    6098:	21df      	movs	r1, #223	; 0xdf
    609a:	f002 fa05 	bl	84a8 <assert_post_action>
    609e:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    60a2:	b163      	cbz	r3, 60be <z_impl_k_mutex_unlock+0x6e>
    60a4:	493f      	ldr	r1, [pc, #252]	; (61a4 <z_impl_k_mutex_unlock+0x154>)
    60a6:	4a45      	ldr	r2, [pc, #276]	; (61bc <z_impl_k_mutex_unlock+0x16c>)
    60a8:	4840      	ldr	r0, [pc, #256]	; (61ac <z_impl_k_mutex_unlock+0x15c>)
    60aa:	23fd      	movs	r3, #253	; 0xfd
    60ac:	f002 f930 	bl	8310 <printk>
    60b0:	4843      	ldr	r0, [pc, #268]	; (61c0 <z_impl_k_mutex_unlock+0x170>)
    60b2:	f002 f92d 	bl	8310 <printk>
    60b6:	4841      	ldr	r0, [pc, #260]	; (61bc <z_impl_k_mutex_unlock+0x16c>)
    60b8:	21fd      	movs	r1, #253	; 0xfd
    60ba:	f002 f9f5 	bl	84a8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    60be:	68ab      	ldr	r3, [r5, #8]
    60c0:	7bdb      	ldrb	r3, [r3, #15]
    60c2:	2b01      	cmp	r3, #1
    60c4:	d10c      	bne.n	60e0 <z_impl_k_mutex_unlock+0x90>
    60c6:	493f      	ldr	r1, [pc, #252]	; (61c4 <z_impl_k_mutex_unlock+0x174>)
    60c8:	4a3c      	ldr	r2, [pc, #240]	; (61bc <z_impl_k_mutex_unlock+0x16c>)
    60ca:	4838      	ldr	r0, [pc, #224]	; (61ac <z_impl_k_mutex_unlock+0x15c>)
    60cc:	23fe      	movs	r3, #254	; 0xfe
    60ce:	f002 f91f 	bl	8310 <printk>
    60d2:	483b      	ldr	r0, [pc, #236]	; (61c0 <z_impl_k_mutex_unlock+0x170>)
    60d4:	f002 f91c 	bl	8310 <printk>
    60d8:	4838      	ldr	r0, [pc, #224]	; (61bc <z_impl_k_mutex_unlock+0x16c>)
    60da:	21fe      	movs	r1, #254	; 0xfe
    60dc:	f002 f9e4 	bl	84a8 <assert_post_action>

	--_current->base.sched_locked;
    60e0:	68aa      	ldr	r2, [r5, #8]
    60e2:	7bd3      	ldrb	r3, [r2, #15]
    60e4:	3b01      	subs	r3, #1
    60e6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    60e8:	68e3      	ldr	r3, [r4, #12]
    60ea:	2b01      	cmp	r3, #1
    60ec:	d905      	bls.n	60fa <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    60ee:	3b01      	subs	r3, #1
    60f0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    60f2:	f000 ff3d 	bl	6f70 <k_sched_unlock>

	return 0;
    60f6:	2000      	movs	r0, #0
}
    60f8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    60fa:	f04f 0320 	mov.w	r3, #32
    60fe:	f3ef 8511 	mrs	r5, BASEPRI
    6102:	f383 8812 	msr	BASEPRI_MAX, r3
    6106:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    610a:	482f      	ldr	r0, [pc, #188]	; (61c8 <z_impl_k_mutex_unlock+0x178>)
    610c:	f7ff fe4e 	bl	5dac <z_spin_lock_valid>
    6110:	b968      	cbnz	r0, 612e <z_impl_k_mutex_unlock+0xde>
    6112:	4a2e      	ldr	r2, [pc, #184]	; (61cc <z_impl_k_mutex_unlock+0x17c>)
    6114:	492e      	ldr	r1, [pc, #184]	; (61d0 <z_impl_k_mutex_unlock+0x180>)
    6116:	4825      	ldr	r0, [pc, #148]	; (61ac <z_impl_k_mutex_unlock+0x15c>)
    6118:	2381      	movs	r3, #129	; 0x81
    611a:	f002 f8f9 	bl	8310 <printk>
    611e:	492a      	ldr	r1, [pc, #168]	; (61c8 <z_impl_k_mutex_unlock+0x178>)
    6120:	482c      	ldr	r0, [pc, #176]	; (61d4 <z_impl_k_mutex_unlock+0x184>)
    6122:	f002 f8f5 	bl	8310 <printk>
    6126:	4829      	ldr	r0, [pc, #164]	; (61cc <z_impl_k_mutex_unlock+0x17c>)
    6128:	2181      	movs	r1, #129	; 0x81
    612a:	f002 f9bd 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    612e:	4826      	ldr	r0, [pc, #152]	; (61c8 <z_impl_k_mutex_unlock+0x178>)
    6130:	f7ff fe5a 	bl	5de8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6134:	68a0      	ldr	r0, [r4, #8]
    6136:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    6138:	f990 300e 	ldrsb.w	r3, [r0, #14]
    613c:	4299      	cmp	r1, r3
    613e:	d001      	beq.n	6144 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    6140:	f000 fe10 	bl	6d64 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6144:	4620      	mov	r0, r4
    6146:	f000 ffdb 	bl	7100 <z_unpend_first_thread>
	mutex->owner = new_owner;
    614a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    614c:	b158      	cbz	r0, 6166 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    614e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6152:	6122      	str	r2, [r4, #16]
    6154:	2200      	movs	r2, #0
    6156:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    6158:	f000 fc22 	bl	69a0 <z_ready_thread>
		z_reschedule(&lock, key);
    615c:	481a      	ldr	r0, [pc, #104]	; (61c8 <z_impl_k_mutex_unlock+0x178>)
    615e:	4629      	mov	r1, r5
    6160:	f000 f9ca 	bl	64f8 <z_reschedule>
    6164:	e7c5      	b.n	60f2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    6166:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6168:	4817      	ldr	r0, [pc, #92]	; (61c8 <z_impl_k_mutex_unlock+0x178>)
    616a:	f7ff fe2d 	bl	5dc8 <z_spin_unlock_valid>
    616e:	b968      	cbnz	r0, 618c <z_impl_k_mutex_unlock+0x13c>
    6170:	4a16      	ldr	r2, [pc, #88]	; (61cc <z_impl_k_mutex_unlock+0x17c>)
    6172:	4919      	ldr	r1, [pc, #100]	; (61d8 <z_impl_k_mutex_unlock+0x188>)
    6174:	480d      	ldr	r0, [pc, #52]	; (61ac <z_impl_k_mutex_unlock+0x15c>)
    6176:	23ac      	movs	r3, #172	; 0xac
    6178:	f002 f8ca 	bl	8310 <printk>
    617c:	4912      	ldr	r1, [pc, #72]	; (61c8 <z_impl_k_mutex_unlock+0x178>)
    617e:	4817      	ldr	r0, [pc, #92]	; (61dc <z_impl_k_mutex_unlock+0x18c>)
    6180:	f002 f8c6 	bl	8310 <printk>
    6184:	4811      	ldr	r0, [pc, #68]	; (61cc <z_impl_k_mutex_unlock+0x17c>)
    6186:	21ac      	movs	r1, #172	; 0xac
    6188:	f002 f98e 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    618c:	f385 8811 	msr	BASEPRI, r5
    6190:	f3bf 8f6f 	isb	sy
    6194:	e7ad      	b.n	60f2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    6196:	f06f 0015 	mvn.w	r0, #21
    619a:	e7ad      	b.n	60f8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    619c:	f04f 30ff 	mov.w	r0, #4294967295
    61a0:	e7aa      	b.n	60f8 <z_impl_k_mutex_unlock+0xa8>
    61a2:	bf00      	nop
    61a4:	0000a0c3 	.word	0x0000a0c3
    61a8:	0000a170 	.word	0x0000a170
    61ac:	00009128 	.word	0x00009128
    61b0:	0000a192 	.word	0x0000a192
    61b4:	20000ca4 	.word	0x20000ca4
    61b8:	0000a1b7 	.word	0x0000a1b7
    61bc:	0000a1ce 	.word	0x0000a1ce
    61c0:	0000a1f9 	.word	0x0000a1f9
    61c4:	0000a1fc 	.word	0x0000a1fc
    61c8:	20000ccc 	.word	0x20000ccc
    61cc:	0000966e 	.word	0x0000966e
    61d0:	000096c0 	.word	0x000096c0
    61d4:	000096d5 	.word	0x000096d5
    61d8:	00009694 	.word	0x00009694
    61dc:	000096ab 	.word	0x000096ab

000061e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    61e0:	b538      	push	{r3, r4, r5, lr}
    61e2:	4604      	mov	r4, r0
	__asm__ volatile(
    61e4:	f04f 0320 	mov.w	r3, #32
    61e8:	f3ef 8511 	mrs	r5, BASEPRI
    61ec:	f383 8812 	msr	BASEPRI_MAX, r3
    61f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    61f4:	4814      	ldr	r0, [pc, #80]	; (6248 <z_impl_k_sem_give+0x68>)
    61f6:	f7ff fdd9 	bl	5dac <z_spin_lock_valid>
    61fa:	b968      	cbnz	r0, 6218 <z_impl_k_sem_give+0x38>
    61fc:	4a13      	ldr	r2, [pc, #76]	; (624c <z_impl_k_sem_give+0x6c>)
    61fe:	4914      	ldr	r1, [pc, #80]	; (6250 <z_impl_k_sem_give+0x70>)
    6200:	4814      	ldr	r0, [pc, #80]	; (6254 <z_impl_k_sem_give+0x74>)
    6202:	2381      	movs	r3, #129	; 0x81
    6204:	f002 f884 	bl	8310 <printk>
    6208:	490f      	ldr	r1, [pc, #60]	; (6248 <z_impl_k_sem_give+0x68>)
    620a:	4813      	ldr	r0, [pc, #76]	; (6258 <z_impl_k_sem_give+0x78>)
    620c:	f002 f880 	bl	8310 <printk>
    6210:	480e      	ldr	r0, [pc, #56]	; (624c <z_impl_k_sem_give+0x6c>)
    6212:	2181      	movs	r1, #129	; 0x81
    6214:	f002 f948 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6218:	480b      	ldr	r0, [pc, #44]	; (6248 <z_impl_k_sem_give+0x68>)
    621a:	f7ff fde5 	bl	5de8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    621e:	4620      	mov	r0, r4
    6220:	f000 ff6e 	bl	7100 <z_unpend_first_thread>

	if (thread != NULL) {
    6224:	b148      	cbz	r0, 623a <z_impl_k_sem_give+0x5a>
    6226:	2200      	movs	r2, #0
    6228:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    622a:	f000 fbb9 	bl	69a0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    622e:	4629      	mov	r1, r5
    6230:	4805      	ldr	r0, [pc, #20]	; (6248 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6236:	f000 b95f 	b.w	64f8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    623a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    623e:	429a      	cmp	r2, r3
    6240:	bf18      	it	ne
    6242:	3301      	addne	r3, #1
    6244:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    6246:	e7f2      	b.n	622e <z_impl_k_sem_give+0x4e>
    6248:	20000cd0 	.word	0x20000cd0
    624c:	0000966e 	.word	0x0000966e
    6250:	000096c0 	.word	0x000096c0
    6254:	00009128 	.word	0x00009128
    6258:	000096d5 	.word	0x000096d5

0000625c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    625c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    625e:	4604      	mov	r4, r0
    6260:	4616      	mov	r6, r2
    6262:	461f      	mov	r7, r3
    6264:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6268:	b17b      	cbz	r3, 628a <z_impl_k_sem_take+0x2e>
    626a:	ea56 0307 	orrs.w	r3, r6, r7
    626e:	d00c      	beq.n	628a <z_impl_k_sem_take+0x2e>
    6270:	4935      	ldr	r1, [pc, #212]	; (6348 <z_impl_k_sem_take+0xec>)
    6272:	4a36      	ldr	r2, [pc, #216]	; (634c <z_impl_k_sem_take+0xf0>)
    6274:	4836      	ldr	r0, [pc, #216]	; (6350 <z_impl_k_sem_take+0xf4>)
    6276:	2379      	movs	r3, #121	; 0x79
    6278:	f002 f84a 	bl	8310 <printk>
    627c:	4835      	ldr	r0, [pc, #212]	; (6354 <z_impl_k_sem_take+0xf8>)
    627e:	f002 f847 	bl	8310 <printk>
    6282:	4832      	ldr	r0, [pc, #200]	; (634c <z_impl_k_sem_take+0xf0>)
    6284:	2179      	movs	r1, #121	; 0x79
    6286:	f002 f90f 	bl	84a8 <assert_post_action>
    628a:	f04f 0320 	mov.w	r3, #32
    628e:	f3ef 8511 	mrs	r5, BASEPRI
    6292:	f383 8812 	msr	BASEPRI_MAX, r3
    6296:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    629a:	482f      	ldr	r0, [pc, #188]	; (6358 <z_impl_k_sem_take+0xfc>)
    629c:	f7ff fd86 	bl	5dac <z_spin_lock_valid>
    62a0:	b968      	cbnz	r0, 62be <z_impl_k_sem_take+0x62>
    62a2:	4a2e      	ldr	r2, [pc, #184]	; (635c <z_impl_k_sem_take+0x100>)
    62a4:	492e      	ldr	r1, [pc, #184]	; (6360 <z_impl_k_sem_take+0x104>)
    62a6:	482a      	ldr	r0, [pc, #168]	; (6350 <z_impl_k_sem_take+0xf4>)
    62a8:	2381      	movs	r3, #129	; 0x81
    62aa:	f002 f831 	bl	8310 <printk>
    62ae:	492a      	ldr	r1, [pc, #168]	; (6358 <z_impl_k_sem_take+0xfc>)
    62b0:	482c      	ldr	r0, [pc, #176]	; (6364 <z_impl_k_sem_take+0x108>)
    62b2:	f002 f82d 	bl	8310 <printk>
    62b6:	4829      	ldr	r0, [pc, #164]	; (635c <z_impl_k_sem_take+0x100>)
    62b8:	2181      	movs	r1, #129	; 0x81
    62ba:	f002 f8f5 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    62be:	4826      	ldr	r0, [pc, #152]	; (6358 <z_impl_k_sem_take+0xfc>)
    62c0:	f7ff fd92 	bl	5de8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    62c4:	68a3      	ldr	r3, [r4, #8]
    62c6:	b1d3      	cbz	r3, 62fe <z_impl_k_sem_take+0xa2>
		sem->count--;
    62c8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    62ca:	4823      	ldr	r0, [pc, #140]	; (6358 <z_impl_k_sem_take+0xfc>)
    62cc:	60a3      	str	r3, [r4, #8]
    62ce:	f7ff fd7b 	bl	5dc8 <z_spin_unlock_valid>
    62d2:	b968      	cbnz	r0, 62f0 <z_impl_k_sem_take+0x94>
    62d4:	4a21      	ldr	r2, [pc, #132]	; (635c <z_impl_k_sem_take+0x100>)
    62d6:	4924      	ldr	r1, [pc, #144]	; (6368 <z_impl_k_sem_take+0x10c>)
    62d8:	481d      	ldr	r0, [pc, #116]	; (6350 <z_impl_k_sem_take+0xf4>)
    62da:	23ac      	movs	r3, #172	; 0xac
    62dc:	f002 f818 	bl	8310 <printk>
    62e0:	491d      	ldr	r1, [pc, #116]	; (6358 <z_impl_k_sem_take+0xfc>)
    62e2:	4822      	ldr	r0, [pc, #136]	; (636c <z_impl_k_sem_take+0x110>)
    62e4:	f002 f814 	bl	8310 <printk>
    62e8:	481c      	ldr	r0, [pc, #112]	; (635c <z_impl_k_sem_take+0x100>)
    62ea:	21ac      	movs	r1, #172	; 0xac
    62ec:	f002 f8dc 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    62f0:	f385 8811 	msr	BASEPRI, r5
    62f4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    62f8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    62fa:	b003      	add	sp, #12
    62fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    62fe:	ea56 0307 	orrs.w	r3, r6, r7
    6302:	d118      	bne.n	6336 <z_impl_k_sem_take+0xda>
    6304:	4814      	ldr	r0, [pc, #80]	; (6358 <z_impl_k_sem_take+0xfc>)
    6306:	f7ff fd5f 	bl	5dc8 <z_spin_unlock_valid>
    630a:	b968      	cbnz	r0, 6328 <z_impl_k_sem_take+0xcc>
    630c:	4a13      	ldr	r2, [pc, #76]	; (635c <z_impl_k_sem_take+0x100>)
    630e:	4916      	ldr	r1, [pc, #88]	; (6368 <z_impl_k_sem_take+0x10c>)
    6310:	480f      	ldr	r0, [pc, #60]	; (6350 <z_impl_k_sem_take+0xf4>)
    6312:	23ac      	movs	r3, #172	; 0xac
    6314:	f001 fffc 	bl	8310 <printk>
    6318:	490f      	ldr	r1, [pc, #60]	; (6358 <z_impl_k_sem_take+0xfc>)
    631a:	4814      	ldr	r0, [pc, #80]	; (636c <z_impl_k_sem_take+0x110>)
    631c:	f001 fff8 	bl	8310 <printk>
    6320:	480e      	ldr	r0, [pc, #56]	; (635c <z_impl_k_sem_take+0x100>)
    6322:	21ac      	movs	r1, #172	; 0xac
    6324:	f002 f8c0 	bl	84a8 <assert_post_action>
    6328:	f385 8811 	msr	BASEPRI, r5
    632c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6330:	f06f 000f 	mvn.w	r0, #15
    6334:	e7e1      	b.n	62fa <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6336:	e9cd 6700 	strd	r6, r7, [sp]
    633a:	4622      	mov	r2, r4
    633c:	4629      	mov	r1, r5
    633e:	4806      	ldr	r0, [pc, #24]	; (6358 <z_impl_k_sem_take+0xfc>)
    6340:	f000 fce0 	bl	6d04 <z_pend_curr>
	return ret;
    6344:	e7d9      	b.n	62fa <z_impl_k_sem_take+0x9e>
    6346:	bf00      	nop
    6348:	0000a24d 	.word	0x0000a24d
    634c:	0000a22d 	.word	0x0000a22d
    6350:	00009128 	.word	0x00009128
    6354:	0000a1f9 	.word	0x0000a1f9
    6358:	20000cd0 	.word	0x20000cd0
    635c:	0000966e 	.word	0x0000966e
    6360:	000096c0 	.word	0x000096c0
    6364:	000096d5 	.word	0x000096d5
    6368:	00009694 	.word	0x00009694
    636c:	000096ab 	.word	0x000096ab

00006370 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    6370:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    6372:	4c08      	ldr	r4, [pc, #32]	; (6394 <z_reset_time_slice+0x24>)
    6374:	6823      	ldr	r3, [r4, #0]
    6376:	b15b      	cbz	r3, 6390 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6378:	f7fe f88a 	bl	4490 <sys_clock_elapsed>
    637c:	4603      	mov	r3, r0
    637e:	6820      	ldr	r0, [r4, #0]
    6380:	4a05      	ldr	r2, [pc, #20]	; (6398 <z_reset_time_slice+0x28>)
    6382:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    6384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    6388:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    638a:	2100      	movs	r1, #0
    638c:	f001 bb2c 	b.w	79e8 <z_set_timeout_expiry>
}
    6390:	bd10      	pop	{r4, pc}
    6392:	bf00      	nop
    6394:	20000ce0 	.word	0x20000ce0
    6398:	20000ca4 	.word	0x20000ca4

0000639c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    639c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    639e:	4604      	mov	r4, r0
    63a0:	460d      	mov	r5, r1
	__asm__ volatile(
    63a2:	f04f 0320 	mov.w	r3, #32
    63a6:	f3ef 8611 	mrs	r6, BASEPRI
    63aa:	f383 8812 	msr	BASEPRI_MAX, r3
    63ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    63b2:	4823      	ldr	r0, [pc, #140]	; (6440 <k_sched_time_slice_set+0xa4>)
    63b4:	f7ff fcfa 	bl	5dac <z_spin_lock_valid>
    63b8:	b968      	cbnz	r0, 63d6 <k_sched_time_slice_set+0x3a>
    63ba:	4a22      	ldr	r2, [pc, #136]	; (6444 <k_sched_time_slice_set+0xa8>)
    63bc:	4922      	ldr	r1, [pc, #136]	; (6448 <k_sched_time_slice_set+0xac>)
    63be:	4823      	ldr	r0, [pc, #140]	; (644c <k_sched_time_slice_set+0xb0>)
    63c0:	2381      	movs	r3, #129	; 0x81
    63c2:	f001 ffa5 	bl	8310 <printk>
    63c6:	491e      	ldr	r1, [pc, #120]	; (6440 <k_sched_time_slice_set+0xa4>)
    63c8:	4821      	ldr	r0, [pc, #132]	; (6450 <k_sched_time_slice_set+0xb4>)
    63ca:	f001 ffa1 	bl	8310 <printk>
    63ce:	481d      	ldr	r0, [pc, #116]	; (6444 <k_sched_time_slice_set+0xa8>)
    63d0:	2181      	movs	r1, #129	; 0x81
    63d2:	f002 f869 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    63d6:	481a      	ldr	r0, [pc, #104]	; (6440 <k_sched_time_slice_set+0xa4>)
    63d8:	f7ff fd06 	bl	5de8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    63dc:	4b1d      	ldr	r3, [pc, #116]	; (6454 <k_sched_time_slice_set+0xb8>)
    63de:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    63e0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    63e4:	f240 30e7 	movw	r0, #999	; 0x3e7
    63e8:	2100      	movs	r1, #0
    63ea:	611a      	str	r2, [r3, #16]
    63ec:	fbe7 0104 	umlal	r0, r1, r7, r4
    63f0:	2300      	movs	r3, #0
    63f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    63f6:	f7fa f99d 	bl	734 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    63fa:	2c00      	cmp	r4, #0
    63fc:	4b16      	ldr	r3, [pc, #88]	; (6458 <k_sched_time_slice_set+0xbc>)
    63fe:	dc1b      	bgt.n	6438 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    6400:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    6402:	4b16      	ldr	r3, [pc, #88]	; (645c <k_sched_time_slice_set+0xc0>)
    6404:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    6406:	f7ff ffb3 	bl	6370 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    640a:	480d      	ldr	r0, [pc, #52]	; (6440 <k_sched_time_slice_set+0xa4>)
    640c:	f7ff fcdc 	bl	5dc8 <z_spin_unlock_valid>
    6410:	b968      	cbnz	r0, 642e <k_sched_time_slice_set+0x92>
    6412:	4a0c      	ldr	r2, [pc, #48]	; (6444 <k_sched_time_slice_set+0xa8>)
    6414:	4912      	ldr	r1, [pc, #72]	; (6460 <k_sched_time_slice_set+0xc4>)
    6416:	480d      	ldr	r0, [pc, #52]	; (644c <k_sched_time_slice_set+0xb0>)
    6418:	23ac      	movs	r3, #172	; 0xac
    641a:	f001 ff79 	bl	8310 <printk>
    641e:	4908      	ldr	r1, [pc, #32]	; (6440 <k_sched_time_slice_set+0xa4>)
    6420:	4810      	ldr	r0, [pc, #64]	; (6464 <k_sched_time_slice_set+0xc8>)
    6422:	f001 ff75 	bl	8310 <printk>
    6426:	4807      	ldr	r0, [pc, #28]	; (6444 <k_sched_time_slice_set+0xa8>)
    6428:	21ac      	movs	r1, #172	; 0xac
    642a:	f002 f83d 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    642e:	f386 8811 	msr	BASEPRI, r6
    6432:	f3bf 8f6f 	isb	sy
	}
}
    6436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    6438:	2802      	cmp	r0, #2
    643a:	bfb8      	it	lt
    643c:	2002      	movlt	r0, #2
    643e:	e7df      	b.n	6400 <k_sched_time_slice_set+0x64>
    6440:	20000cd8 	.word	0x20000cd8
    6444:	0000966e 	.word	0x0000966e
    6448:	000096c0 	.word	0x000096c0
    644c:	00009128 	.word	0x00009128
    6450:	000096d5 	.word	0x000096d5
    6454:	20000ca4 	.word	0x20000ca4
    6458:	20000ce0 	.word	0x20000ce0
    645c:	20000cdc 	.word	0x20000cdc
    6460:	00009694 	.word	0x00009694
    6464:	000096ab 	.word	0x000096ab

00006468 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    6468:	b538      	push	{r3, r4, r5, lr}
    646a:	4604      	mov	r4, r0
	__asm__ volatile(
    646c:	f04f 0320 	mov.w	r3, #32
    6470:	f3ef 8511 	mrs	r5, BASEPRI
    6474:	f383 8812 	msr	BASEPRI_MAX, r3
    6478:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    647c:	4817      	ldr	r0, [pc, #92]	; (64dc <z_unpend_thread_no_timeout+0x74>)
    647e:	f7ff fc95 	bl	5dac <z_spin_lock_valid>
    6482:	b968      	cbnz	r0, 64a0 <z_unpend_thread_no_timeout+0x38>
    6484:	4a16      	ldr	r2, [pc, #88]	; (64e0 <z_unpend_thread_no_timeout+0x78>)
    6486:	4917      	ldr	r1, [pc, #92]	; (64e4 <z_unpend_thread_no_timeout+0x7c>)
    6488:	4817      	ldr	r0, [pc, #92]	; (64e8 <z_unpend_thread_no_timeout+0x80>)
    648a:	2381      	movs	r3, #129	; 0x81
    648c:	f001 ff40 	bl	8310 <printk>
    6490:	4912      	ldr	r1, [pc, #72]	; (64dc <z_unpend_thread_no_timeout+0x74>)
    6492:	4816      	ldr	r0, [pc, #88]	; (64ec <z_unpend_thread_no_timeout+0x84>)
    6494:	f001 ff3c 	bl	8310 <printk>
    6498:	4811      	ldr	r0, [pc, #68]	; (64e0 <z_unpend_thread_no_timeout+0x78>)
    649a:	2181      	movs	r1, #129	; 0x81
    649c:	f002 f804 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    64a0:	480e      	ldr	r0, [pc, #56]	; (64dc <z_unpend_thread_no_timeout+0x74>)
    64a2:	f7ff fca1 	bl	5de8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    64a6:	4620      	mov	r0, r4
    64a8:	f000 f900 	bl	66ac <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    64ac:	480b      	ldr	r0, [pc, #44]	; (64dc <z_unpend_thread_no_timeout+0x74>)
    64ae:	f7ff fc8b 	bl	5dc8 <z_spin_unlock_valid>
    64b2:	b968      	cbnz	r0, 64d0 <z_unpend_thread_no_timeout+0x68>
    64b4:	4a0a      	ldr	r2, [pc, #40]	; (64e0 <z_unpend_thread_no_timeout+0x78>)
    64b6:	490e      	ldr	r1, [pc, #56]	; (64f0 <z_unpend_thread_no_timeout+0x88>)
    64b8:	480b      	ldr	r0, [pc, #44]	; (64e8 <z_unpend_thread_no_timeout+0x80>)
    64ba:	23ac      	movs	r3, #172	; 0xac
    64bc:	f001 ff28 	bl	8310 <printk>
    64c0:	4906      	ldr	r1, [pc, #24]	; (64dc <z_unpend_thread_no_timeout+0x74>)
    64c2:	480c      	ldr	r0, [pc, #48]	; (64f4 <z_unpend_thread_no_timeout+0x8c>)
    64c4:	f001 ff24 	bl	8310 <printk>
    64c8:	4805      	ldr	r0, [pc, #20]	; (64e0 <z_unpend_thread_no_timeout+0x78>)
    64ca:	21ac      	movs	r1, #172	; 0xac
    64cc:	f001 ffec 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    64d0:	f385 8811 	msr	BASEPRI, r5
    64d4:	f3bf 8f6f 	isb	sy
	}
}
    64d8:	bd38      	pop	{r3, r4, r5, pc}
    64da:	bf00      	nop
    64dc:	20000cd8 	.word	0x20000cd8
    64e0:	0000966e 	.word	0x0000966e
    64e4:	000096c0 	.word	0x000096c0
    64e8:	00009128 	.word	0x00009128
    64ec:	000096d5 	.word	0x000096d5
    64f0:	00009694 	.word	0x00009694
    64f4:	000096ab 	.word	0x000096ab

000064f8 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    64f8:	b538      	push	{r3, r4, r5, lr}
    64fa:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    64fc:	460d      	mov	r5, r1
    64fe:	b9e9      	cbnz	r1, 653c <z_reschedule+0x44>
    6500:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    6504:	b9d3      	cbnz	r3, 653c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    6506:	4b19      	ldr	r3, [pc, #100]	; (656c <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    6508:	69da      	ldr	r2, [r3, #28]
    650a:	689b      	ldr	r3, [r3, #8]
    650c:	429a      	cmp	r2, r3
    650e:	d015      	beq.n	653c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6510:	f7ff fc5a 	bl	5dc8 <z_spin_unlock_valid>
    6514:	b968      	cbnz	r0, 6532 <z_reschedule+0x3a>
    6516:	4a16      	ldr	r2, [pc, #88]	; (6570 <z_reschedule+0x78>)
    6518:	4916      	ldr	r1, [pc, #88]	; (6574 <z_reschedule+0x7c>)
    651a:	4817      	ldr	r0, [pc, #92]	; (6578 <z_reschedule+0x80>)
    651c:	23c3      	movs	r3, #195	; 0xc3
    651e:	f001 fef7 	bl	8310 <printk>
    6522:	4816      	ldr	r0, [pc, #88]	; (657c <z_reschedule+0x84>)
    6524:	4621      	mov	r1, r4
    6526:	f001 fef3 	bl	8310 <printk>
    652a:	4811      	ldr	r0, [pc, #68]	; (6570 <z_reschedule+0x78>)
    652c:	21c3      	movs	r1, #195	; 0xc3
    652e:	f001 ffbb 	bl	84a8 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    6532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    6536:	2000      	movs	r0, #0
    6538:	f7fc b86a 	b.w	2610 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    653c:	4620      	mov	r0, r4
    653e:	f7ff fc43 	bl	5dc8 <z_spin_unlock_valid>
    6542:	b968      	cbnz	r0, 6560 <z_reschedule+0x68>
    6544:	4a0a      	ldr	r2, [pc, #40]	; (6570 <z_reschedule+0x78>)
    6546:	490b      	ldr	r1, [pc, #44]	; (6574 <z_reschedule+0x7c>)
    6548:	480b      	ldr	r0, [pc, #44]	; (6578 <z_reschedule+0x80>)
    654a:	23ac      	movs	r3, #172	; 0xac
    654c:	f001 fee0 	bl	8310 <printk>
    6550:	480a      	ldr	r0, [pc, #40]	; (657c <z_reschedule+0x84>)
    6552:	4621      	mov	r1, r4
    6554:	f001 fedc 	bl	8310 <printk>
    6558:	4805      	ldr	r0, [pc, #20]	; (6570 <z_reschedule+0x78>)
    655a:	21ac      	movs	r1, #172	; 0xac
    655c:	f001 ffa4 	bl	84a8 <assert_post_action>
    6560:	f385 8811 	msr	BASEPRI, r5
    6564:	f3bf 8f6f 	isb	sy
    6568:	bd38      	pop	{r3, r4, r5, pc}
    656a:	bf00      	nop
    656c:	20000ca4 	.word	0x20000ca4
    6570:	0000966e 	.word	0x0000966e
    6574:	00009694 	.word	0x00009694
    6578:	00009128 	.word	0x00009128
    657c:	000096ab 	.word	0x000096ab

00006580 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    6580:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6582:	f04f 0320 	mov.w	r3, #32
    6586:	f3ef 8511 	mrs	r5, BASEPRI
    658a:	f383 8812 	msr	BASEPRI_MAX, r3
    658e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6592:	4829      	ldr	r0, [pc, #164]	; (6638 <k_sched_lock+0xb8>)
    6594:	f7ff fc0a 	bl	5dac <z_spin_lock_valid>
    6598:	b968      	cbnz	r0, 65b6 <k_sched_lock+0x36>
    659a:	4a28      	ldr	r2, [pc, #160]	; (663c <k_sched_lock+0xbc>)
    659c:	4928      	ldr	r1, [pc, #160]	; (6640 <k_sched_lock+0xc0>)
    659e:	4829      	ldr	r0, [pc, #164]	; (6644 <k_sched_lock+0xc4>)
    65a0:	2381      	movs	r3, #129	; 0x81
    65a2:	f001 feb5 	bl	8310 <printk>
    65a6:	4924      	ldr	r1, [pc, #144]	; (6638 <k_sched_lock+0xb8>)
    65a8:	4827      	ldr	r0, [pc, #156]	; (6648 <k_sched_lock+0xc8>)
    65aa:	f001 feb1 	bl	8310 <printk>
    65ae:	4823      	ldr	r0, [pc, #140]	; (663c <k_sched_lock+0xbc>)
    65b0:	2181      	movs	r1, #129	; 0x81
    65b2:	f001 ff79 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    65b6:	4820      	ldr	r0, [pc, #128]	; (6638 <k_sched_lock+0xb8>)
    65b8:	f7ff fc16 	bl	5de8 <z_spin_lock_set_owner>
    65bc:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    65c0:	b163      	cbz	r3, 65dc <k_sched_lock+0x5c>
    65c2:	4922      	ldr	r1, [pc, #136]	; (664c <k_sched_lock+0xcc>)
    65c4:	4a22      	ldr	r2, [pc, #136]	; (6650 <k_sched_lock+0xd0>)
    65c6:	481f      	ldr	r0, [pc, #124]	; (6644 <k_sched_lock+0xc4>)
    65c8:	23fd      	movs	r3, #253	; 0xfd
    65ca:	f001 fea1 	bl	8310 <printk>
    65ce:	4821      	ldr	r0, [pc, #132]	; (6654 <k_sched_lock+0xd4>)
    65d0:	f001 fe9e 	bl	8310 <printk>
    65d4:	481e      	ldr	r0, [pc, #120]	; (6650 <k_sched_lock+0xd0>)
    65d6:	21fd      	movs	r1, #253	; 0xfd
    65d8:	f001 ff66 	bl	84a8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    65dc:	4c1e      	ldr	r4, [pc, #120]	; (6658 <k_sched_lock+0xd8>)
    65de:	68a2      	ldr	r2, [r4, #8]
    65e0:	7bd2      	ldrb	r2, [r2, #15]
    65e2:	2a01      	cmp	r2, #1
    65e4:	d10c      	bne.n	6600 <k_sched_lock+0x80>
    65e6:	491d      	ldr	r1, [pc, #116]	; (665c <k_sched_lock+0xdc>)
    65e8:	4a19      	ldr	r2, [pc, #100]	; (6650 <k_sched_lock+0xd0>)
    65ea:	4816      	ldr	r0, [pc, #88]	; (6644 <k_sched_lock+0xc4>)
    65ec:	23fe      	movs	r3, #254	; 0xfe
    65ee:	f001 fe8f 	bl	8310 <printk>
    65f2:	4818      	ldr	r0, [pc, #96]	; (6654 <k_sched_lock+0xd4>)
    65f4:	f001 fe8c 	bl	8310 <printk>
    65f8:	4815      	ldr	r0, [pc, #84]	; (6650 <k_sched_lock+0xd0>)
    65fa:	21fe      	movs	r1, #254	; 0xfe
    65fc:	f001 ff54 	bl	84a8 <assert_post_action>
	--_current->base.sched_locked;
    6600:	68a2      	ldr	r2, [r4, #8]
    6602:	7bd3      	ldrb	r3, [r2, #15]
    6604:	3b01      	subs	r3, #1
    6606:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6608:	480b      	ldr	r0, [pc, #44]	; (6638 <k_sched_lock+0xb8>)
    660a:	f7ff fbdd 	bl	5dc8 <z_spin_unlock_valid>
    660e:	b968      	cbnz	r0, 662c <k_sched_lock+0xac>
    6610:	4a0a      	ldr	r2, [pc, #40]	; (663c <k_sched_lock+0xbc>)
    6612:	4913      	ldr	r1, [pc, #76]	; (6660 <k_sched_lock+0xe0>)
    6614:	480b      	ldr	r0, [pc, #44]	; (6644 <k_sched_lock+0xc4>)
    6616:	23ac      	movs	r3, #172	; 0xac
    6618:	f001 fe7a 	bl	8310 <printk>
    661c:	4906      	ldr	r1, [pc, #24]	; (6638 <k_sched_lock+0xb8>)
    661e:	4811      	ldr	r0, [pc, #68]	; (6664 <k_sched_lock+0xe4>)
    6620:	f001 fe76 	bl	8310 <printk>
    6624:	4805      	ldr	r0, [pc, #20]	; (663c <k_sched_lock+0xbc>)
    6626:	21ac      	movs	r1, #172	; 0xac
    6628:	f001 ff3e 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    662c:	f385 8811 	msr	BASEPRI, r5
    6630:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6634:	bd38      	pop	{r3, r4, r5, pc}
    6636:	bf00      	nop
    6638:	20000cd8 	.word	0x20000cd8
    663c:	0000966e 	.word	0x0000966e
    6640:	000096c0 	.word	0x000096c0
    6644:	00009128 	.word	0x00009128
    6648:	000096d5 	.word	0x000096d5
    664c:	0000a0c3 	.word	0x0000a0c3
    6650:	0000a1ce 	.word	0x0000a1ce
    6654:	0000a1f9 	.word	0x0000a1f9
    6658:	20000ca4 	.word	0x20000ca4
    665c:	0000a1fc 	.word	0x0000a1fc
    6660:	00009694 	.word	0x00009694
    6664:	000096ab 	.word	0x000096ab

00006668 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6668:	4b0c      	ldr	r3, [pc, #48]	; (669c <z_priq_dumb_remove+0x34>)
    666a:	4299      	cmp	r1, r3
{
    666c:	b510      	push	{r4, lr}
    666e:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6670:	d10b      	bne.n	668a <z_priq_dumb_remove+0x22>
    6672:	490b      	ldr	r1, [pc, #44]	; (66a0 <z_priq_dumb_remove+0x38>)
    6674:	480b      	ldr	r0, [pc, #44]	; (66a4 <z_priq_dumb_remove+0x3c>)
    6676:	4a0c      	ldr	r2, [pc, #48]	; (66a8 <z_priq_dumb_remove+0x40>)
    6678:	f240 33e7 	movw	r3, #999	; 0x3e7
    667c:	f001 fe48 	bl	8310 <printk>
    6680:	4809      	ldr	r0, [pc, #36]	; (66a8 <z_priq_dumb_remove+0x40>)
    6682:	f240 31e7 	movw	r1, #999	; 0x3e7
    6686:	f001 ff0f 	bl	84a8 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    668a:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    668e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6690:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6692:	2300      	movs	r3, #0
	node->prev = NULL;
    6694:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    6698:	bd10      	pop	{r4, pc}
    669a:	bf00      	nop
    669c:	200004f0 	.word	0x200004f0
    66a0:	0000a2bc 	.word	0x0000a2bc
    66a4:	00009128 	.word	0x00009128
    66a8:	0000a29a 	.word	0x0000a29a

000066ac <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    66ac:	6883      	ldr	r3, [r0, #8]
{
    66ae:	b510      	push	{r4, lr}
    66b0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    66b2:	b95b      	cbnz	r3, 66cc <unpend_thread_no_timeout+0x20>
    66b4:	490b      	ldr	r1, [pc, #44]	; (66e4 <unpend_thread_no_timeout+0x38>)
    66b6:	480c      	ldr	r0, [pc, #48]	; (66e8 <unpend_thread_no_timeout+0x3c>)
    66b8:	4a0c      	ldr	r2, [pc, #48]	; (66ec <unpend_thread_no_timeout+0x40>)
    66ba:	f240 2383 	movw	r3, #643	; 0x283
    66be:	f001 fe27 	bl	8310 <printk>
    66c2:	480a      	ldr	r0, [pc, #40]	; (66ec <unpend_thread_no_timeout+0x40>)
    66c4:	f240 2183 	movw	r1, #643	; 0x283
    66c8:	f001 feee 	bl	84a8 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    66cc:	68a0      	ldr	r0, [r4, #8]
    66ce:	4621      	mov	r1, r4
    66d0:	f7ff ffca 	bl	6668 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    66d4:	7b63      	ldrb	r3, [r4, #13]
    66d6:	f023 0302 	bic.w	r3, r3, #2
    66da:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    66dc:	2300      	movs	r3, #0
    66de:	60a3      	str	r3, [r4, #8]
}
    66e0:	bd10      	pop	{r4, pc}
    66e2:	bf00      	nop
    66e4:	0000a2dd 	.word	0x0000a2dd
    66e8:	00009128 	.word	0x00009128
    66ec:	0000a29a 	.word	0x0000a29a

000066f0 <update_cache>:
{
    66f0:	b538      	push	{r3, r4, r5, lr}
    66f2:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    66f4:	4814      	ldr	r0, [pc, #80]	; (6748 <update_cache+0x58>)
    66f6:	4d15      	ldr	r5, [pc, #84]	; (674c <update_cache+0x5c>)
    66f8:	f002 fa40 	bl	8b7c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    66fc:	4604      	mov	r4, r0
    66fe:	b900      	cbnz	r0, 6702 <update_cache+0x12>
    6700:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    6702:	b9ca      	cbnz	r2, 6738 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    6704:	68ab      	ldr	r3, [r5, #8]
    6706:	b963      	cbnz	r3, 6722 <update_cache+0x32>
    6708:	4911      	ldr	r1, [pc, #68]	; (6750 <update_cache+0x60>)
    670a:	4a12      	ldr	r2, [pc, #72]	; (6754 <update_cache+0x64>)
    670c:	4812      	ldr	r0, [pc, #72]	; (6758 <update_cache+0x68>)
    670e:	2389      	movs	r3, #137	; 0x89
    6710:	f001 fdfe 	bl	8310 <printk>
    6714:	4811      	ldr	r0, [pc, #68]	; (675c <update_cache+0x6c>)
    6716:	f001 fdfb 	bl	8310 <printk>
    671a:	480e      	ldr	r0, [pc, #56]	; (6754 <update_cache+0x64>)
    671c:	2189      	movs	r1, #137	; 0x89
    671e:	f001 fec3 	bl	84a8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    6722:	68ab      	ldr	r3, [r5, #8]
    6724:	7b5a      	ldrb	r2, [r3, #13]
    6726:	06d2      	lsls	r2, r2, #27
    6728:	d106      	bne.n	6738 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    672a:	69a2      	ldr	r2, [r4, #24]
    672c:	b922      	cbnz	r2, 6738 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    672e:	89da      	ldrh	r2, [r3, #14]
    6730:	2a7f      	cmp	r2, #127	; 0x7f
    6732:	d901      	bls.n	6738 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    6734:	61eb      	str	r3, [r5, #28]
}
    6736:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    6738:	68ab      	ldr	r3, [r5, #8]
    673a:	42a3      	cmp	r3, r4
    673c:	d001      	beq.n	6742 <update_cache+0x52>
			z_reset_time_slice();
    673e:	f7ff fe17 	bl	6370 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6742:	61ec      	str	r4, [r5, #28]
}
    6744:	e7f7      	b.n	6736 <update_cache+0x46>
    6746:	bf00      	nop
    6748:	20000cc4 	.word	0x20000cc4
    674c:	20000ca4 	.word	0x20000ca4
    6750:	0000a2f4 	.word	0x0000a2f4
    6754:	0000a29a 	.word	0x0000a29a
    6758:	00009128 	.word	0x00009128
    675c:	0000a1f9 	.word	0x0000a1f9

00006760 <move_thread_to_end_of_prio_q>:
{
    6760:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    6762:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6766:	7b43      	ldrb	r3, [r0, #13]
    6768:	2a00      	cmp	r2, #0
{
    676a:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    676c:	da06      	bge.n	677c <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    676e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6772:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6774:	4601      	mov	r1, r0
    6776:	481f      	ldr	r0, [pc, #124]	; (67f4 <move_thread_to_end_of_prio_q+0x94>)
    6778:	f7ff ff76 	bl	6668 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    677c:	7b63      	ldrb	r3, [r4, #13]
    677e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6782:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6784:	4b1c      	ldr	r3, [pc, #112]	; (67f8 <move_thread_to_end_of_prio_q+0x98>)
    6786:	429c      	cmp	r4, r3
    6788:	d109      	bne.n	679e <move_thread_to_end_of_prio_q+0x3e>
    678a:	491c      	ldr	r1, [pc, #112]	; (67fc <move_thread_to_end_of_prio_q+0x9c>)
    678c:	481c      	ldr	r0, [pc, #112]	; (6800 <move_thread_to_end_of_prio_q+0xa0>)
    678e:	4a1d      	ldr	r2, [pc, #116]	; (6804 <move_thread_to_end_of_prio_q+0xa4>)
    6790:	23ba      	movs	r3, #186	; 0xba
    6792:	f001 fdbd 	bl	8310 <printk>
    6796:	481b      	ldr	r0, [pc, #108]	; (6804 <move_thread_to_end_of_prio_q+0xa4>)
    6798:	21ba      	movs	r1, #186	; 0xba
    679a:	f001 fe85 	bl	84a8 <assert_post_action>
	return list->head == list;
    679e:	4a1a      	ldr	r2, [pc, #104]	; (6808 <move_thread_to_end_of_prio_q+0xa8>)
    67a0:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    67a2:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    67a4:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    67a8:	428b      	cmp	r3, r1
    67aa:	bf08      	it	eq
    67ac:	2300      	moveq	r3, #0
    67ae:	2b00      	cmp	r3, #0
    67b0:	bf38      	it	cc
    67b2:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    67b4:	b1cb      	cbz	r3, 67ea <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    67b6:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    67ba:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    67be:	4286      	cmp	r6, r0
    67c0:	d00f      	beq.n	67e2 <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    67c2:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    67c4:	2800      	cmp	r0, #0
    67c6:	dd0c      	ble.n	67e2 <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    67c8:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    67ca:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    67ce:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    67d0:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    67d2:	6890      	ldr	r0, [r2, #8]
    67d4:	1b03      	subs	r3, r0, r4
    67d6:	4258      	negs	r0, r3
}
    67d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    67dc:	4158      	adcs	r0, r3
    67de:	f7ff bf87 	b.w	66f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    67e2:	42ab      	cmp	r3, r5
    67e4:	d001      	beq.n	67ea <move_thread_to_end_of_prio_q+0x8a>
    67e6:	681b      	ldr	r3, [r3, #0]
    67e8:	e7e4      	b.n	67b4 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    67ea:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    67ee:	602c      	str	r4, [r5, #0]
	list->tail = node;
    67f0:	6254      	str	r4, [r2, #36]	; 0x24
}
    67f2:	e7ee      	b.n	67d2 <move_thread_to_end_of_prio_q+0x72>
    67f4:	20000cc4 	.word	0x20000cc4
    67f8:	200004f0 	.word	0x200004f0
    67fc:	0000a2bc 	.word	0x0000a2bc
    6800:	00009128 	.word	0x00009128
    6804:	0000a29a 	.word	0x0000a29a
    6808:	20000ca4 	.word	0x20000ca4

0000680c <z_time_slice>:
{
    680c:	b570      	push	{r4, r5, r6, lr}
    680e:	4604      	mov	r4, r0
	__asm__ volatile(
    6810:	f04f 0320 	mov.w	r3, #32
    6814:	f3ef 8511 	mrs	r5, BASEPRI
    6818:	f383 8812 	msr	BASEPRI_MAX, r3
    681c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6820:	482a      	ldr	r0, [pc, #168]	; (68cc <z_time_slice+0xc0>)
    6822:	f7ff fac3 	bl	5dac <z_spin_lock_valid>
    6826:	b968      	cbnz	r0, 6844 <z_time_slice+0x38>
    6828:	4a29      	ldr	r2, [pc, #164]	; (68d0 <z_time_slice+0xc4>)
    682a:	492a      	ldr	r1, [pc, #168]	; (68d4 <z_time_slice+0xc8>)
    682c:	482a      	ldr	r0, [pc, #168]	; (68d8 <z_time_slice+0xcc>)
    682e:	2381      	movs	r3, #129	; 0x81
    6830:	f001 fd6e 	bl	8310 <printk>
    6834:	4925      	ldr	r1, [pc, #148]	; (68cc <z_time_slice+0xc0>)
    6836:	4829      	ldr	r0, [pc, #164]	; (68dc <z_time_slice+0xd0>)
    6838:	f001 fd6a 	bl	8310 <printk>
    683c:	4824      	ldr	r0, [pc, #144]	; (68d0 <z_time_slice+0xc4>)
    683e:	2181      	movs	r1, #129	; 0x81
    6840:	f001 fe32 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6844:	4821      	ldr	r0, [pc, #132]	; (68cc <z_time_slice+0xc0>)
    6846:	f7ff facf 	bl	5de8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    684a:	4b25      	ldr	r3, [pc, #148]	; (68e0 <z_time_slice+0xd4>)
    684c:	4a25      	ldr	r2, [pc, #148]	; (68e4 <z_time_slice+0xd8>)
    684e:	6898      	ldr	r0, [r3, #8]
    6850:	6811      	ldr	r1, [r2, #0]
    6852:	4288      	cmp	r0, r1
    6854:	4619      	mov	r1, r3
    6856:	d118      	bne.n	688a <z_time_slice+0x7e>
			z_reset_time_slice();
    6858:	f7ff fd8a 	bl	6370 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    685c:	481b      	ldr	r0, [pc, #108]	; (68cc <z_time_slice+0xc0>)
    685e:	f7ff fab3 	bl	5dc8 <z_spin_unlock_valid>
    6862:	b968      	cbnz	r0, 6880 <z_time_slice+0x74>
    6864:	4a1a      	ldr	r2, [pc, #104]	; (68d0 <z_time_slice+0xc4>)
    6866:	4920      	ldr	r1, [pc, #128]	; (68e8 <z_time_slice+0xdc>)
    6868:	481b      	ldr	r0, [pc, #108]	; (68d8 <z_time_slice+0xcc>)
    686a:	23ac      	movs	r3, #172	; 0xac
    686c:	f001 fd50 	bl	8310 <printk>
    6870:	4916      	ldr	r1, [pc, #88]	; (68cc <z_time_slice+0xc0>)
    6872:	481e      	ldr	r0, [pc, #120]	; (68ec <z_time_slice+0xe0>)
    6874:	f001 fd4c 	bl	8310 <printk>
    6878:	4815      	ldr	r0, [pc, #84]	; (68d0 <z_time_slice+0xc4>)
    687a:	21ac      	movs	r1, #172	; 0xac
    687c:	f001 fe14 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    6880:	f385 8811 	msr	BASEPRI, r5
    6884:	f3bf 8f6f 	isb	sy
}
    6888:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    688a:	2600      	movs	r6, #0
    688c:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    688e:	4a18      	ldr	r2, [pc, #96]	; (68f0 <z_time_slice+0xe4>)
    6890:	6812      	ldr	r2, [r2, #0]
    6892:	b1ba      	cbz	r2, 68c4 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    6894:	89c2      	ldrh	r2, [r0, #14]
    6896:	2a7f      	cmp	r2, #127	; 0x7f
    6898:	d814      	bhi.n	68c4 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    689a:	7b42      	ldrb	r2, [r0, #13]
    689c:	06d2      	lsls	r2, r2, #27
    689e:	d111      	bne.n	68c4 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    68a0:	4a14      	ldr	r2, [pc, #80]	; (68f4 <z_time_slice+0xe8>)
    68a2:	f990 600e 	ldrsb.w	r6, [r0, #14]
    68a6:	6812      	ldr	r2, [r2, #0]
    68a8:	4296      	cmp	r6, r2
    68aa:	db0b      	blt.n	68c4 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    68ac:	4a12      	ldr	r2, [pc, #72]	; (68f8 <z_time_slice+0xec>)
    68ae:	4290      	cmp	r0, r2
    68b0:	d008      	beq.n	68c4 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    68b2:	691a      	ldr	r2, [r3, #16]
    68b4:	42a2      	cmp	r2, r4
    68b6:	dc02      	bgt.n	68be <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    68b8:	f7ff ff52 	bl	6760 <move_thread_to_end_of_prio_q>
    68bc:	e7cc      	b.n	6858 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    68be:	1b12      	subs	r2, r2, r4
    68c0:	611a      	str	r2, [r3, #16]
    68c2:	e7cb      	b.n	685c <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    68c4:	2300      	movs	r3, #0
    68c6:	610b      	str	r3, [r1, #16]
    68c8:	e7c8      	b.n	685c <z_time_slice+0x50>
    68ca:	bf00      	nop
    68cc:	20000cd8 	.word	0x20000cd8
    68d0:	0000966e 	.word	0x0000966e
    68d4:	000096c0 	.word	0x000096c0
    68d8:	00009128 	.word	0x00009128
    68dc:	000096d5 	.word	0x000096d5
    68e0:	20000ca4 	.word	0x20000ca4
    68e4:	20000cd4 	.word	0x20000cd4
    68e8:	00009694 	.word	0x00009694
    68ec:	000096ab 	.word	0x000096ab
    68f0:	20000ce0 	.word	0x20000ce0
    68f4:	20000cdc 	.word	0x20000cdc
    68f8:	200004f0 	.word	0x200004f0

000068fc <ready_thread>:
{
    68fc:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    68fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6902:	7b43      	ldrb	r3, [r0, #13]
    6904:	2a00      	cmp	r2, #0
{
    6906:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6908:	db3e      	blt.n	6988 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    690a:	06da      	lsls	r2, r3, #27
    690c:	d13c      	bne.n	6988 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    690e:	6985      	ldr	r5, [r0, #24]
    6910:	2d00      	cmp	r5, #0
    6912:	d139      	bne.n	6988 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    6914:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6918:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    691a:	4b1c      	ldr	r3, [pc, #112]	; (698c <ready_thread+0x90>)
    691c:	4298      	cmp	r0, r3
    691e:	d109      	bne.n	6934 <ready_thread+0x38>
    6920:	491b      	ldr	r1, [pc, #108]	; (6990 <ready_thread+0x94>)
    6922:	481c      	ldr	r0, [pc, #112]	; (6994 <ready_thread+0x98>)
    6924:	4a1c      	ldr	r2, [pc, #112]	; (6998 <ready_thread+0x9c>)
    6926:	23ba      	movs	r3, #186	; 0xba
    6928:	f001 fcf2 	bl	8310 <printk>
    692c:	481a      	ldr	r0, [pc, #104]	; (6998 <ready_thread+0x9c>)
    692e:	21ba      	movs	r1, #186	; 0xba
    6930:	f001 fdba 	bl	84a8 <assert_post_action>
	return list->head == list;
    6934:	4919      	ldr	r1, [pc, #100]	; (699c <ready_thread+0xa0>)
    6936:	460b      	mov	r3, r1
    6938:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    693c:	4298      	cmp	r0, r3
    693e:	bf18      	it	ne
    6940:	4605      	movne	r5, r0
    6942:	2d00      	cmp	r5, #0
    6944:	461a      	mov	r2, r3
    6946:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6948:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    694a:	bf38      	it	cc
    694c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    694e:	b1b3      	cbz	r3, 697e <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    6950:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6954:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6958:	4286      	cmp	r6, r0
    695a:	d00c      	beq.n	6976 <ready_thread+0x7a>
		return b2 - b1;
    695c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    695e:	2800      	cmp	r0, #0
    6960:	dd09      	ble.n	6976 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    6962:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6964:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6968:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    696a:	605c      	str	r4, [r3, #4]
}
    696c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    6970:	2000      	movs	r0, #0
    6972:	f7ff bebd 	b.w	66f0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6976:	42ab      	cmp	r3, r5
    6978:	d001      	beq.n	697e <ready_thread+0x82>
    697a:	681b      	ldr	r3, [r3, #0]
    697c:	e7e7      	b.n	694e <ready_thread+0x52>
	node->prev = tail;
    697e:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6982:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6984:	624c      	str	r4, [r1, #36]	; 0x24
}
    6986:	e7f1      	b.n	696c <ready_thread+0x70>
}
    6988:	bd70      	pop	{r4, r5, r6, pc}
    698a:	bf00      	nop
    698c:	200004f0 	.word	0x200004f0
    6990:	0000a2bc 	.word	0x0000a2bc
    6994:	00009128 	.word	0x00009128
    6998:	0000a29a 	.word	0x0000a29a
    699c:	20000ca4 	.word	0x20000ca4

000069a0 <z_ready_thread>:
{
    69a0:	b538      	push	{r3, r4, r5, lr}
    69a2:	4604      	mov	r4, r0
	__asm__ volatile(
    69a4:	f04f 0320 	mov.w	r3, #32
    69a8:	f3ef 8511 	mrs	r5, BASEPRI
    69ac:	f383 8812 	msr	BASEPRI_MAX, r3
    69b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    69b4:	4817      	ldr	r0, [pc, #92]	; (6a14 <z_ready_thread+0x74>)
    69b6:	f7ff f9f9 	bl	5dac <z_spin_lock_valid>
    69ba:	b968      	cbnz	r0, 69d8 <z_ready_thread+0x38>
    69bc:	4a16      	ldr	r2, [pc, #88]	; (6a18 <z_ready_thread+0x78>)
    69be:	4917      	ldr	r1, [pc, #92]	; (6a1c <z_ready_thread+0x7c>)
    69c0:	4817      	ldr	r0, [pc, #92]	; (6a20 <z_ready_thread+0x80>)
    69c2:	2381      	movs	r3, #129	; 0x81
    69c4:	f001 fca4 	bl	8310 <printk>
    69c8:	4912      	ldr	r1, [pc, #72]	; (6a14 <z_ready_thread+0x74>)
    69ca:	4816      	ldr	r0, [pc, #88]	; (6a24 <z_ready_thread+0x84>)
    69cc:	f001 fca0 	bl	8310 <printk>
    69d0:	4811      	ldr	r0, [pc, #68]	; (6a18 <z_ready_thread+0x78>)
    69d2:	2181      	movs	r1, #129	; 0x81
    69d4:	f001 fd68 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    69d8:	480e      	ldr	r0, [pc, #56]	; (6a14 <z_ready_thread+0x74>)
    69da:	f7ff fa05 	bl	5de8 <z_spin_lock_set_owner>
			ready_thread(thread);
    69de:	4620      	mov	r0, r4
    69e0:	f7ff ff8c 	bl	68fc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    69e4:	480b      	ldr	r0, [pc, #44]	; (6a14 <z_ready_thread+0x74>)
    69e6:	f7ff f9ef 	bl	5dc8 <z_spin_unlock_valid>
    69ea:	b968      	cbnz	r0, 6a08 <z_ready_thread+0x68>
    69ec:	4a0a      	ldr	r2, [pc, #40]	; (6a18 <z_ready_thread+0x78>)
    69ee:	490e      	ldr	r1, [pc, #56]	; (6a28 <z_ready_thread+0x88>)
    69f0:	480b      	ldr	r0, [pc, #44]	; (6a20 <z_ready_thread+0x80>)
    69f2:	23ac      	movs	r3, #172	; 0xac
    69f4:	f001 fc8c 	bl	8310 <printk>
    69f8:	4906      	ldr	r1, [pc, #24]	; (6a14 <z_ready_thread+0x74>)
    69fa:	480c      	ldr	r0, [pc, #48]	; (6a2c <z_ready_thread+0x8c>)
    69fc:	f001 fc88 	bl	8310 <printk>
    6a00:	4805      	ldr	r0, [pc, #20]	; (6a18 <z_ready_thread+0x78>)
    6a02:	21ac      	movs	r1, #172	; 0xac
    6a04:	f001 fd50 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    6a08:	f385 8811 	msr	BASEPRI, r5
    6a0c:	f3bf 8f6f 	isb	sy
}
    6a10:	bd38      	pop	{r3, r4, r5, pc}
    6a12:	bf00      	nop
    6a14:	20000cd8 	.word	0x20000cd8
    6a18:	0000966e 	.word	0x0000966e
    6a1c:	000096c0 	.word	0x000096c0
    6a20:	00009128 	.word	0x00009128
    6a24:	000096d5 	.word	0x000096d5
    6a28:	00009694 	.word	0x00009694
    6a2c:	000096ab 	.word	0x000096ab

00006a30 <z_sched_start>:
{
    6a30:	b538      	push	{r3, r4, r5, lr}
    6a32:	4604      	mov	r4, r0
	__asm__ volatile(
    6a34:	f04f 0320 	mov.w	r3, #32
    6a38:	f3ef 8511 	mrs	r5, BASEPRI
    6a3c:	f383 8812 	msr	BASEPRI_MAX, r3
    6a40:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a44:	481d      	ldr	r0, [pc, #116]	; (6abc <z_sched_start+0x8c>)
    6a46:	f7ff f9b1 	bl	5dac <z_spin_lock_valid>
    6a4a:	b968      	cbnz	r0, 6a68 <z_sched_start+0x38>
    6a4c:	4a1c      	ldr	r2, [pc, #112]	; (6ac0 <z_sched_start+0x90>)
    6a4e:	491d      	ldr	r1, [pc, #116]	; (6ac4 <z_sched_start+0x94>)
    6a50:	481d      	ldr	r0, [pc, #116]	; (6ac8 <z_sched_start+0x98>)
    6a52:	2381      	movs	r3, #129	; 0x81
    6a54:	f001 fc5c 	bl	8310 <printk>
    6a58:	4918      	ldr	r1, [pc, #96]	; (6abc <z_sched_start+0x8c>)
    6a5a:	481c      	ldr	r0, [pc, #112]	; (6acc <z_sched_start+0x9c>)
    6a5c:	f001 fc58 	bl	8310 <printk>
    6a60:	4817      	ldr	r0, [pc, #92]	; (6ac0 <z_sched_start+0x90>)
    6a62:	2181      	movs	r1, #129	; 0x81
    6a64:	f001 fd20 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6a68:	4814      	ldr	r0, [pc, #80]	; (6abc <z_sched_start+0x8c>)
    6a6a:	f7ff f9bd 	bl	5de8 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    6a6e:	7b63      	ldrb	r3, [r4, #13]
    6a70:	075a      	lsls	r2, r3, #29
    6a72:	d416      	bmi.n	6aa2 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6a74:	4811      	ldr	r0, [pc, #68]	; (6abc <z_sched_start+0x8c>)
    6a76:	f7ff f9a7 	bl	5dc8 <z_spin_unlock_valid>
    6a7a:	b968      	cbnz	r0, 6a98 <z_sched_start+0x68>
    6a7c:	4a10      	ldr	r2, [pc, #64]	; (6ac0 <z_sched_start+0x90>)
    6a7e:	4914      	ldr	r1, [pc, #80]	; (6ad0 <z_sched_start+0xa0>)
    6a80:	4811      	ldr	r0, [pc, #68]	; (6ac8 <z_sched_start+0x98>)
    6a82:	23ac      	movs	r3, #172	; 0xac
    6a84:	f001 fc44 	bl	8310 <printk>
    6a88:	490c      	ldr	r1, [pc, #48]	; (6abc <z_sched_start+0x8c>)
    6a8a:	4812      	ldr	r0, [pc, #72]	; (6ad4 <z_sched_start+0xa4>)
    6a8c:	f001 fc40 	bl	8310 <printk>
    6a90:	480b      	ldr	r0, [pc, #44]	; (6ac0 <z_sched_start+0x90>)
    6a92:	21ac      	movs	r1, #172	; 0xac
    6a94:	f001 fd08 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    6a98:	f385 8811 	msr	BASEPRI, r5
    6a9c:	f3bf 8f6f 	isb	sy
}
    6aa0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6aa2:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    6aa6:	4620      	mov	r0, r4
    6aa8:	7363      	strb	r3, [r4, #13]
    6aaa:	f7ff ff27 	bl	68fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6aae:	4629      	mov	r1, r5
    6ab0:	4802      	ldr	r0, [pc, #8]	; (6abc <z_sched_start+0x8c>)
}
    6ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    6ab6:	f7ff bd1f 	b.w	64f8 <z_reschedule>
    6aba:	bf00      	nop
    6abc:	20000cd8 	.word	0x20000cd8
    6ac0:	0000966e 	.word	0x0000966e
    6ac4:	000096c0 	.word	0x000096c0
    6ac8:	00009128 	.word	0x00009128
    6acc:	000096d5 	.word	0x000096d5
    6ad0:	00009694 	.word	0x00009694
    6ad4:	000096ab 	.word	0x000096ab

00006ad8 <z_thread_timeout>:
{
    6ad8:	b570      	push	{r4, r5, r6, lr}
    6ada:	4604      	mov	r4, r0
	__asm__ volatile(
    6adc:	f04f 0320 	mov.w	r3, #32
    6ae0:	f3ef 8611 	mrs	r6, BASEPRI
    6ae4:	f383 8812 	msr	BASEPRI_MAX, r3
    6ae8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6aec:	4820      	ldr	r0, [pc, #128]	; (6b70 <z_thread_timeout+0x98>)
    6aee:	f7ff f95d 	bl	5dac <z_spin_lock_valid>
    6af2:	b968      	cbnz	r0, 6b10 <z_thread_timeout+0x38>
    6af4:	4a1f      	ldr	r2, [pc, #124]	; (6b74 <z_thread_timeout+0x9c>)
    6af6:	4920      	ldr	r1, [pc, #128]	; (6b78 <z_thread_timeout+0xa0>)
    6af8:	4820      	ldr	r0, [pc, #128]	; (6b7c <z_thread_timeout+0xa4>)
    6afa:	2381      	movs	r3, #129	; 0x81
    6afc:	f001 fc08 	bl	8310 <printk>
    6b00:	491b      	ldr	r1, [pc, #108]	; (6b70 <z_thread_timeout+0x98>)
    6b02:	481f      	ldr	r0, [pc, #124]	; (6b80 <z_thread_timeout+0xa8>)
    6b04:	f001 fc04 	bl	8310 <printk>
    6b08:	481a      	ldr	r0, [pc, #104]	; (6b74 <z_thread_timeout+0x9c>)
    6b0a:	2181      	movs	r1, #129	; 0x81
    6b0c:	f001 fccc 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6b10:	4817      	ldr	r0, [pc, #92]	; (6b70 <z_thread_timeout+0x98>)
    6b12:	f7ff f969 	bl	5de8 <z_spin_lock_set_owner>
		if (!killed) {
    6b16:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6b1a:	f013 0f28 	tst.w	r3, #40	; 0x28
    6b1e:	d110      	bne.n	6b42 <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    6b20:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6b24:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6b28:	b113      	cbz	r3, 6b30 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6b2a:	4628      	mov	r0, r5
    6b2c:	f7ff fdbe 	bl	66ac <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6b30:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6b34:	f023 0314 	bic.w	r3, r3, #20
    6b38:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6b3c:	4628      	mov	r0, r5
    6b3e:	f7ff fedd 	bl	68fc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b42:	480b      	ldr	r0, [pc, #44]	; (6b70 <z_thread_timeout+0x98>)
    6b44:	f7ff f940 	bl	5dc8 <z_spin_unlock_valid>
    6b48:	b968      	cbnz	r0, 6b66 <z_thread_timeout+0x8e>
    6b4a:	4a0a      	ldr	r2, [pc, #40]	; (6b74 <z_thread_timeout+0x9c>)
    6b4c:	490d      	ldr	r1, [pc, #52]	; (6b84 <z_thread_timeout+0xac>)
    6b4e:	480b      	ldr	r0, [pc, #44]	; (6b7c <z_thread_timeout+0xa4>)
    6b50:	23ac      	movs	r3, #172	; 0xac
    6b52:	f001 fbdd 	bl	8310 <printk>
    6b56:	4906      	ldr	r1, [pc, #24]	; (6b70 <z_thread_timeout+0x98>)
    6b58:	480b      	ldr	r0, [pc, #44]	; (6b88 <z_thread_timeout+0xb0>)
    6b5a:	f001 fbd9 	bl	8310 <printk>
    6b5e:	4805      	ldr	r0, [pc, #20]	; (6b74 <z_thread_timeout+0x9c>)
    6b60:	21ac      	movs	r1, #172	; 0xac
    6b62:	f001 fca1 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    6b66:	f386 8811 	msr	BASEPRI, r6
    6b6a:	f3bf 8f6f 	isb	sy
}
    6b6e:	bd70      	pop	{r4, r5, r6, pc}
    6b70:	20000cd8 	.word	0x20000cd8
    6b74:	0000966e 	.word	0x0000966e
    6b78:	000096c0 	.word	0x000096c0
    6b7c:	00009128 	.word	0x00009128
    6b80:	000096d5 	.word	0x000096d5
    6b84:	00009694 	.word	0x00009694
    6b88:	000096ab 	.word	0x000096ab

00006b8c <unready_thread>:
{
    6b8c:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    6b8e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6b92:	7b43      	ldrb	r3, [r0, #13]
    6b94:	2a00      	cmp	r2, #0
{
    6b96:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6b98:	da06      	bge.n	6ba8 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6b9e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6ba0:	4601      	mov	r1, r0
    6ba2:	4806      	ldr	r0, [pc, #24]	; (6bbc <unready_thread+0x30>)
    6ba4:	f7ff fd60 	bl	6668 <z_priq_dumb_remove>
	update_cache(thread == _current);
    6ba8:	4b05      	ldr	r3, [pc, #20]	; (6bc0 <unready_thread+0x34>)
    6baa:	6898      	ldr	r0, [r3, #8]
    6bac:	1b03      	subs	r3, r0, r4
    6bae:	4258      	negs	r0, r3
}
    6bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    6bb4:	4158      	adcs	r0, r3
    6bb6:	f7ff bd9b 	b.w	66f0 <update_cache>
    6bba:	bf00      	nop
    6bbc:	20000cc4 	.word	0x20000cc4
    6bc0:	20000ca4 	.word	0x20000ca4

00006bc4 <add_to_waitq_locked>:
{
    6bc4:	b538      	push	{r3, r4, r5, lr}
    6bc6:	4604      	mov	r4, r0
    6bc8:	460d      	mov	r5, r1
	unready_thread(thread);
    6bca:	f7ff ffdf 	bl	6b8c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6bce:	7b63      	ldrb	r3, [r4, #13]
    6bd0:	f043 0302 	orr.w	r3, r3, #2
    6bd4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6bd6:	b31d      	cbz	r5, 6c20 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6bd8:	4b17      	ldr	r3, [pc, #92]	; (6c38 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    6bda:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6bdc:	429c      	cmp	r4, r3
    6bde:	d109      	bne.n	6bf4 <add_to_waitq_locked+0x30>
    6be0:	4916      	ldr	r1, [pc, #88]	; (6c3c <add_to_waitq_locked+0x78>)
    6be2:	4817      	ldr	r0, [pc, #92]	; (6c40 <add_to_waitq_locked+0x7c>)
    6be4:	4a17      	ldr	r2, [pc, #92]	; (6c44 <add_to_waitq_locked+0x80>)
    6be6:	23ba      	movs	r3, #186	; 0xba
    6be8:	f001 fb92 	bl	8310 <printk>
    6bec:	4815      	ldr	r0, [pc, #84]	; (6c44 <add_to_waitq_locked+0x80>)
    6bee:	21ba      	movs	r1, #186	; 0xba
    6bf0:	f001 fc5a 	bl	84a8 <assert_post_action>
	return list->head == list;
    6bf4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6bf6:	429d      	cmp	r5, r3
    6bf8:	bf08      	it	eq
    6bfa:	2300      	moveq	r3, #0
    6bfc:	2b00      	cmp	r3, #0
    6bfe:	bf38      	it	cc
    6c00:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c02:	b19b      	cbz	r3, 6c2c <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    6c04:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6c08:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6c0c:	4291      	cmp	r1, r2
    6c0e:	d008      	beq.n	6c22 <add_to_waitq_locked+0x5e>
		return b2 - b1;
    6c10:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c12:	2a00      	cmp	r2, #0
    6c14:	dd05      	ble.n	6c22 <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    6c16:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6c18:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6c1c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6c1e:	605c      	str	r4, [r3, #4]
}
    6c20:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6c22:	686a      	ldr	r2, [r5, #4]
    6c24:	4293      	cmp	r3, r2
    6c26:	d001      	beq.n	6c2c <add_to_waitq_locked+0x68>
    6c28:	681b      	ldr	r3, [r3, #0]
    6c2a:	e7ea      	b.n	6c02 <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    6c2c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6c2e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6c32:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6c34:	606c      	str	r4, [r5, #4]
    6c36:	e7f3      	b.n	6c20 <add_to_waitq_locked+0x5c>
    6c38:	200004f0 	.word	0x200004f0
    6c3c:	0000a2bc 	.word	0x0000a2bc
    6c40:	00009128 	.word	0x00009128
    6c44:	0000a29a 	.word	0x0000a29a

00006c48 <pend>:
{
    6c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c4c:	4604      	mov	r4, r0
    6c4e:	460d      	mov	r5, r1
    6c50:	4616      	mov	r6, r2
    6c52:	461f      	mov	r7, r3
	__asm__ volatile(
    6c54:	f04f 0320 	mov.w	r3, #32
    6c58:	f3ef 8811 	mrs	r8, BASEPRI
    6c5c:	f383 8812 	msr	BASEPRI_MAX, r3
    6c60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6c64:	481f      	ldr	r0, [pc, #124]	; (6ce4 <pend+0x9c>)
    6c66:	f7ff f8a1 	bl	5dac <z_spin_lock_valid>
    6c6a:	b968      	cbnz	r0, 6c88 <pend+0x40>
    6c6c:	4a1e      	ldr	r2, [pc, #120]	; (6ce8 <pend+0xa0>)
    6c6e:	491f      	ldr	r1, [pc, #124]	; (6cec <pend+0xa4>)
    6c70:	481f      	ldr	r0, [pc, #124]	; (6cf0 <pend+0xa8>)
    6c72:	2381      	movs	r3, #129	; 0x81
    6c74:	f001 fb4c 	bl	8310 <printk>
    6c78:	491a      	ldr	r1, [pc, #104]	; (6ce4 <pend+0x9c>)
    6c7a:	481e      	ldr	r0, [pc, #120]	; (6cf4 <pend+0xac>)
    6c7c:	f001 fb48 	bl	8310 <printk>
    6c80:	4819      	ldr	r0, [pc, #100]	; (6ce8 <pend+0xa0>)
    6c82:	2181      	movs	r1, #129	; 0x81
    6c84:	f001 fc10 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6c88:	4816      	ldr	r0, [pc, #88]	; (6ce4 <pend+0x9c>)
    6c8a:	f7ff f8ad 	bl	5de8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    6c8e:	4620      	mov	r0, r4
    6c90:	4629      	mov	r1, r5
    6c92:	f7ff ff97 	bl	6bc4 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c96:	4813      	ldr	r0, [pc, #76]	; (6ce4 <pend+0x9c>)
    6c98:	f7ff f896 	bl	5dc8 <z_spin_unlock_valid>
    6c9c:	b968      	cbnz	r0, 6cba <pend+0x72>
    6c9e:	4a12      	ldr	r2, [pc, #72]	; (6ce8 <pend+0xa0>)
    6ca0:	4915      	ldr	r1, [pc, #84]	; (6cf8 <pend+0xb0>)
    6ca2:	4813      	ldr	r0, [pc, #76]	; (6cf0 <pend+0xa8>)
    6ca4:	23ac      	movs	r3, #172	; 0xac
    6ca6:	f001 fb33 	bl	8310 <printk>
    6caa:	490e      	ldr	r1, [pc, #56]	; (6ce4 <pend+0x9c>)
    6cac:	4813      	ldr	r0, [pc, #76]	; (6cfc <pend+0xb4>)
    6cae:	f001 fb2f 	bl	8310 <printk>
    6cb2:	480d      	ldr	r0, [pc, #52]	; (6ce8 <pend+0xa0>)
    6cb4:	21ac      	movs	r1, #172	; 0xac
    6cb6:	f001 fbf7 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    6cba:	f388 8811 	msr	BASEPRI, r8
    6cbe:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6cc2:	1c7b      	adds	r3, r7, #1
    6cc4:	bf08      	it	eq
    6cc6:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6cca:	d008      	beq.n	6cde <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6ccc:	4632      	mov	r2, r6
    6cce:	463b      	mov	r3, r7
    6cd0:	f104 0018 	add.w	r0, r4, #24
    6cd4:	490a      	ldr	r1, [pc, #40]	; (6d00 <pend+0xb8>)
}
    6cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6cda:	f000 bd1b 	b.w	7714 <z_add_timeout>
    6cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6ce2:	bf00      	nop
    6ce4:	20000cd8 	.word	0x20000cd8
    6ce8:	0000966e 	.word	0x0000966e
    6cec:	000096c0 	.word	0x000096c0
    6cf0:	00009128 	.word	0x00009128
    6cf4:	000096d5 	.word	0x000096d5
    6cf8:	00009694 	.word	0x00009694
    6cfc:	000096ab 	.word	0x000096ab
    6d00:	00006ad9 	.word	0x00006ad9

00006d04 <z_pend_curr>:
{
    6d04:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    6d06:	4b11      	ldr	r3, [pc, #68]	; (6d4c <z_pend_curr+0x48>)
{
    6d08:	4604      	mov	r4, r0
	pending_current = _current;
    6d0a:	6898      	ldr	r0, [r3, #8]
    6d0c:	4b10      	ldr	r3, [pc, #64]	; (6d50 <z_pend_curr+0x4c>)
{
    6d0e:	460d      	mov	r5, r1
	pending_current = _current;
    6d10:	6018      	str	r0, [r3, #0]
{
    6d12:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    6d14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6d18:	f7ff ff96 	bl	6c48 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d1c:	4620      	mov	r0, r4
    6d1e:	f7ff f853 	bl	5dc8 <z_spin_unlock_valid>
    6d22:	b968      	cbnz	r0, 6d40 <z_pend_curr+0x3c>
    6d24:	4a0b      	ldr	r2, [pc, #44]	; (6d54 <z_pend_curr+0x50>)
    6d26:	490c      	ldr	r1, [pc, #48]	; (6d58 <z_pend_curr+0x54>)
    6d28:	480c      	ldr	r0, [pc, #48]	; (6d5c <z_pend_curr+0x58>)
    6d2a:	23c3      	movs	r3, #195	; 0xc3
    6d2c:	f001 faf0 	bl	8310 <printk>
    6d30:	480b      	ldr	r0, [pc, #44]	; (6d60 <z_pend_curr+0x5c>)
    6d32:	4621      	mov	r1, r4
    6d34:	f001 faec 	bl	8310 <printk>
    6d38:	4806      	ldr	r0, [pc, #24]	; (6d54 <z_pend_curr+0x50>)
    6d3a:	21c3      	movs	r1, #195	; 0xc3
    6d3c:	f001 fbb4 	bl	84a8 <assert_post_action>
    6d40:	4628      	mov	r0, r5
}
    6d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6d46:	f7fb bc63 	b.w	2610 <arch_swap>
    6d4a:	bf00      	nop
    6d4c:	20000ca4 	.word	0x20000ca4
    6d50:	20000cd4 	.word	0x20000cd4
    6d54:	0000966e 	.word	0x0000966e
    6d58:	00009694 	.word	0x00009694
    6d5c:	00009128 	.word	0x00009128
    6d60:	000096ab 	.word	0x000096ab

00006d64 <z_set_prio>:
{
    6d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d66:	4604      	mov	r4, r0
    6d68:	460e      	mov	r6, r1
	__asm__ volatile(
    6d6a:	f04f 0320 	mov.w	r3, #32
    6d6e:	f3ef 8711 	mrs	r7, BASEPRI
    6d72:	f383 8812 	msr	BASEPRI_MAX, r3
    6d76:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d7a:	483c      	ldr	r0, [pc, #240]	; (6e6c <z_set_prio+0x108>)
    6d7c:	f7ff f816 	bl	5dac <z_spin_lock_valid>
    6d80:	b968      	cbnz	r0, 6d9e <z_set_prio+0x3a>
    6d82:	4a3b      	ldr	r2, [pc, #236]	; (6e70 <z_set_prio+0x10c>)
    6d84:	493b      	ldr	r1, [pc, #236]	; (6e74 <z_set_prio+0x110>)
    6d86:	483c      	ldr	r0, [pc, #240]	; (6e78 <z_set_prio+0x114>)
    6d88:	2381      	movs	r3, #129	; 0x81
    6d8a:	f001 fac1 	bl	8310 <printk>
    6d8e:	4937      	ldr	r1, [pc, #220]	; (6e6c <z_set_prio+0x108>)
    6d90:	483a      	ldr	r0, [pc, #232]	; (6e7c <z_set_prio+0x118>)
    6d92:	f001 fabd 	bl	8310 <printk>
    6d96:	4836      	ldr	r0, [pc, #216]	; (6e70 <z_set_prio+0x10c>)
    6d98:	2181      	movs	r1, #129	; 0x81
    6d9a:	f001 fb85 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d9e:	4833      	ldr	r0, [pc, #204]	; (6e6c <z_set_prio+0x108>)
    6da0:	f7ff f822 	bl	5de8 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6da4:	7b63      	ldrb	r3, [r4, #13]
    6da6:	06da      	lsls	r2, r3, #27
    6da8:	b276      	sxtb	r6, r6
    6daa:	d15c      	bne.n	6e66 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    6dac:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    6dae:	2d00      	cmp	r5, #0
    6db0:	d159      	bne.n	6e66 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6db6:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6db8:	4831      	ldr	r0, [pc, #196]	; (6e80 <z_set_prio+0x11c>)
    6dba:	4621      	mov	r1, r4
    6dbc:	f7ff fc54 	bl	6668 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6dc0:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6dc2:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6dc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6dc8:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6dca:	4b2e      	ldr	r3, [pc, #184]	; (6e84 <z_set_prio+0x120>)
    6dcc:	429c      	cmp	r4, r3
    6dce:	d109      	bne.n	6de4 <z_set_prio+0x80>
    6dd0:	492d      	ldr	r1, [pc, #180]	; (6e88 <z_set_prio+0x124>)
    6dd2:	4829      	ldr	r0, [pc, #164]	; (6e78 <z_set_prio+0x114>)
    6dd4:	4a2d      	ldr	r2, [pc, #180]	; (6e8c <z_set_prio+0x128>)
    6dd6:	23ba      	movs	r3, #186	; 0xba
    6dd8:	f001 fa9a 	bl	8310 <printk>
    6ddc:	482b      	ldr	r0, [pc, #172]	; (6e8c <z_set_prio+0x128>)
    6dde:	21ba      	movs	r1, #186	; 0xba
    6de0:	f001 fb62 	bl	84a8 <assert_post_action>
	return list->head == list;
    6de4:	492a      	ldr	r1, [pc, #168]	; (6e90 <z_set_prio+0x12c>)
    6de6:	460b      	mov	r3, r1
    6de8:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6dec:	4298      	cmp	r0, r3
    6dee:	bf18      	it	ne
    6df0:	4605      	movne	r5, r0
    6df2:	2d00      	cmp	r5, #0
    6df4:	461a      	mov	r2, r3
    6df6:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6df8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6dfa:	bf38      	it	cc
    6dfc:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6dfe:	b36b      	cbz	r3, 6e5c <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    6e00:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6e04:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6e08:	4286      	cmp	r6, r0
    6e0a:	d023      	beq.n	6e54 <z_set_prio+0xf0>
		return b2 - b1;
    6e0c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6e0e:	2800      	cmp	r0, #0
    6e10:	dd20      	ble.n	6e54 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    6e12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6e14:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6e18:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6e1a:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6e1c:	2001      	movs	r0, #1
    6e1e:	f7ff fc67 	bl	66f0 <update_cache>
    6e22:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e24:	4811      	ldr	r0, [pc, #68]	; (6e6c <z_set_prio+0x108>)
    6e26:	f7fe ffcf 	bl	5dc8 <z_spin_unlock_valid>
    6e2a:	b968      	cbnz	r0, 6e48 <z_set_prio+0xe4>
    6e2c:	4a10      	ldr	r2, [pc, #64]	; (6e70 <z_set_prio+0x10c>)
    6e2e:	4919      	ldr	r1, [pc, #100]	; (6e94 <z_set_prio+0x130>)
    6e30:	4811      	ldr	r0, [pc, #68]	; (6e78 <z_set_prio+0x114>)
    6e32:	23ac      	movs	r3, #172	; 0xac
    6e34:	f001 fa6c 	bl	8310 <printk>
    6e38:	490c      	ldr	r1, [pc, #48]	; (6e6c <z_set_prio+0x108>)
    6e3a:	4817      	ldr	r0, [pc, #92]	; (6e98 <z_set_prio+0x134>)
    6e3c:	f001 fa68 	bl	8310 <printk>
    6e40:	480b      	ldr	r0, [pc, #44]	; (6e70 <z_set_prio+0x10c>)
    6e42:	21ac      	movs	r1, #172	; 0xac
    6e44:	f001 fb30 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    6e48:	f387 8811 	msr	BASEPRI, r7
    6e4c:	f3bf 8f6f 	isb	sy
}
    6e50:	4620      	mov	r0, r4
    6e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6e54:	42ab      	cmp	r3, r5
    6e56:	d001      	beq.n	6e5c <z_set_prio+0xf8>
    6e58:	681b      	ldr	r3, [r3, #0]
    6e5a:	e7d0      	b.n	6dfe <z_set_prio+0x9a>
	node->prev = tail;
    6e5c:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6e60:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6e62:	624c      	str	r4, [r1, #36]	; 0x24
}
    6e64:	e7da      	b.n	6e1c <z_set_prio+0xb8>
			thread->base.prio = prio;
    6e66:	73a6      	strb	r6, [r4, #14]
    6e68:	2400      	movs	r4, #0
    6e6a:	e7db      	b.n	6e24 <z_set_prio+0xc0>
    6e6c:	20000cd8 	.word	0x20000cd8
    6e70:	0000966e 	.word	0x0000966e
    6e74:	000096c0 	.word	0x000096c0
    6e78:	00009128 	.word	0x00009128
    6e7c:	000096d5 	.word	0x000096d5
    6e80:	20000cc4 	.word	0x20000cc4
    6e84:	200004f0 	.word	0x200004f0
    6e88:	0000a2bc 	.word	0x0000a2bc
    6e8c:	0000a29a 	.word	0x0000a29a
    6e90:	20000ca4 	.word	0x20000ca4
    6e94:	00009694 	.word	0x00009694
    6e98:	000096ab 	.word	0x000096ab

00006e9c <z_impl_k_thread_suspend>:
{
    6e9c:	b570      	push	{r4, r5, r6, lr}
    6e9e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6ea0:	3018      	adds	r0, #24
    6ea2:	f000 fd0b 	bl	78bc <z_abort_timeout>
	__asm__ volatile(
    6ea6:	f04f 0320 	mov.w	r3, #32
    6eaa:	f3ef 8611 	mrs	r6, BASEPRI
    6eae:	f383 8812 	msr	BASEPRI_MAX, r3
    6eb2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6eb6:	4825      	ldr	r0, [pc, #148]	; (6f4c <z_impl_k_thread_suspend+0xb0>)
    6eb8:	f7fe ff78 	bl	5dac <z_spin_lock_valid>
    6ebc:	b968      	cbnz	r0, 6eda <z_impl_k_thread_suspend+0x3e>
    6ebe:	4a24      	ldr	r2, [pc, #144]	; (6f50 <z_impl_k_thread_suspend+0xb4>)
    6ec0:	4924      	ldr	r1, [pc, #144]	; (6f54 <z_impl_k_thread_suspend+0xb8>)
    6ec2:	4825      	ldr	r0, [pc, #148]	; (6f58 <z_impl_k_thread_suspend+0xbc>)
    6ec4:	2381      	movs	r3, #129	; 0x81
    6ec6:	f001 fa23 	bl	8310 <printk>
    6eca:	4920      	ldr	r1, [pc, #128]	; (6f4c <z_impl_k_thread_suspend+0xb0>)
    6ecc:	4823      	ldr	r0, [pc, #140]	; (6f5c <z_impl_k_thread_suspend+0xc0>)
    6ece:	f001 fa1f 	bl	8310 <printk>
    6ed2:	481f      	ldr	r0, [pc, #124]	; (6f50 <z_impl_k_thread_suspend+0xb4>)
    6ed4:	2181      	movs	r1, #129	; 0x81
    6ed6:	f001 fae7 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6eda:	481c      	ldr	r0, [pc, #112]	; (6f4c <z_impl_k_thread_suspend+0xb0>)
    6edc:	f7fe ff84 	bl	5de8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6ee0:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6ee4:	7b63      	ldrb	r3, [r4, #13]
    6ee6:	2a00      	cmp	r2, #0
    6ee8:	da06      	bge.n	6ef8 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    6eee:	481c      	ldr	r0, [pc, #112]	; (6f60 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6ef0:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6ef2:	4621      	mov	r1, r4
    6ef4:	f7ff fbb8 	bl	6668 <z_priq_dumb_remove>
		update_cache(thread == _current);
    6ef8:	4d1a      	ldr	r5, [pc, #104]	; (6f64 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6efa:	7b63      	ldrb	r3, [r4, #13]
    6efc:	68a8      	ldr	r0, [r5, #8]
    6efe:	f043 0310 	orr.w	r3, r3, #16
    6f02:	7363      	strb	r3, [r4, #13]
    6f04:	1b03      	subs	r3, r0, r4
    6f06:	4258      	negs	r0, r3
    6f08:	4158      	adcs	r0, r3
    6f0a:	f7ff fbf1 	bl	66f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f0e:	480f      	ldr	r0, [pc, #60]	; (6f4c <z_impl_k_thread_suspend+0xb0>)
    6f10:	f7fe ff5a 	bl	5dc8 <z_spin_unlock_valid>
    6f14:	b968      	cbnz	r0, 6f32 <z_impl_k_thread_suspend+0x96>
    6f16:	4a0e      	ldr	r2, [pc, #56]	; (6f50 <z_impl_k_thread_suspend+0xb4>)
    6f18:	4913      	ldr	r1, [pc, #76]	; (6f68 <z_impl_k_thread_suspend+0xcc>)
    6f1a:	480f      	ldr	r0, [pc, #60]	; (6f58 <z_impl_k_thread_suspend+0xbc>)
    6f1c:	23ac      	movs	r3, #172	; 0xac
    6f1e:	f001 f9f7 	bl	8310 <printk>
    6f22:	490a      	ldr	r1, [pc, #40]	; (6f4c <z_impl_k_thread_suspend+0xb0>)
    6f24:	4811      	ldr	r0, [pc, #68]	; (6f6c <z_impl_k_thread_suspend+0xd0>)
    6f26:	f001 f9f3 	bl	8310 <printk>
    6f2a:	4809      	ldr	r0, [pc, #36]	; (6f50 <z_impl_k_thread_suspend+0xb4>)
    6f2c:	21ac      	movs	r1, #172	; 0xac
    6f2e:	f001 fabb 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    6f32:	f386 8811 	msr	BASEPRI, r6
    6f36:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6f3a:	68ab      	ldr	r3, [r5, #8]
    6f3c:	42a3      	cmp	r3, r4
    6f3e:	d103      	bne.n	6f48 <z_impl_k_thread_suspend+0xac>
}
    6f40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6f44:	f001 be10 	b.w	8b68 <z_reschedule_unlocked>
}
    6f48:	bd70      	pop	{r4, r5, r6, pc}
    6f4a:	bf00      	nop
    6f4c:	20000cd8 	.word	0x20000cd8
    6f50:	0000966e 	.word	0x0000966e
    6f54:	000096c0 	.word	0x000096c0
    6f58:	00009128 	.word	0x00009128
    6f5c:	000096d5 	.word	0x000096d5
    6f60:	20000cc4 	.word	0x20000cc4
    6f64:	20000ca4 	.word	0x20000ca4
    6f68:	00009694 	.word	0x00009694
    6f6c:	000096ab 	.word	0x000096ab

00006f70 <k_sched_unlock>:
{
    6f70:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6f72:	f04f 0320 	mov.w	r3, #32
    6f76:	f3ef 8511 	mrs	r5, BASEPRI
    6f7a:	f383 8812 	msr	BASEPRI_MAX, r3
    6f7e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f82:	482d      	ldr	r0, [pc, #180]	; (7038 <k_sched_unlock+0xc8>)
    6f84:	f7fe ff12 	bl	5dac <z_spin_lock_valid>
    6f88:	b968      	cbnz	r0, 6fa6 <k_sched_unlock+0x36>
    6f8a:	4a2c      	ldr	r2, [pc, #176]	; (703c <k_sched_unlock+0xcc>)
    6f8c:	492c      	ldr	r1, [pc, #176]	; (7040 <k_sched_unlock+0xd0>)
    6f8e:	482d      	ldr	r0, [pc, #180]	; (7044 <k_sched_unlock+0xd4>)
    6f90:	2381      	movs	r3, #129	; 0x81
    6f92:	f001 f9bd 	bl	8310 <printk>
    6f96:	4928      	ldr	r1, [pc, #160]	; (7038 <k_sched_unlock+0xc8>)
    6f98:	482b      	ldr	r0, [pc, #172]	; (7048 <k_sched_unlock+0xd8>)
    6f9a:	f001 f9b9 	bl	8310 <printk>
    6f9e:	4827      	ldr	r0, [pc, #156]	; (703c <k_sched_unlock+0xcc>)
    6fa0:	2181      	movs	r1, #129	; 0x81
    6fa2:	f001 fa81 	bl	84a8 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    6fa6:	4c29      	ldr	r4, [pc, #164]	; (704c <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    6fa8:	4823      	ldr	r0, [pc, #140]	; (7038 <k_sched_unlock+0xc8>)
    6faa:	f7fe ff1d 	bl	5de8 <z_spin_lock_set_owner>
    6fae:	68a2      	ldr	r2, [r4, #8]
    6fb0:	7bd2      	ldrb	r2, [r2, #15]
    6fb2:	b972      	cbnz	r2, 6fd2 <k_sched_unlock+0x62>
    6fb4:	4926      	ldr	r1, [pc, #152]	; (7050 <k_sched_unlock+0xe0>)
    6fb6:	4a27      	ldr	r2, [pc, #156]	; (7054 <k_sched_unlock+0xe4>)
    6fb8:	4822      	ldr	r0, [pc, #136]	; (7044 <k_sched_unlock+0xd4>)
    6fba:	f240 3385 	movw	r3, #901	; 0x385
    6fbe:	f001 f9a7 	bl	8310 <printk>
    6fc2:	4825      	ldr	r0, [pc, #148]	; (7058 <k_sched_unlock+0xe8>)
    6fc4:	f001 f9a4 	bl	8310 <printk>
    6fc8:	4822      	ldr	r0, [pc, #136]	; (7054 <k_sched_unlock+0xe4>)
    6fca:	f240 3185 	movw	r1, #901	; 0x385
    6fce:	f001 fa6b 	bl	84a8 <assert_post_action>
    6fd2:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    6fd6:	b173      	cbz	r3, 6ff6 <k_sched_unlock+0x86>
    6fd8:	4920      	ldr	r1, [pc, #128]	; (705c <k_sched_unlock+0xec>)
    6fda:	4a1e      	ldr	r2, [pc, #120]	; (7054 <k_sched_unlock+0xe4>)
    6fdc:	4819      	ldr	r0, [pc, #100]	; (7044 <k_sched_unlock+0xd4>)
    6fde:	f240 3386 	movw	r3, #902	; 0x386
    6fe2:	f001 f995 	bl	8310 <printk>
    6fe6:	481c      	ldr	r0, [pc, #112]	; (7058 <k_sched_unlock+0xe8>)
    6fe8:	f001 f992 	bl	8310 <printk>
    6fec:	4819      	ldr	r0, [pc, #100]	; (7054 <k_sched_unlock+0xe4>)
    6fee:	f240 3186 	movw	r1, #902	; 0x386
    6ff2:	f001 fa59 	bl	84a8 <assert_post_action>
		++_current->base.sched_locked;
    6ff6:	68a2      	ldr	r2, [r4, #8]
    6ff8:	7bd3      	ldrb	r3, [r2, #15]
    6ffa:	3301      	adds	r3, #1
		update_cache(0);
    6ffc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    6ffe:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7000:	f7ff fb76 	bl	66f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7004:	480c      	ldr	r0, [pc, #48]	; (7038 <k_sched_unlock+0xc8>)
    7006:	f7fe fedf 	bl	5dc8 <z_spin_unlock_valid>
    700a:	b968      	cbnz	r0, 7028 <k_sched_unlock+0xb8>
    700c:	4a0b      	ldr	r2, [pc, #44]	; (703c <k_sched_unlock+0xcc>)
    700e:	4914      	ldr	r1, [pc, #80]	; (7060 <k_sched_unlock+0xf0>)
    7010:	480c      	ldr	r0, [pc, #48]	; (7044 <k_sched_unlock+0xd4>)
    7012:	23ac      	movs	r3, #172	; 0xac
    7014:	f001 f97c 	bl	8310 <printk>
    7018:	4907      	ldr	r1, [pc, #28]	; (7038 <k_sched_unlock+0xc8>)
    701a:	4812      	ldr	r0, [pc, #72]	; (7064 <k_sched_unlock+0xf4>)
    701c:	f001 f978 	bl	8310 <printk>
    7020:	4806      	ldr	r0, [pc, #24]	; (703c <k_sched_unlock+0xcc>)
    7022:	21ac      	movs	r1, #172	; 0xac
    7024:	f001 fa40 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7028:	f385 8811 	msr	BASEPRI, r5
    702c:	f3bf 8f6f 	isb	sy
}
    7030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    7034:	f001 bd98 	b.w	8b68 <z_reschedule_unlocked>
    7038:	20000cd8 	.word	0x20000cd8
    703c:	0000966e 	.word	0x0000966e
    7040:	000096c0 	.word	0x000096c0
    7044:	00009128 	.word	0x00009128
    7048:	000096d5 	.word	0x000096d5
    704c:	20000ca4 	.word	0x20000ca4
    7050:	0000a31b 	.word	0x0000a31b
    7054:	0000a29a 	.word	0x0000a29a
    7058:	0000a1f9 	.word	0x0000a1f9
    705c:	0000a0c3 	.word	0x0000a0c3
    7060:	00009694 	.word	0x00009694
    7064:	000096ab 	.word	0x000096ab

00007068 <z_unpend1_no_timeout>:
{
    7068:	b538      	push	{r3, r4, r5, lr}
    706a:	4604      	mov	r4, r0
	__asm__ volatile(
    706c:	f04f 0320 	mov.w	r3, #32
    7070:	f3ef 8511 	mrs	r5, BASEPRI
    7074:	f383 8812 	msr	BASEPRI_MAX, r3
    7078:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    707c:	4819      	ldr	r0, [pc, #100]	; (70e4 <z_unpend1_no_timeout+0x7c>)
    707e:	f7fe fe95 	bl	5dac <z_spin_lock_valid>
    7082:	b968      	cbnz	r0, 70a0 <z_unpend1_no_timeout+0x38>
    7084:	4a18      	ldr	r2, [pc, #96]	; (70e8 <z_unpend1_no_timeout+0x80>)
    7086:	4919      	ldr	r1, [pc, #100]	; (70ec <z_unpend1_no_timeout+0x84>)
    7088:	4819      	ldr	r0, [pc, #100]	; (70f0 <z_unpend1_no_timeout+0x88>)
    708a:	2381      	movs	r3, #129	; 0x81
    708c:	f001 f940 	bl	8310 <printk>
    7090:	4914      	ldr	r1, [pc, #80]	; (70e4 <z_unpend1_no_timeout+0x7c>)
    7092:	4818      	ldr	r0, [pc, #96]	; (70f4 <z_unpend1_no_timeout+0x8c>)
    7094:	f001 f93c 	bl	8310 <printk>
    7098:	4813      	ldr	r0, [pc, #76]	; (70e8 <z_unpend1_no_timeout+0x80>)
    709a:	2181      	movs	r1, #129	; 0x81
    709c:	f001 fa04 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    70a0:	4810      	ldr	r0, [pc, #64]	; (70e4 <z_unpend1_no_timeout+0x7c>)
    70a2:	f7fe fea1 	bl	5de8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    70a6:	4620      	mov	r0, r4
    70a8:	f001 fd68 	bl	8b7c <z_priq_dumb_best>
		if (thread != NULL) {
    70ac:	4604      	mov	r4, r0
    70ae:	b108      	cbz	r0, 70b4 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    70b0:	f7ff fafc 	bl	66ac <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70b4:	480b      	ldr	r0, [pc, #44]	; (70e4 <z_unpend1_no_timeout+0x7c>)
    70b6:	f7fe fe87 	bl	5dc8 <z_spin_unlock_valid>
    70ba:	b968      	cbnz	r0, 70d8 <z_unpend1_no_timeout+0x70>
    70bc:	4a0a      	ldr	r2, [pc, #40]	; (70e8 <z_unpend1_no_timeout+0x80>)
    70be:	490e      	ldr	r1, [pc, #56]	; (70f8 <z_unpend1_no_timeout+0x90>)
    70c0:	480b      	ldr	r0, [pc, #44]	; (70f0 <z_unpend1_no_timeout+0x88>)
    70c2:	23ac      	movs	r3, #172	; 0xac
    70c4:	f001 f924 	bl	8310 <printk>
    70c8:	4906      	ldr	r1, [pc, #24]	; (70e4 <z_unpend1_no_timeout+0x7c>)
    70ca:	480c      	ldr	r0, [pc, #48]	; (70fc <z_unpend1_no_timeout+0x94>)
    70cc:	f001 f920 	bl	8310 <printk>
    70d0:	4805      	ldr	r0, [pc, #20]	; (70e8 <z_unpend1_no_timeout+0x80>)
    70d2:	21ac      	movs	r1, #172	; 0xac
    70d4:	f001 f9e8 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    70d8:	f385 8811 	msr	BASEPRI, r5
    70dc:	f3bf 8f6f 	isb	sy
}
    70e0:	4620      	mov	r0, r4
    70e2:	bd38      	pop	{r3, r4, r5, pc}
    70e4:	20000cd8 	.word	0x20000cd8
    70e8:	0000966e 	.word	0x0000966e
    70ec:	000096c0 	.word	0x000096c0
    70f0:	00009128 	.word	0x00009128
    70f4:	000096d5 	.word	0x000096d5
    70f8:	00009694 	.word	0x00009694
    70fc:	000096ab 	.word	0x000096ab

00007100 <z_unpend_first_thread>:
{
    7100:	b538      	push	{r3, r4, r5, lr}
    7102:	4604      	mov	r4, r0
	__asm__ volatile(
    7104:	f04f 0320 	mov.w	r3, #32
    7108:	f3ef 8511 	mrs	r5, BASEPRI
    710c:	f383 8812 	msr	BASEPRI_MAX, r3
    7110:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7114:	481b      	ldr	r0, [pc, #108]	; (7184 <z_unpend_first_thread+0x84>)
    7116:	f7fe fe49 	bl	5dac <z_spin_lock_valid>
    711a:	b968      	cbnz	r0, 7138 <z_unpend_first_thread+0x38>
    711c:	4a1a      	ldr	r2, [pc, #104]	; (7188 <z_unpend_first_thread+0x88>)
    711e:	491b      	ldr	r1, [pc, #108]	; (718c <z_unpend_first_thread+0x8c>)
    7120:	481b      	ldr	r0, [pc, #108]	; (7190 <z_unpend_first_thread+0x90>)
    7122:	2381      	movs	r3, #129	; 0x81
    7124:	f001 f8f4 	bl	8310 <printk>
    7128:	4916      	ldr	r1, [pc, #88]	; (7184 <z_unpend_first_thread+0x84>)
    712a:	481a      	ldr	r0, [pc, #104]	; (7194 <z_unpend_first_thread+0x94>)
    712c:	f001 f8f0 	bl	8310 <printk>
    7130:	4815      	ldr	r0, [pc, #84]	; (7188 <z_unpend_first_thread+0x88>)
    7132:	2181      	movs	r1, #129	; 0x81
    7134:	f001 f9b8 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7138:	4812      	ldr	r0, [pc, #72]	; (7184 <z_unpend_first_thread+0x84>)
    713a:	f7fe fe55 	bl	5de8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    713e:	4620      	mov	r0, r4
    7140:	f001 fd1c 	bl	8b7c <z_priq_dumb_best>
		if (thread != NULL) {
    7144:	4604      	mov	r4, r0
    7146:	b128      	cbz	r0, 7154 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    7148:	f7ff fab0 	bl	66ac <unpend_thread_no_timeout>
    714c:	f104 0018 	add.w	r0, r4, #24
    7150:	f000 fbb4 	bl	78bc <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7154:	480b      	ldr	r0, [pc, #44]	; (7184 <z_unpend_first_thread+0x84>)
    7156:	f7fe fe37 	bl	5dc8 <z_spin_unlock_valid>
    715a:	b968      	cbnz	r0, 7178 <z_unpend_first_thread+0x78>
    715c:	4a0a      	ldr	r2, [pc, #40]	; (7188 <z_unpend_first_thread+0x88>)
    715e:	490e      	ldr	r1, [pc, #56]	; (7198 <z_unpend_first_thread+0x98>)
    7160:	480b      	ldr	r0, [pc, #44]	; (7190 <z_unpend_first_thread+0x90>)
    7162:	23ac      	movs	r3, #172	; 0xac
    7164:	f001 f8d4 	bl	8310 <printk>
    7168:	4906      	ldr	r1, [pc, #24]	; (7184 <z_unpend_first_thread+0x84>)
    716a:	480c      	ldr	r0, [pc, #48]	; (719c <z_unpend_first_thread+0x9c>)
    716c:	f001 f8d0 	bl	8310 <printk>
    7170:	4805      	ldr	r0, [pc, #20]	; (7188 <z_unpend_first_thread+0x88>)
    7172:	21ac      	movs	r1, #172	; 0xac
    7174:	f001 f998 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7178:	f385 8811 	msr	BASEPRI, r5
    717c:	f3bf 8f6f 	isb	sy
}
    7180:	4620      	mov	r0, r4
    7182:	bd38      	pop	{r3, r4, r5, pc}
    7184:	20000cd8 	.word	0x20000cd8
    7188:	0000966e 	.word	0x0000966e
    718c:	000096c0 	.word	0x000096c0
    7190:	00009128 	.word	0x00009128
    7194:	000096d5 	.word	0x000096d5
    7198:	00009694 	.word	0x00009694
    719c:	000096ab 	.word	0x000096ab

000071a0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    71a0:	4b04      	ldr	r3, [pc, #16]	; (71b4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    71a2:	2100      	movs	r1, #0
    71a4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    71a8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    71ac:	4608      	mov	r0, r1
    71ae:	f7ff b8f5 	b.w	639c <k_sched_time_slice_set>
    71b2:	bf00      	nop
    71b4:	20000ca4 	.word	0x20000ca4

000071b8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    71b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    71ba:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    71be:	b173      	cbz	r3, 71de <z_impl_k_yield+0x26>
    71c0:	4941      	ldr	r1, [pc, #260]	; (72c8 <z_impl_k_yield+0x110>)
    71c2:	4a42      	ldr	r2, [pc, #264]	; (72cc <z_impl_k_yield+0x114>)
    71c4:	4842      	ldr	r0, [pc, #264]	; (72d0 <z_impl_k_yield+0x118>)
    71c6:	f240 43dc 	movw	r3, #1244	; 0x4dc
    71ca:	f001 f8a1 	bl	8310 <printk>
    71ce:	4841      	ldr	r0, [pc, #260]	; (72d4 <z_impl_k_yield+0x11c>)
    71d0:	f001 f89e 	bl	8310 <printk>
    71d4:	483d      	ldr	r0, [pc, #244]	; (72cc <z_impl_k_yield+0x114>)
    71d6:	f240 41dc 	movw	r1, #1244	; 0x4dc
    71da:	f001 f965 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    71de:	f04f 0320 	mov.w	r3, #32
    71e2:	f3ef 8611 	mrs	r6, BASEPRI
    71e6:	f383 8812 	msr	BASEPRI_MAX, r3
    71ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    71ee:	483a      	ldr	r0, [pc, #232]	; (72d8 <z_impl_k_yield+0x120>)
    71f0:	f7fe fddc 	bl	5dac <z_spin_lock_valid>
    71f4:	b968      	cbnz	r0, 7212 <z_impl_k_yield+0x5a>
    71f6:	4a39      	ldr	r2, [pc, #228]	; (72dc <z_impl_k_yield+0x124>)
    71f8:	4939      	ldr	r1, [pc, #228]	; (72e0 <z_impl_k_yield+0x128>)
    71fa:	4835      	ldr	r0, [pc, #212]	; (72d0 <z_impl_k_yield+0x118>)
    71fc:	2381      	movs	r3, #129	; 0x81
    71fe:	f001 f887 	bl	8310 <printk>
    7202:	4935      	ldr	r1, [pc, #212]	; (72d8 <z_impl_k_yield+0x120>)
    7204:	4837      	ldr	r0, [pc, #220]	; (72e4 <z_impl_k_yield+0x12c>)
    7206:	f001 f883 	bl	8310 <printk>
    720a:	4834      	ldr	r0, [pc, #208]	; (72dc <z_impl_k_yield+0x124>)
    720c:	2181      	movs	r1, #129	; 0x81
    720e:	f001 f94b 	bl	84a8 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7212:	4d35      	ldr	r5, [pc, #212]	; (72e8 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    7214:	4830      	ldr	r0, [pc, #192]	; (72d8 <z_impl_k_yield+0x120>)
    7216:	f7fe fde7 	bl	5de8 <z_spin_lock_set_owner>
    721a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    721c:	7b4b      	ldrb	r3, [r1, #13]
    721e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7222:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7224:	f105 0020 	add.w	r0, r5, #32
    7228:	f7ff fa1e 	bl	6668 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    722c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    722e:	7b63      	ldrb	r3, [r4, #13]
    7230:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7234:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7236:	4b2d      	ldr	r3, [pc, #180]	; (72ec <z_impl_k_yield+0x134>)
    7238:	429c      	cmp	r4, r3
    723a:	d109      	bne.n	7250 <z_impl_k_yield+0x98>
    723c:	492c      	ldr	r1, [pc, #176]	; (72f0 <z_impl_k_yield+0x138>)
    723e:	4824      	ldr	r0, [pc, #144]	; (72d0 <z_impl_k_yield+0x118>)
    7240:	4a22      	ldr	r2, [pc, #136]	; (72cc <z_impl_k_yield+0x114>)
    7242:	23ba      	movs	r3, #186	; 0xba
    7244:	f001 f864 	bl	8310 <printk>
    7248:	4820      	ldr	r0, [pc, #128]	; (72cc <z_impl_k_yield+0x114>)
    724a:	21ba      	movs	r1, #186	; 0xba
    724c:	f001 f92c 	bl	84a8 <assert_post_action>
	return list->head == list;
    7250:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7252:	4828      	ldr	r0, [pc, #160]	; (72f4 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7254:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7256:	4283      	cmp	r3, r0
    7258:	bf08      	it	eq
    725a:	2300      	moveq	r3, #0
    725c:	2b00      	cmp	r3, #0
    725e:	bf38      	it	cc
    7260:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7262:	b35b      	cbz	r3, 72bc <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    7264:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7268:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    726c:	4297      	cmp	r7, r2
    726e:	d021      	beq.n	72b4 <z_impl_k_yield+0xfc>
		return b2 - b1;
    7270:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    7272:	2a00      	cmp	r2, #0
    7274:	dd1e      	ble.n	72b4 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    7276:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7278:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    727c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    727e:	605c      	str	r4, [r3, #4]
	update_cache(1);
    7280:	2001      	movs	r0, #1
    7282:	f7ff fa35 	bl	66f0 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7286:	4814      	ldr	r0, [pc, #80]	; (72d8 <z_impl_k_yield+0x120>)
    7288:	f7fe fd9e 	bl	5dc8 <z_spin_unlock_valid>
    728c:	b968      	cbnz	r0, 72aa <z_impl_k_yield+0xf2>
    728e:	4a13      	ldr	r2, [pc, #76]	; (72dc <z_impl_k_yield+0x124>)
    7290:	4919      	ldr	r1, [pc, #100]	; (72f8 <z_impl_k_yield+0x140>)
    7292:	480f      	ldr	r0, [pc, #60]	; (72d0 <z_impl_k_yield+0x118>)
    7294:	23c3      	movs	r3, #195	; 0xc3
    7296:	f001 f83b 	bl	8310 <printk>
    729a:	490f      	ldr	r1, [pc, #60]	; (72d8 <z_impl_k_yield+0x120>)
    729c:	4817      	ldr	r0, [pc, #92]	; (72fc <z_impl_k_yield+0x144>)
    729e:	f001 f837 	bl	8310 <printk>
    72a2:	480e      	ldr	r0, [pc, #56]	; (72dc <z_impl_k_yield+0x124>)
    72a4:	21c3      	movs	r1, #195	; 0xc3
    72a6:	f001 f8ff 	bl	84a8 <assert_post_action>
    72aa:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    72ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    72b0:	f7fb b9ae 	b.w	2610 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    72b4:	428b      	cmp	r3, r1
    72b6:	d001      	beq.n	72bc <z_impl_k_yield+0x104>
    72b8:	681b      	ldr	r3, [r3, #0]
    72ba:	e7d2      	b.n	7262 <z_impl_k_yield+0xaa>
	node->prev = tail;
    72bc:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    72c0:	600c      	str	r4, [r1, #0]
	list->tail = node;
    72c2:	626c      	str	r4, [r5, #36]	; 0x24
}
    72c4:	e7dc      	b.n	7280 <z_impl_k_yield+0xc8>
    72c6:	bf00      	nop
    72c8:	0000a0c3 	.word	0x0000a0c3
    72cc:	0000a29a 	.word	0x0000a29a
    72d0:	00009128 	.word	0x00009128
    72d4:	0000a1f9 	.word	0x0000a1f9
    72d8:	20000cd8 	.word	0x20000cd8
    72dc:	0000966e 	.word	0x0000966e
    72e0:	000096c0 	.word	0x000096c0
    72e4:	000096d5 	.word	0x000096d5
    72e8:	20000ca4 	.word	0x20000ca4
    72ec:	200004f0 	.word	0x200004f0
    72f0:	0000a2bc 	.word	0x0000a2bc
    72f4:	20000cc4 	.word	0x20000cc4
    72f8:	00009694 	.word	0x00009694
    72fc:	000096ab 	.word	0x000096ab

00007300 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    7300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7304:	4604      	mov	r4, r0
    7306:	460d      	mov	r5, r1
    7308:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    730c:	b173      	cbz	r3, 732c <z_tick_sleep+0x2c>
    730e:	4945      	ldr	r1, [pc, #276]	; (7424 <z_tick_sleep+0x124>)
    7310:	4a45      	ldr	r2, [pc, #276]	; (7428 <z_tick_sleep+0x128>)
    7312:	4846      	ldr	r0, [pc, #280]	; (742c <z_tick_sleep+0x12c>)
    7314:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    7318:	f000 fffa 	bl	8310 <printk>
    731c:	4844      	ldr	r0, [pc, #272]	; (7430 <z_tick_sleep+0x130>)
    731e:	f000 fff7 	bl	8310 <printk>
    7322:	4841      	ldr	r0, [pc, #260]	; (7428 <z_tick_sleep+0x128>)
    7324:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    7328:	f001 f8be 	bl	84a8 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    732c:	ea54 0305 	orrs.w	r3, r4, r5
    7330:	d104      	bne.n	733c <z_tick_sleep+0x3c>
	z_impl_k_yield();
    7332:	f7ff ff41 	bl	71b8 <z_impl_k_yield>
		k_yield();
		return 0;
    7336:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    7338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    733c:	f06f 0301 	mvn.w	r3, #1
    7340:	1b1e      	subs	r6, r3, r4
    7342:	f04f 33ff 	mov.w	r3, #4294967295
    7346:	eb63 0705 	sbc.w	r7, r3, r5
    734a:	2e01      	cmp	r6, #1
    734c:	f177 0300 	sbcs.w	r3, r7, #0
    7350:	da64      	bge.n	741c <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7352:	f001 fc1d 	bl	8b90 <sys_clock_tick_get_32>
    7356:	1906      	adds	r6, r0, r4
    7358:	f04f 0320 	mov.w	r3, #32
    735c:	f3ef 8811 	mrs	r8, BASEPRI
    7360:	f383 8812 	msr	BASEPRI_MAX, r3
    7364:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7368:	4832      	ldr	r0, [pc, #200]	; (7434 <z_tick_sleep+0x134>)
    736a:	f7fe fd1f 	bl	5dac <z_spin_lock_valid>
    736e:	b968      	cbnz	r0, 738c <z_tick_sleep+0x8c>
    7370:	4a31      	ldr	r2, [pc, #196]	; (7438 <z_tick_sleep+0x138>)
    7372:	4932      	ldr	r1, [pc, #200]	; (743c <z_tick_sleep+0x13c>)
    7374:	482d      	ldr	r0, [pc, #180]	; (742c <z_tick_sleep+0x12c>)
    7376:	2381      	movs	r3, #129	; 0x81
    7378:	f000 ffca 	bl	8310 <printk>
    737c:	492d      	ldr	r1, [pc, #180]	; (7434 <z_tick_sleep+0x134>)
    737e:	4830      	ldr	r0, [pc, #192]	; (7440 <z_tick_sleep+0x140>)
    7380:	f000 ffc6 	bl	8310 <printk>
    7384:	482c      	ldr	r0, [pc, #176]	; (7438 <z_tick_sleep+0x138>)
    7386:	2181      	movs	r1, #129	; 0x81
    7388:	f001 f88e 	bl	84a8 <assert_post_action>
	pending_current = _current;
    738c:	4f2d      	ldr	r7, [pc, #180]	; (7444 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    738e:	4829      	ldr	r0, [pc, #164]	; (7434 <z_tick_sleep+0x134>)
    7390:	f7fe fd2a 	bl	5de8 <z_spin_lock_set_owner>
    7394:	4b2c      	ldr	r3, [pc, #176]	; (7448 <z_tick_sleep+0x148>)
    7396:	68b8      	ldr	r0, [r7, #8]
    7398:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    739a:	f7ff fbf7 	bl	6b8c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    739e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    73a0:	492a      	ldr	r1, [pc, #168]	; (744c <z_tick_sleep+0x14c>)
    73a2:	4622      	mov	r2, r4
    73a4:	462b      	mov	r3, r5
    73a6:	3018      	adds	r0, #24
    73a8:	f000 f9b4 	bl	7714 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    73ac:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    73ae:	4821      	ldr	r0, [pc, #132]	; (7434 <z_tick_sleep+0x134>)
    73b0:	7b53      	ldrb	r3, [r2, #13]
    73b2:	f043 0310 	orr.w	r3, r3, #16
    73b6:	7353      	strb	r3, [r2, #13]
    73b8:	f7fe fd06 	bl	5dc8 <z_spin_unlock_valid>
    73bc:	b968      	cbnz	r0, 73da <z_tick_sleep+0xda>
    73be:	4a1e      	ldr	r2, [pc, #120]	; (7438 <z_tick_sleep+0x138>)
    73c0:	4923      	ldr	r1, [pc, #140]	; (7450 <z_tick_sleep+0x150>)
    73c2:	481a      	ldr	r0, [pc, #104]	; (742c <z_tick_sleep+0x12c>)
    73c4:	23c3      	movs	r3, #195	; 0xc3
    73c6:	f000 ffa3 	bl	8310 <printk>
    73ca:	491a      	ldr	r1, [pc, #104]	; (7434 <z_tick_sleep+0x134>)
    73cc:	4821      	ldr	r0, [pc, #132]	; (7454 <z_tick_sleep+0x154>)
    73ce:	f000 ff9f 	bl	8310 <printk>
    73d2:	4819      	ldr	r0, [pc, #100]	; (7438 <z_tick_sleep+0x138>)
    73d4:	21c3      	movs	r1, #195	; 0xc3
    73d6:	f001 f867 	bl	84a8 <assert_post_action>
    73da:	4640      	mov	r0, r8
    73dc:	f7fb f918 	bl	2610 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    73e0:	68bb      	ldr	r3, [r7, #8]
    73e2:	7b5b      	ldrb	r3, [r3, #13]
    73e4:	06db      	lsls	r3, r3, #27
    73e6:	d50e      	bpl.n	7406 <z_tick_sleep+0x106>
    73e8:	491b      	ldr	r1, [pc, #108]	; (7458 <z_tick_sleep+0x158>)
    73ea:	4a0f      	ldr	r2, [pc, #60]	; (7428 <z_tick_sleep+0x128>)
    73ec:	480f      	ldr	r0, [pc, #60]	; (742c <z_tick_sleep+0x12c>)
    73ee:	f240 5319 	movw	r3, #1305	; 0x519
    73f2:	f000 ff8d 	bl	8310 <printk>
    73f6:	480e      	ldr	r0, [pc, #56]	; (7430 <z_tick_sleep+0x130>)
    73f8:	f000 ff8a 	bl	8310 <printk>
    73fc:	480a      	ldr	r0, [pc, #40]	; (7428 <z_tick_sleep+0x128>)
    73fe:	f240 5119 	movw	r1, #1305	; 0x519
    7402:	f001 f851 	bl	84a8 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    7406:	f001 fbc3 	bl	8b90 <sys_clock_tick_get_32>
    740a:	1a30      	subs	r0, r6, r0
    740c:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    7410:	2801      	cmp	r0, #1
    7412:	f171 0300 	sbcs.w	r3, r1, #0
    7416:	bfb8      	it	lt
    7418:	2000      	movlt	r0, #0
    741a:	e78d      	b.n	7338 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    741c:	f06f 0601 	mvn.w	r6, #1
    7420:	1b36      	subs	r6, r6, r4
    7422:	e799      	b.n	7358 <z_tick_sleep+0x58>
    7424:	0000a0c3 	.word	0x0000a0c3
    7428:	0000a29a 	.word	0x0000a29a
    742c:	00009128 	.word	0x00009128
    7430:	0000a1f9 	.word	0x0000a1f9
    7434:	20000cd8 	.word	0x20000cd8
    7438:	0000966e 	.word	0x0000966e
    743c:	000096c0 	.word	0x000096c0
    7440:	000096d5 	.word	0x000096d5
    7444:	20000ca4 	.word	0x20000ca4
    7448:	20000cd4 	.word	0x20000cd4
    744c:	00006ad9 	.word	0x00006ad9
    7450:	00009694 	.word	0x00009694
    7454:	000096ab 	.word	0x000096ab
    7458:	0000a34c 	.word	0x0000a34c

0000745c <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    745c:	b538      	push	{r3, r4, r5, lr}
    745e:	4604      	mov	r4, r0
    7460:	460d      	mov	r5, r1
    7462:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7466:	b173      	cbz	r3, 7486 <z_impl_k_sleep+0x2a>
    7468:	4913      	ldr	r1, [pc, #76]	; (74b8 <z_impl_k_sleep+0x5c>)
    746a:	4a14      	ldr	r2, [pc, #80]	; (74bc <z_impl_k_sleep+0x60>)
    746c:	4814      	ldr	r0, [pc, #80]	; (74c0 <z_impl_k_sleep+0x64>)
    746e:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    7472:	f000 ff4d 	bl	8310 <printk>
    7476:	4813      	ldr	r0, [pc, #76]	; (74c4 <z_impl_k_sleep+0x68>)
    7478:	f000 ff4a 	bl	8310 <printk>
    747c:	480f      	ldr	r0, [pc, #60]	; (74bc <z_impl_k_sleep+0x60>)
    747e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    7482:	f001 f811 	bl	84a8 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7486:	1c6b      	adds	r3, r5, #1
    7488:	bf08      	it	eq
    748a:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    748e:	d106      	bne.n	749e <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    7490:	4b0d      	ldr	r3, [pc, #52]	; (74c8 <z_impl_k_sleep+0x6c>)
    7492:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7494:	f7ff fd02 	bl	6e9c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7498:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    749c:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    749e:	4620      	mov	r0, r4
    74a0:	4629      	mov	r1, r5
    74a2:	f7ff ff2d 	bl	7300 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    74a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    74aa:	fb80 3403 	smull	r3, r4, r0, r3
    74ae:	0bd8      	lsrs	r0, r3, #15
    74b0:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    74b4:	e7f2      	b.n	749c <z_impl_k_sleep+0x40>
    74b6:	bf00      	nop
    74b8:	0000a0c3 	.word	0x0000a0c3
    74bc:	0000a29a 	.word	0x0000a29a
    74c0:	00009128 	.word	0x00009128
    74c4:	0000a1f9 	.word	0x0000a1f9
    74c8:	20000ca4 	.word	0x20000ca4

000074cc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    74cc:	4b01      	ldr	r3, [pc, #4]	; (74d4 <z_impl_z_current_get+0x8>)
    74ce:	6898      	ldr	r0, [r3, #8]
    74d0:	4770      	bx	lr
    74d2:	bf00      	nop
    74d4:	20000ca4 	.word	0x20000ca4

000074d8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    74d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74dc:	4604      	mov	r4, r0
    74de:	f04f 0320 	mov.w	r3, #32
    74e2:	f3ef 8611 	mrs	r6, BASEPRI
    74e6:	f383 8812 	msr	BASEPRI_MAX, r3
    74ea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    74ee:	4848      	ldr	r0, [pc, #288]	; (7610 <z_thread_abort+0x138>)
    74f0:	f7fe fc5c 	bl	5dac <z_spin_lock_valid>
    74f4:	b968      	cbnz	r0, 7512 <z_thread_abort+0x3a>
    74f6:	4a47      	ldr	r2, [pc, #284]	; (7614 <z_thread_abort+0x13c>)
    74f8:	4947      	ldr	r1, [pc, #284]	; (7618 <z_thread_abort+0x140>)
    74fa:	4848      	ldr	r0, [pc, #288]	; (761c <z_thread_abort+0x144>)
    74fc:	2381      	movs	r3, #129	; 0x81
    74fe:	f000 ff07 	bl	8310 <printk>
    7502:	4943      	ldr	r1, [pc, #268]	; (7610 <z_thread_abort+0x138>)
    7504:	4846      	ldr	r0, [pc, #280]	; (7620 <z_thread_abort+0x148>)
    7506:	f000 ff03 	bl	8310 <printk>
    750a:	4842      	ldr	r0, [pc, #264]	; (7614 <z_thread_abort+0x13c>)
    750c:	2181      	movs	r1, #129	; 0x81
    750e:	f000 ffcb 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7512:	483f      	ldr	r0, [pc, #252]	; (7610 <z_thread_abort+0x138>)
    7514:	f7fe fc68 	bl	5de8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7518:	7b63      	ldrb	r3, [r4, #13]
    751a:	071a      	lsls	r2, r3, #28
    751c:	d517      	bpl.n	754e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    751e:	483c      	ldr	r0, [pc, #240]	; (7610 <z_thread_abort+0x138>)
    7520:	f7fe fc52 	bl	5dc8 <z_spin_unlock_valid>
    7524:	b968      	cbnz	r0, 7542 <z_thread_abort+0x6a>
    7526:	4a3b      	ldr	r2, [pc, #236]	; (7614 <z_thread_abort+0x13c>)
    7528:	493e      	ldr	r1, [pc, #248]	; (7624 <z_thread_abort+0x14c>)
    752a:	483c      	ldr	r0, [pc, #240]	; (761c <z_thread_abort+0x144>)
    752c:	23ac      	movs	r3, #172	; 0xac
    752e:	f000 feef 	bl	8310 <printk>
    7532:	4937      	ldr	r1, [pc, #220]	; (7610 <z_thread_abort+0x138>)
    7534:	483c      	ldr	r0, [pc, #240]	; (7628 <z_thread_abort+0x150>)
    7536:	f000 feeb 	bl	8310 <printk>
    753a:	4836      	ldr	r0, [pc, #216]	; (7614 <z_thread_abort+0x13c>)
    753c:	21ac      	movs	r1, #172	; 0xac
    753e:	f000 ffb3 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7542:	f386 8811 	msr	BASEPRI, r6
    7546:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    754a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    754e:	f023 0220 	bic.w	r2, r3, #32
    7552:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    7556:	09d2      	lsrs	r2, r2, #7
    7558:	d142      	bne.n	75e0 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    755a:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    755c:	68a3      	ldr	r3, [r4, #8]
    755e:	b113      	cbz	r3, 7566 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    7560:	4620      	mov	r0, r4
    7562:	f7ff f8a3 	bl	66ac <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    7566:	f104 0018 	add.w	r0, r4, #24
    756a:	f000 f9a7 	bl	78bc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    756e:	f104 0758 	add.w	r7, r4, #88	; 0x58
    7572:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    7576:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7578:	42bd      	cmp	r5, r7
    757a:	d001      	beq.n	7580 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    757c:	2d00      	cmp	r5, #0
    757e:	d139      	bne.n	75f4 <z_thread_abort+0x11c>
		update_cache(1);
    7580:	2001      	movs	r0, #1
    7582:	f7ff f8b5 	bl	66f0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    7586:	4b29      	ldr	r3, [pc, #164]	; (762c <z_thread_abort+0x154>)
    7588:	689b      	ldr	r3, [r3, #8]
    758a:	42a3      	cmp	r3, r4
    758c:	d1c7      	bne.n	751e <z_thread_abort+0x46>
    758e:	f3ef 8305 	mrs	r3, IPSR
    7592:	2b00      	cmp	r3, #0
    7594:	d1c3      	bne.n	751e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7596:	481e      	ldr	r0, [pc, #120]	; (7610 <z_thread_abort+0x138>)
    7598:	f7fe fc16 	bl	5dc8 <z_spin_unlock_valid>
    759c:	b968      	cbnz	r0, 75ba <z_thread_abort+0xe2>
    759e:	4a1d      	ldr	r2, [pc, #116]	; (7614 <z_thread_abort+0x13c>)
    75a0:	4920      	ldr	r1, [pc, #128]	; (7624 <z_thread_abort+0x14c>)
    75a2:	481e      	ldr	r0, [pc, #120]	; (761c <z_thread_abort+0x144>)
    75a4:	23c3      	movs	r3, #195	; 0xc3
    75a6:	f000 feb3 	bl	8310 <printk>
    75aa:	4919      	ldr	r1, [pc, #100]	; (7610 <z_thread_abort+0x138>)
    75ac:	481e      	ldr	r0, [pc, #120]	; (7628 <z_thread_abort+0x150>)
    75ae:	f000 feaf 	bl	8310 <printk>
    75b2:	4818      	ldr	r0, [pc, #96]	; (7614 <z_thread_abort+0x13c>)
    75b4:	21c3      	movs	r1, #195	; 0xc3
    75b6:	f000 ff77 	bl	84a8 <assert_post_action>
    75ba:	4630      	mov	r0, r6
    75bc:	f7fb f828 	bl	2610 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    75c0:	4a1b      	ldr	r2, [pc, #108]	; (7630 <z_thread_abort+0x158>)
    75c2:	491c      	ldr	r1, [pc, #112]	; (7634 <z_thread_abort+0x15c>)
    75c4:	4815      	ldr	r0, [pc, #84]	; (761c <z_thread_abort+0x144>)
    75c6:	f240 634b 	movw	r3, #1611	; 0x64b
    75ca:	f000 fea1 	bl	8310 <printk>
    75ce:	481a      	ldr	r0, [pc, #104]	; (7638 <z_thread_abort+0x160>)
    75d0:	f000 fe9e 	bl	8310 <printk>
    75d4:	4816      	ldr	r0, [pc, #88]	; (7630 <z_thread_abort+0x158>)
    75d6:	f240 614b 	movw	r1, #1611	; 0x64b
    75da:	f000 ff65 	bl	84a8 <assert_post_action>
    75de:	e79e      	b.n	751e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    75e0:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    75e4:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    75e8:	4814      	ldr	r0, [pc, #80]	; (763c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    75ea:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    75ec:	4621      	mov	r1, r4
    75ee:	f7ff f83b 	bl	6668 <z_priq_dumb_remove>
}
    75f2:	e7b3      	b.n	755c <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    75f4:	4628      	mov	r0, r5
    75f6:	f7ff f859 	bl	66ac <unpend_thread_no_timeout>
    75fa:	f105 0018 	add.w	r0, r5, #24
    75fe:	f000 f95d 	bl	78bc <z_abort_timeout>
    7602:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    7606:	4628      	mov	r0, r5
    7608:	f7ff f978 	bl	68fc <ready_thread>
    760c:	e7b3      	b.n	7576 <z_thread_abort+0x9e>
    760e:	bf00      	nop
    7610:	20000cd8 	.word	0x20000cd8
    7614:	0000966e 	.word	0x0000966e
    7618:	000096c0 	.word	0x000096c0
    761c:	00009128 	.word	0x00009128
    7620:	000096d5 	.word	0x000096d5
    7624:	00009694 	.word	0x00009694
    7628:	000096ab 	.word	0x000096ab
    762c:	20000ca4 	.word	0x20000ca4
    7630:	0000a29a 	.word	0x0000a29a
    7634:	00009d9f 	.word	0x00009d9f
    7638:	0000a38c 	.word	0x0000a38c
    763c:	20000cc4 	.word	0x20000cc4

00007640 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    7640:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    7642:	4806      	ldr	r0, [pc, #24]	; (765c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    7644:	4a06      	ldr	r2, [pc, #24]	; (7660 <z_data_copy+0x20>)
    7646:	4907      	ldr	r1, [pc, #28]	; (7664 <z_data_copy+0x24>)
    7648:	1a12      	subs	r2, r2, r0
    764a:	f000 ff6b 	bl	8524 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    764e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7652:	4a05      	ldr	r2, [pc, #20]	; (7668 <z_data_copy+0x28>)
    7654:	4905      	ldr	r1, [pc, #20]	; (766c <z_data_copy+0x2c>)
    7656:	4806      	ldr	r0, [pc, #24]	; (7670 <z_data_copy+0x30>)
    7658:	f000 bf64 	b.w	8524 <memcpy>
    765c:	20000000 	.word	0x20000000
    7660:	20000250 	.word	0x20000250
    7664:	0000a428 	.word	0x0000a428
    7668:	00000000 	.word	0x00000000
    766c:	0000a428 	.word	0x0000a428
    7670:	20000000 	.word	0x20000000

00007674 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7674:	4b03      	ldr	r3, [pc, #12]	; (7684 <elapsed+0x10>)
    7676:	681b      	ldr	r3, [r3, #0]
    7678:	b90b      	cbnz	r3, 767e <elapsed+0xa>
    767a:	f7fc bf09 	b.w	4490 <sys_clock_elapsed>
}
    767e:	2000      	movs	r0, #0
    7680:	4770      	bx	lr
    7682:	bf00      	nop
    7684:	20000ce4 	.word	0x20000ce4

00007688 <next_timeout>:

static int32_t next_timeout(void)
{
    7688:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    768a:	4b13      	ldr	r3, [pc, #76]	; (76d8 <next_timeout+0x50>)
    768c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    768e:	429c      	cmp	r4, r3
    7690:	bf08      	it	eq
    7692:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7694:	f7ff ffee 	bl	7674 <elapsed>
    7698:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    769a:	b1bc      	cbz	r4, 76cc <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    769c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    76a0:	1b40      	subs	r0, r0, r5
    76a2:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    76a6:	2801      	cmp	r0, #1
    76a8:	f171 0300 	sbcs.w	r3, r1, #0
    76ac:	db11      	blt.n	76d2 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    76ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    76b2:	2300      	movs	r3, #0
    76b4:	4282      	cmp	r2, r0
    76b6:	eb73 0401 	sbcs.w	r4, r3, r1
    76ba:	da00      	bge.n	76be <next_timeout+0x36>
    76bc:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    76be:	4b07      	ldr	r3, [pc, #28]	; (76dc <next_timeout+0x54>)
    76c0:	691b      	ldr	r3, [r3, #16]
    76c2:	b113      	cbz	r3, 76ca <next_timeout+0x42>
    76c4:	4298      	cmp	r0, r3
    76c6:	bfa8      	it	ge
    76c8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    76ca:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    76cc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    76d0:	e7f5      	b.n	76be <next_timeout+0x36>
    76d2:	2000      	movs	r0, #0
    76d4:	e7f3      	b.n	76be <next_timeout+0x36>
    76d6:	bf00      	nop
    76d8:	2000017c 	.word	0x2000017c
    76dc:	20000ca4 	.word	0x20000ca4

000076e0 <remove_timeout>:
{
    76e0:	b530      	push	{r4, r5, lr}
    76e2:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    76e4:	b168      	cbz	r0, 7702 <remove_timeout+0x22>
    76e6:	4a0a      	ldr	r2, [pc, #40]	; (7710 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    76e8:	6852      	ldr	r2, [r2, #4]
    76ea:	4290      	cmp	r0, r2
    76ec:	d009      	beq.n	7702 <remove_timeout+0x22>
	if (next(t) != NULL) {
    76ee:	b143      	cbz	r3, 7702 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    76f0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    76f4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    76f8:	1912      	adds	r2, r2, r4
    76fa:	eb45 0101 	adc.w	r1, r5, r1
    76fe:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7702:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7704:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7706:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7708:	2300      	movs	r3, #0
	node->prev = NULL;
    770a:	e9c0 3300 	strd	r3, r3, [r0]
}
    770e:	bd30      	pop	{r4, r5, pc}
    7710:	2000017c 	.word	0x2000017c

00007714 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7718:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    771a:	1c6b      	adds	r3, r5, #1
    771c:	bf08      	it	eq
    771e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    7722:	4682      	mov	sl, r0
    7724:	468b      	mov	fp, r1
    7726:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7728:	f000 80aa 	beq.w	7880 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    772c:	6803      	ldr	r3, [r0, #0]
    772e:	b163      	cbz	r3, 774a <z_add_timeout+0x36>
    7730:	4955      	ldr	r1, [pc, #340]	; (7888 <z_add_timeout+0x174>)
    7732:	4a56      	ldr	r2, [pc, #344]	; (788c <z_add_timeout+0x178>)
    7734:	4856      	ldr	r0, [pc, #344]	; (7890 <z_add_timeout+0x17c>)
    7736:	235d      	movs	r3, #93	; 0x5d
    7738:	f000 fdea 	bl	8310 <printk>
    773c:	4855      	ldr	r0, [pc, #340]	; (7894 <z_add_timeout+0x180>)
    773e:	f000 fde7 	bl	8310 <printk>
    7742:	4852      	ldr	r0, [pc, #328]	; (788c <z_add_timeout+0x178>)
    7744:	215d      	movs	r1, #93	; 0x5d
    7746:	f000 feaf 	bl	84a8 <assert_post_action>
	to->fn = fn;
    774a:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    774e:	f04f 0320 	mov.w	r3, #32
    7752:	f3ef 8b11 	mrs	fp, BASEPRI
    7756:	f383 8812 	msr	BASEPRI_MAX, r3
    775a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    775e:	484e      	ldr	r0, [pc, #312]	; (7898 <z_add_timeout+0x184>)
    7760:	f7fe fb24 	bl	5dac <z_spin_lock_valid>
    7764:	b968      	cbnz	r0, 7782 <z_add_timeout+0x6e>
    7766:	4a4d      	ldr	r2, [pc, #308]	; (789c <z_add_timeout+0x188>)
    7768:	494d      	ldr	r1, [pc, #308]	; (78a0 <z_add_timeout+0x18c>)
    776a:	4849      	ldr	r0, [pc, #292]	; (7890 <z_add_timeout+0x17c>)
    776c:	2381      	movs	r3, #129	; 0x81
    776e:	f000 fdcf 	bl	8310 <printk>
    7772:	4949      	ldr	r1, [pc, #292]	; (7898 <z_add_timeout+0x184>)
    7774:	484b      	ldr	r0, [pc, #300]	; (78a4 <z_add_timeout+0x190>)
    7776:	f000 fdcb 	bl	8310 <printk>
    777a:	4848      	ldr	r0, [pc, #288]	; (789c <z_add_timeout+0x188>)
    777c:	2181      	movs	r1, #129	; 0x81
    777e:	f000 fe93 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7782:	4845      	ldr	r0, [pc, #276]	; (7898 <z_add_timeout+0x184>)
    7784:	f7fe fb30 	bl	5de8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7788:	f06f 0301 	mvn.w	r3, #1
    778c:	ebb3 0804 	subs.w	r8, r3, r4
    7790:	f04f 32ff 	mov.w	r2, #4294967295
    7794:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7798:	f1b8 0f00 	cmp.w	r8, #0
    779c:	f179 0100 	sbcs.w	r1, r9, #0
    77a0:	db1c      	blt.n	77dc <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    77a2:	4841      	ldr	r0, [pc, #260]	; (78a8 <z_add_timeout+0x194>)
    77a4:	e9d0 1000 	ldrd	r1, r0, [r0]
    77a8:	1a5b      	subs	r3, r3, r1
    77aa:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    77ae:	1b1e      	subs	r6, r3, r4
    77b0:	eb62 0705 	sbc.w	r7, r2, r5
    77b4:	2e01      	cmp	r6, #1
    77b6:	f177 0300 	sbcs.w	r3, r7, #0
    77ba:	bfbc      	itt	lt
    77bc:	2601      	movlt	r6, #1
    77be:	2700      	movlt	r7, #0
    77c0:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    77c4:	4a39      	ldr	r2, [pc, #228]	; (78ac <z_add_timeout+0x198>)
    77c6:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    77ca:	4293      	cmp	r3, r2
    77cc:	d11d      	bne.n	780a <z_add_timeout+0xf6>
	node->prev = tail;
    77ce:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    77d2:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    77d6:	f8c2 a004 	str.w	sl, [r2, #4]
}
    77da:	e02c      	b.n	7836 <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    77dc:	f7ff ff4a 	bl	7674 <elapsed>
    77e0:	1c63      	adds	r3, r4, #1
    77e2:	9300      	str	r3, [sp, #0]
    77e4:	f145 0300 	adc.w	r3, r5, #0
    77e8:	9301      	str	r3, [sp, #4]
    77ea:	e9dd 2300 	ldrd	r2, r3, [sp]
    77ee:	1812      	adds	r2, r2, r0
    77f0:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    77f4:	e9ca 2304 	strd	r2, r3, [sl, #16]
    77f8:	e7e4      	b.n	77c4 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    77fa:	1be0      	subs	r0, r4, r7
    77fc:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    7800:	42b3      	cmp	r3, r6
    7802:	e9ca 0104 	strd	r0, r1, [sl, #16]
    7806:	d0e2      	beq.n	77ce <z_add_timeout+0xba>
    7808:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    780a:	2b00      	cmp	r3, #0
    780c:	d0df      	beq.n	77ce <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    780e:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    7812:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    7816:	42bc      	cmp	r4, r7
    7818:	eb75 0108 	sbcs.w	r1, r5, r8
    781c:	daed      	bge.n	77fa <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    781e:	1b38      	subs	r0, r7, r4
    7820:	eb68 0105 	sbc.w	r1, r8, r5
    7824:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    7828:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    782a:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    782e:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    7832:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    7836:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7838:	4293      	cmp	r3, r2
    783a:	d00b      	beq.n	7854 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    783c:	459a      	cmp	sl, r3
    783e:	d109      	bne.n	7854 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7840:	f7ff ff22 	bl	7688 <next_timeout>

			if (next_time == 0 ||
    7844:	b118      	cbz	r0, 784e <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    7846:	4b1a      	ldr	r3, [pc, #104]	; (78b0 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    7848:	691b      	ldr	r3, [r3, #16]
    784a:	4283      	cmp	r3, r0
    784c:	d002      	beq.n	7854 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    784e:	2100      	movs	r1, #0
    7850:	f7fc fdee 	bl	4430 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7854:	4810      	ldr	r0, [pc, #64]	; (7898 <z_add_timeout+0x184>)
    7856:	f7fe fab7 	bl	5dc8 <z_spin_unlock_valid>
    785a:	b968      	cbnz	r0, 7878 <z_add_timeout+0x164>
    785c:	4a0f      	ldr	r2, [pc, #60]	; (789c <z_add_timeout+0x188>)
    785e:	4915      	ldr	r1, [pc, #84]	; (78b4 <z_add_timeout+0x1a0>)
    7860:	480b      	ldr	r0, [pc, #44]	; (7890 <z_add_timeout+0x17c>)
    7862:	23ac      	movs	r3, #172	; 0xac
    7864:	f000 fd54 	bl	8310 <printk>
    7868:	490b      	ldr	r1, [pc, #44]	; (7898 <z_add_timeout+0x184>)
    786a:	4813      	ldr	r0, [pc, #76]	; (78b8 <z_add_timeout+0x1a4>)
    786c:	f000 fd50 	bl	8310 <printk>
    7870:	480a      	ldr	r0, [pc, #40]	; (789c <z_add_timeout+0x188>)
    7872:	21ac      	movs	r1, #172	; 0xac
    7874:	f000 fe18 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7878:	f38b 8811 	msr	BASEPRI, fp
    787c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7880:	b003      	add	sp, #12
    7882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7886:	bf00      	nop
    7888:	0000a3d2 	.word	0x0000a3d2
    788c:	0000a3ae 	.word	0x0000a3ae
    7890:	00009128 	.word	0x00009128
    7894:	0000a1f9 	.word	0x0000a1f9
    7898:	20000ce8 	.word	0x20000ce8
    789c:	0000966e 	.word	0x0000966e
    78a0:	000096c0 	.word	0x000096c0
    78a4:	000096d5 	.word	0x000096d5
    78a8:	200005f0 	.word	0x200005f0
    78ac:	2000017c 	.word	0x2000017c
    78b0:	20000ca4 	.word	0x20000ca4
    78b4:	00009694 	.word	0x00009694
    78b8:	000096ab 	.word	0x000096ab

000078bc <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    78bc:	b538      	push	{r3, r4, r5, lr}
    78be:	4604      	mov	r4, r0
	__asm__ volatile(
    78c0:	f04f 0320 	mov.w	r3, #32
    78c4:	f3ef 8511 	mrs	r5, BASEPRI
    78c8:	f383 8812 	msr	BASEPRI_MAX, r3
    78cc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78d0:	481a      	ldr	r0, [pc, #104]	; (793c <z_abort_timeout+0x80>)
    78d2:	f7fe fa6b 	bl	5dac <z_spin_lock_valid>
    78d6:	b968      	cbnz	r0, 78f4 <z_abort_timeout+0x38>
    78d8:	4a19      	ldr	r2, [pc, #100]	; (7940 <z_abort_timeout+0x84>)
    78da:	491a      	ldr	r1, [pc, #104]	; (7944 <z_abort_timeout+0x88>)
    78dc:	481a      	ldr	r0, [pc, #104]	; (7948 <z_abort_timeout+0x8c>)
    78de:	2381      	movs	r3, #129	; 0x81
    78e0:	f000 fd16 	bl	8310 <printk>
    78e4:	4915      	ldr	r1, [pc, #84]	; (793c <z_abort_timeout+0x80>)
    78e6:	4819      	ldr	r0, [pc, #100]	; (794c <z_abort_timeout+0x90>)
    78e8:	f000 fd12 	bl	8310 <printk>
    78ec:	4814      	ldr	r0, [pc, #80]	; (7940 <z_abort_timeout+0x84>)
    78ee:	2181      	movs	r1, #129	; 0x81
    78f0:	f000 fdda 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    78f4:	4811      	ldr	r0, [pc, #68]	; (793c <z_abort_timeout+0x80>)
    78f6:	f7fe fa77 	bl	5de8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    78fa:	6823      	ldr	r3, [r4, #0]
    78fc:	b1db      	cbz	r3, 7936 <z_abort_timeout+0x7a>
			remove_timeout(to);
    78fe:	4620      	mov	r0, r4
    7900:	f7ff feee 	bl	76e0 <remove_timeout>
			ret = 0;
    7904:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7906:	480d      	ldr	r0, [pc, #52]	; (793c <z_abort_timeout+0x80>)
    7908:	f7fe fa5e 	bl	5dc8 <z_spin_unlock_valid>
    790c:	b968      	cbnz	r0, 792a <z_abort_timeout+0x6e>
    790e:	4a0c      	ldr	r2, [pc, #48]	; (7940 <z_abort_timeout+0x84>)
    7910:	490f      	ldr	r1, [pc, #60]	; (7950 <z_abort_timeout+0x94>)
    7912:	480d      	ldr	r0, [pc, #52]	; (7948 <z_abort_timeout+0x8c>)
    7914:	23ac      	movs	r3, #172	; 0xac
    7916:	f000 fcfb 	bl	8310 <printk>
    791a:	4908      	ldr	r1, [pc, #32]	; (793c <z_abort_timeout+0x80>)
    791c:	480d      	ldr	r0, [pc, #52]	; (7954 <z_abort_timeout+0x98>)
    791e:	f000 fcf7 	bl	8310 <printk>
    7922:	4807      	ldr	r0, [pc, #28]	; (7940 <z_abort_timeout+0x84>)
    7924:	21ac      	movs	r1, #172	; 0xac
    7926:	f000 fdbf 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    792a:	f385 8811 	msr	BASEPRI, r5
    792e:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7932:	4620      	mov	r0, r4
    7934:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    7936:	f06f 0415 	mvn.w	r4, #21
    793a:	e7e4      	b.n	7906 <z_abort_timeout+0x4a>
    793c:	20000ce8 	.word	0x20000ce8
    7940:	0000966e 	.word	0x0000966e
    7944:	000096c0 	.word	0x000096c0
    7948:	00009128 	.word	0x00009128
    794c:	000096d5 	.word	0x000096d5
    7950:	00009694 	.word	0x00009694
    7954:	000096ab 	.word	0x000096ab

00007958 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7958:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    795a:	f04f 0320 	mov.w	r3, #32
    795e:	f3ef 8511 	mrs	r5, BASEPRI
    7962:	f383 8812 	msr	BASEPRI_MAX, r3
    7966:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    796a:	4818      	ldr	r0, [pc, #96]	; (79cc <z_get_next_timeout_expiry+0x74>)
    796c:	f7fe fa1e 	bl	5dac <z_spin_lock_valid>
    7970:	b968      	cbnz	r0, 798e <z_get_next_timeout_expiry+0x36>
    7972:	4a17      	ldr	r2, [pc, #92]	; (79d0 <z_get_next_timeout_expiry+0x78>)
    7974:	4917      	ldr	r1, [pc, #92]	; (79d4 <z_get_next_timeout_expiry+0x7c>)
    7976:	4818      	ldr	r0, [pc, #96]	; (79d8 <z_get_next_timeout_expiry+0x80>)
    7978:	2381      	movs	r3, #129	; 0x81
    797a:	f000 fcc9 	bl	8310 <printk>
    797e:	4913      	ldr	r1, [pc, #76]	; (79cc <z_get_next_timeout_expiry+0x74>)
    7980:	4816      	ldr	r0, [pc, #88]	; (79dc <z_get_next_timeout_expiry+0x84>)
    7982:	f000 fcc5 	bl	8310 <printk>
    7986:	4812      	ldr	r0, [pc, #72]	; (79d0 <z_get_next_timeout_expiry+0x78>)
    7988:	2181      	movs	r1, #129	; 0x81
    798a:	f000 fd8d 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    798e:	480f      	ldr	r0, [pc, #60]	; (79cc <z_get_next_timeout_expiry+0x74>)
    7990:	f7fe fa2a 	bl	5de8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7994:	f7ff fe78 	bl	7688 <next_timeout>
    7998:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    799a:	480c      	ldr	r0, [pc, #48]	; (79cc <z_get_next_timeout_expiry+0x74>)
    799c:	f7fe fa14 	bl	5dc8 <z_spin_unlock_valid>
    79a0:	b968      	cbnz	r0, 79be <z_get_next_timeout_expiry+0x66>
    79a2:	4a0b      	ldr	r2, [pc, #44]	; (79d0 <z_get_next_timeout_expiry+0x78>)
    79a4:	490e      	ldr	r1, [pc, #56]	; (79e0 <z_get_next_timeout_expiry+0x88>)
    79a6:	480c      	ldr	r0, [pc, #48]	; (79d8 <z_get_next_timeout_expiry+0x80>)
    79a8:	23ac      	movs	r3, #172	; 0xac
    79aa:	f000 fcb1 	bl	8310 <printk>
    79ae:	4907      	ldr	r1, [pc, #28]	; (79cc <z_get_next_timeout_expiry+0x74>)
    79b0:	480c      	ldr	r0, [pc, #48]	; (79e4 <z_get_next_timeout_expiry+0x8c>)
    79b2:	f000 fcad 	bl	8310 <printk>
    79b6:	4806      	ldr	r0, [pc, #24]	; (79d0 <z_get_next_timeout_expiry+0x78>)
    79b8:	21ac      	movs	r1, #172	; 0xac
    79ba:	f000 fd75 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    79be:	f385 8811 	msr	BASEPRI, r5
    79c2:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    79c6:	4620      	mov	r0, r4
    79c8:	bd38      	pop	{r3, r4, r5, pc}
    79ca:	bf00      	nop
    79cc:	20000ce8 	.word	0x20000ce8
    79d0:	0000966e 	.word	0x0000966e
    79d4:	000096c0 	.word	0x000096c0
    79d8:	00009128 	.word	0x00009128
    79dc:	000096d5 	.word	0x000096d5
    79e0:	00009694 	.word	0x00009694
    79e4:	000096ab 	.word	0x000096ab

000079e8 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    79e8:	b570      	push	{r4, r5, r6, lr}
    79ea:	4604      	mov	r4, r0
    79ec:	460d      	mov	r5, r1
	__asm__ volatile(
    79ee:	f04f 0320 	mov.w	r3, #32
    79f2:	f3ef 8611 	mrs	r6, BASEPRI
    79f6:	f383 8812 	msr	BASEPRI_MAX, r3
    79fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    79fe:	481b      	ldr	r0, [pc, #108]	; (7a6c <z_set_timeout_expiry+0x84>)
    7a00:	f7fe f9d4 	bl	5dac <z_spin_lock_valid>
    7a04:	b968      	cbnz	r0, 7a22 <z_set_timeout_expiry+0x3a>
    7a06:	4a1a      	ldr	r2, [pc, #104]	; (7a70 <z_set_timeout_expiry+0x88>)
    7a08:	491a      	ldr	r1, [pc, #104]	; (7a74 <z_set_timeout_expiry+0x8c>)
    7a0a:	481b      	ldr	r0, [pc, #108]	; (7a78 <z_set_timeout_expiry+0x90>)
    7a0c:	2381      	movs	r3, #129	; 0x81
    7a0e:	f000 fc7f 	bl	8310 <printk>
    7a12:	4916      	ldr	r1, [pc, #88]	; (7a6c <z_set_timeout_expiry+0x84>)
    7a14:	4819      	ldr	r0, [pc, #100]	; (7a7c <z_set_timeout_expiry+0x94>)
    7a16:	f000 fc7b 	bl	8310 <printk>
    7a1a:	4815      	ldr	r0, [pc, #84]	; (7a70 <z_set_timeout_expiry+0x88>)
    7a1c:	2181      	movs	r1, #129	; 0x81
    7a1e:	f000 fd43 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a22:	4812      	ldr	r0, [pc, #72]	; (7a6c <z_set_timeout_expiry+0x84>)
    7a24:	f7fe f9e0 	bl	5de8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    7a28:	f7ff fe2e 	bl	7688 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7a2c:	2801      	cmp	r0, #1
    7a2e:	dd05      	ble.n	7a3c <z_set_timeout_expiry+0x54>
    7a30:	42a0      	cmp	r0, r4
    7a32:	db03      	blt.n	7a3c <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7a34:	4629      	mov	r1, r5
    7a36:	4620      	mov	r0, r4
    7a38:	f7fc fcfa 	bl	4430 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a3c:	480b      	ldr	r0, [pc, #44]	; (7a6c <z_set_timeout_expiry+0x84>)
    7a3e:	f7fe f9c3 	bl	5dc8 <z_spin_unlock_valid>
    7a42:	b968      	cbnz	r0, 7a60 <z_set_timeout_expiry+0x78>
    7a44:	4a0a      	ldr	r2, [pc, #40]	; (7a70 <z_set_timeout_expiry+0x88>)
    7a46:	490e      	ldr	r1, [pc, #56]	; (7a80 <z_set_timeout_expiry+0x98>)
    7a48:	480b      	ldr	r0, [pc, #44]	; (7a78 <z_set_timeout_expiry+0x90>)
    7a4a:	23ac      	movs	r3, #172	; 0xac
    7a4c:	f000 fc60 	bl	8310 <printk>
    7a50:	4906      	ldr	r1, [pc, #24]	; (7a6c <z_set_timeout_expiry+0x84>)
    7a52:	480c      	ldr	r0, [pc, #48]	; (7a84 <z_set_timeout_expiry+0x9c>)
    7a54:	f000 fc5c 	bl	8310 <printk>
    7a58:	4805      	ldr	r0, [pc, #20]	; (7a70 <z_set_timeout_expiry+0x88>)
    7a5a:	21ac      	movs	r1, #172	; 0xac
    7a5c:	f000 fd24 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7a60:	f386 8811 	msr	BASEPRI, r6
    7a64:	f3bf 8f6f 	isb	sy
		}
	}
}
    7a68:	bd70      	pop	{r4, r5, r6, pc}
    7a6a:	bf00      	nop
    7a6c:	20000ce8 	.word	0x20000ce8
    7a70:	0000966e 	.word	0x0000966e
    7a74:	000096c0 	.word	0x000096c0
    7a78:	00009128 	.word	0x00009128
    7a7c:	000096d5 	.word	0x000096d5
    7a80:	00009694 	.word	0x00009694
    7a84:	000096ab 	.word	0x000096ab

00007a88 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7a88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7a8c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7a8e:	f7fe febd 	bl	680c <z_time_slice>
	__asm__ volatile(
    7a92:	f04f 0320 	mov.w	r3, #32
    7a96:	f3ef 8711 	mrs	r7, BASEPRI
    7a9a:	f383 8812 	msr	BASEPRI_MAX, r3
    7a9e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7aa2:	4855      	ldr	r0, [pc, #340]	; (7bf8 <sys_clock_announce+0x170>)
    7aa4:	f7fe f982 	bl	5dac <z_spin_lock_valid>
    7aa8:	b968      	cbnz	r0, 7ac6 <sys_clock_announce+0x3e>
    7aaa:	4a54      	ldr	r2, [pc, #336]	; (7bfc <sys_clock_announce+0x174>)
    7aac:	4954      	ldr	r1, [pc, #336]	; (7c00 <sys_clock_announce+0x178>)
    7aae:	4855      	ldr	r0, [pc, #340]	; (7c04 <sys_clock_announce+0x17c>)
    7ab0:	2381      	movs	r3, #129	; 0x81
    7ab2:	f000 fc2d 	bl	8310 <printk>
    7ab6:	4950      	ldr	r1, [pc, #320]	; (7bf8 <sys_clock_announce+0x170>)
    7ab8:	4853      	ldr	r0, [pc, #332]	; (7c08 <sys_clock_announce+0x180>)
    7aba:	f000 fc29 	bl	8310 <printk>
    7abe:	484f      	ldr	r0, [pc, #316]	; (7bfc <sys_clock_announce+0x174>)
    7ac0:	2181      	movs	r1, #129	; 0x81
    7ac2:	f000 fcf1 	bl	84a8 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    7ac6:	4d51      	ldr	r5, [pc, #324]	; (7c0c <sys_clock_announce+0x184>)
    7ac8:	4e51      	ldr	r6, [pc, #324]	; (7c10 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    7aca:	484b      	ldr	r0, [pc, #300]	; (7bf8 <sys_clock_announce+0x170>)
	return list->head == list;
    7acc:	f8df a14c 	ldr.w	sl, [pc, #332]	; 7c1c <sys_clock_announce+0x194>
    7ad0:	f7fe f98a 	bl	5de8 <z_spin_lock_set_owner>
    7ad4:	46b3      	mov	fp, r6
    7ad6:	602c      	str	r4, [r5, #0]
    7ad8:	e9d6 2300 	ldrd	r2, r3, [r6]
    7adc:	f8d5 c000 	ldr.w	ip, [r5]
    7ae0:	f8da 4000 	ldr.w	r4, [sl]
    7ae4:	e9cd 2300 	strd	r2, r3, [sp]
    7ae8:	4662      	mov	r2, ip
    7aea:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7aec:	4554      	cmp	r4, sl
    7aee:	46e0      	mov	r8, ip
    7af0:	4699      	mov	r9, r3
    7af2:	d00c      	beq.n	7b0e <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7af4:	b15c      	cbz	r4, 7b0e <sys_clock_announce+0x86>
    7af6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    7afa:	458c      	cmp	ip, r1
    7afc:	eb79 0302 	sbcs.w	r3, r9, r2
    7b00:	da2e      	bge.n	7b60 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7b02:	ebb1 000c 	subs.w	r0, r1, ip
    7b06:	eb62 0109 	sbc.w	r1, r2, r9
    7b0a:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    7b0e:	9a00      	ldr	r2, [sp, #0]
    7b10:	9901      	ldr	r1, [sp, #4]
    7b12:	eb18 0202 	adds.w	r2, r8, r2
    7b16:	464b      	mov	r3, r9
    7b18:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    7b1c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    7b1e:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    7b22:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7b24:	f7ff fdb0 	bl	7688 <next_timeout>
    7b28:	4621      	mov	r1, r4
    7b2a:	f7fc fc81 	bl	4430 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b2e:	4832      	ldr	r0, [pc, #200]	; (7bf8 <sys_clock_announce+0x170>)
    7b30:	f7fe f94a 	bl	5dc8 <z_spin_unlock_valid>
    7b34:	b968      	cbnz	r0, 7b52 <sys_clock_announce+0xca>
    7b36:	4a31      	ldr	r2, [pc, #196]	; (7bfc <sys_clock_announce+0x174>)
    7b38:	4936      	ldr	r1, [pc, #216]	; (7c14 <sys_clock_announce+0x18c>)
    7b3a:	4832      	ldr	r0, [pc, #200]	; (7c04 <sys_clock_announce+0x17c>)
    7b3c:	23ac      	movs	r3, #172	; 0xac
    7b3e:	f000 fbe7 	bl	8310 <printk>
    7b42:	492d      	ldr	r1, [pc, #180]	; (7bf8 <sys_clock_announce+0x170>)
    7b44:	4834      	ldr	r0, [pc, #208]	; (7c18 <sys_clock_announce+0x190>)
    7b46:	f000 fbe3 	bl	8310 <printk>
    7b4a:	482c      	ldr	r0, [pc, #176]	; (7bfc <sys_clock_announce+0x174>)
    7b4c:	21ac      	movs	r1, #172	; 0xac
    7b4e:	f000 fcab 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7b52:	f387 8811 	msr	BASEPRI, r7
    7b56:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7b5a:	b003      	add	sp, #12
    7b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    7b60:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    7b64:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    7b68:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    7b6c:	f04f 0200 	mov.w	r2, #0
    7b70:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    7b74:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    7b78:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    7b7a:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    7b7e:	4620      	mov	r0, r4
		curr_tick += dt;
    7b80:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    7b84:	f7ff fdac 	bl	76e0 <remove_timeout>
    7b88:	481b      	ldr	r0, [pc, #108]	; (7bf8 <sys_clock_announce+0x170>)
    7b8a:	f7fe f91d 	bl	5dc8 <z_spin_unlock_valid>
    7b8e:	b968      	cbnz	r0, 7bac <sys_clock_announce+0x124>
    7b90:	4a1a      	ldr	r2, [pc, #104]	; (7bfc <sys_clock_announce+0x174>)
    7b92:	4920      	ldr	r1, [pc, #128]	; (7c14 <sys_clock_announce+0x18c>)
    7b94:	481b      	ldr	r0, [pc, #108]	; (7c04 <sys_clock_announce+0x17c>)
    7b96:	23ac      	movs	r3, #172	; 0xac
    7b98:	f000 fbba 	bl	8310 <printk>
    7b9c:	4916      	ldr	r1, [pc, #88]	; (7bf8 <sys_clock_announce+0x170>)
    7b9e:	481e      	ldr	r0, [pc, #120]	; (7c18 <sys_clock_announce+0x190>)
    7ba0:	f000 fbb6 	bl	8310 <printk>
    7ba4:	4815      	ldr	r0, [pc, #84]	; (7bfc <sys_clock_announce+0x174>)
    7ba6:	21ac      	movs	r1, #172	; 0xac
    7ba8:	f000 fc7e 	bl	84a8 <assert_post_action>
    7bac:	f387 8811 	msr	BASEPRI, r7
    7bb0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7bb4:	68a3      	ldr	r3, [r4, #8]
    7bb6:	4620      	mov	r0, r4
    7bb8:	4798      	blx	r3
	__asm__ volatile(
    7bba:	f04f 0320 	mov.w	r3, #32
    7bbe:	f3ef 8711 	mrs	r7, BASEPRI
    7bc2:	f383 8812 	msr	BASEPRI_MAX, r3
    7bc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7bca:	480b      	ldr	r0, [pc, #44]	; (7bf8 <sys_clock_announce+0x170>)
    7bcc:	f7fe f8ee 	bl	5dac <z_spin_lock_valid>
    7bd0:	b968      	cbnz	r0, 7bee <sys_clock_announce+0x166>
    7bd2:	4a0a      	ldr	r2, [pc, #40]	; (7bfc <sys_clock_announce+0x174>)
    7bd4:	490a      	ldr	r1, [pc, #40]	; (7c00 <sys_clock_announce+0x178>)
    7bd6:	480b      	ldr	r0, [pc, #44]	; (7c04 <sys_clock_announce+0x17c>)
    7bd8:	2381      	movs	r3, #129	; 0x81
    7bda:	f000 fb99 	bl	8310 <printk>
    7bde:	4906      	ldr	r1, [pc, #24]	; (7bf8 <sys_clock_announce+0x170>)
    7be0:	4809      	ldr	r0, [pc, #36]	; (7c08 <sys_clock_announce+0x180>)
    7be2:	f000 fb95 	bl	8310 <printk>
    7be6:	4805      	ldr	r0, [pc, #20]	; (7bfc <sys_clock_announce+0x174>)
    7be8:	2181      	movs	r1, #129	; 0x81
    7bea:	f000 fc5d 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7bee:	4802      	ldr	r0, [pc, #8]	; (7bf8 <sys_clock_announce+0x170>)
    7bf0:	f7fe f8fa 	bl	5de8 <z_spin_lock_set_owner>
	return k;
    7bf4:	e770      	b.n	7ad8 <sys_clock_announce+0x50>
    7bf6:	bf00      	nop
    7bf8:	20000ce8 	.word	0x20000ce8
    7bfc:	0000966e 	.word	0x0000966e
    7c00:	000096c0 	.word	0x000096c0
    7c04:	00009128 	.word	0x00009128
    7c08:	000096d5 	.word	0x000096d5
    7c0c:	20000ce4 	.word	0x20000ce4
    7c10:	200005f0 	.word	0x200005f0
    7c14:	00009694 	.word	0x00009694
    7c18:	000096ab 	.word	0x000096ab
    7c1c:	2000017c 	.word	0x2000017c

00007c20 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7c20:	b570      	push	{r4, r5, r6, lr}
    7c22:	f04f 0320 	mov.w	r3, #32
    7c26:	f3ef 8611 	mrs	r6, BASEPRI
    7c2a:	f383 8812 	msr	BASEPRI_MAX, r3
    7c2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7c32:	481b      	ldr	r0, [pc, #108]	; (7ca0 <sys_clock_tick_get+0x80>)
    7c34:	f7fe f8ba 	bl	5dac <z_spin_lock_valid>
    7c38:	b968      	cbnz	r0, 7c56 <sys_clock_tick_get+0x36>
    7c3a:	4a1a      	ldr	r2, [pc, #104]	; (7ca4 <sys_clock_tick_get+0x84>)
    7c3c:	491a      	ldr	r1, [pc, #104]	; (7ca8 <sys_clock_tick_get+0x88>)
    7c3e:	481b      	ldr	r0, [pc, #108]	; (7cac <sys_clock_tick_get+0x8c>)
    7c40:	2381      	movs	r3, #129	; 0x81
    7c42:	f000 fb65 	bl	8310 <printk>
    7c46:	4916      	ldr	r1, [pc, #88]	; (7ca0 <sys_clock_tick_get+0x80>)
    7c48:	4819      	ldr	r0, [pc, #100]	; (7cb0 <sys_clock_tick_get+0x90>)
    7c4a:	f000 fb61 	bl	8310 <printk>
    7c4e:	4815      	ldr	r0, [pc, #84]	; (7ca4 <sys_clock_tick_get+0x84>)
    7c50:	2181      	movs	r1, #129	; 0x81
    7c52:	f000 fc29 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7c56:	4812      	ldr	r0, [pc, #72]	; (7ca0 <sys_clock_tick_get+0x80>)
    7c58:	f7fe f8c6 	bl	5de8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    7c5c:	f7fc fc18 	bl	4490 <sys_clock_elapsed>
    7c60:	4b14      	ldr	r3, [pc, #80]	; (7cb4 <sys_clock_tick_get+0x94>)
    7c62:	e9d3 4500 	ldrd	r4, r5, [r3]
    7c66:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c68:	480d      	ldr	r0, [pc, #52]	; (7ca0 <sys_clock_tick_get+0x80>)
    7c6a:	f145 0500 	adc.w	r5, r5, #0
    7c6e:	f7fe f8ab 	bl	5dc8 <z_spin_unlock_valid>
    7c72:	b968      	cbnz	r0, 7c90 <sys_clock_tick_get+0x70>
    7c74:	4a0b      	ldr	r2, [pc, #44]	; (7ca4 <sys_clock_tick_get+0x84>)
    7c76:	4910      	ldr	r1, [pc, #64]	; (7cb8 <sys_clock_tick_get+0x98>)
    7c78:	480c      	ldr	r0, [pc, #48]	; (7cac <sys_clock_tick_get+0x8c>)
    7c7a:	23ac      	movs	r3, #172	; 0xac
    7c7c:	f000 fb48 	bl	8310 <printk>
    7c80:	4907      	ldr	r1, [pc, #28]	; (7ca0 <sys_clock_tick_get+0x80>)
    7c82:	480e      	ldr	r0, [pc, #56]	; (7cbc <sys_clock_tick_get+0x9c>)
    7c84:	f000 fb44 	bl	8310 <printk>
    7c88:	4806      	ldr	r0, [pc, #24]	; (7ca4 <sys_clock_tick_get+0x84>)
    7c8a:	21ac      	movs	r1, #172	; 0xac
    7c8c:	f000 fc0c 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7c90:	f386 8811 	msr	BASEPRI, r6
    7c94:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    7c98:	4620      	mov	r0, r4
    7c9a:	4629      	mov	r1, r5
    7c9c:	bd70      	pop	{r4, r5, r6, pc}
    7c9e:	bf00      	nop
    7ca0:	20000ce8 	.word	0x20000ce8
    7ca4:	0000966e 	.word	0x0000966e
    7ca8:	000096c0 	.word	0x000096c0
    7cac:	00009128 	.word	0x00009128
    7cb0:	000096d5 	.word	0x000096d5
    7cb4:	200005f0 	.word	0x200005f0
    7cb8:	00009694 	.word	0x00009694
    7cbc:	000096ab 	.word	0x000096ab

00007cc0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    7cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cc2:	4604      	mov	r4, r0
	__asm__ volatile(
    7cc4:	f04f 0320 	mov.w	r3, #32
    7cc8:	f3ef 8511 	mrs	r5, BASEPRI
    7ccc:	f383 8812 	msr	BASEPRI_MAX, r3
    7cd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7cd4:	484c      	ldr	r0, [pc, #304]	; (7e08 <z_timer_expiration_handler+0x148>)
    7cd6:	f7fe f869 	bl	5dac <z_spin_lock_valid>
    7cda:	b968      	cbnz	r0, 7cf8 <z_timer_expiration_handler+0x38>
    7cdc:	4a4b      	ldr	r2, [pc, #300]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7cde:	494c      	ldr	r1, [pc, #304]	; (7e10 <z_timer_expiration_handler+0x150>)
    7ce0:	484c      	ldr	r0, [pc, #304]	; (7e14 <z_timer_expiration_handler+0x154>)
    7ce2:	2381      	movs	r3, #129	; 0x81
    7ce4:	f000 fb14 	bl	8310 <printk>
    7ce8:	4947      	ldr	r1, [pc, #284]	; (7e08 <z_timer_expiration_handler+0x148>)
    7cea:	484b      	ldr	r0, [pc, #300]	; (7e18 <z_timer_expiration_handler+0x158>)
    7cec:	f000 fb10 	bl	8310 <printk>
    7cf0:	4846      	ldr	r0, [pc, #280]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7cf2:	2181      	movs	r1, #129	; 0x81
    7cf4:	f000 fbd8 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7cf8:	4843      	ldr	r0, [pc, #268]	; (7e08 <z_timer_expiration_handler+0x148>)
    7cfa:	f7fe f875 	bl	5de8 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    7cfe:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    7d02:	1c56      	adds	r6, r2, #1
    7d04:	f143 0700 	adc.w	r7, r3, #0
    7d08:	2f00      	cmp	r7, #0
    7d0a:	bf08      	it	eq
    7d0c:	2e02      	cmpeq	r6, #2
    7d0e:	d303      	bcc.n	7d18 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7d10:	4942      	ldr	r1, [pc, #264]	; (7e1c <z_timer_expiration_handler+0x15c>)
    7d12:	4620      	mov	r0, r4
    7d14:	f7ff fcfe 	bl	7714 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    7d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7d1a:	3301      	adds	r3, #1
    7d1c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    7d1e:	6a23      	ldr	r3, [r4, #32]
    7d20:	2b00      	cmp	r3, #0
    7d22:	d035      	beq.n	7d90 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d24:	4838      	ldr	r0, [pc, #224]	; (7e08 <z_timer_expiration_handler+0x148>)
    7d26:	f7fe f84f 	bl	5dc8 <z_spin_unlock_valid>
    7d2a:	b968      	cbnz	r0, 7d48 <z_timer_expiration_handler+0x88>
    7d2c:	4a37      	ldr	r2, [pc, #220]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7d2e:	493c      	ldr	r1, [pc, #240]	; (7e20 <z_timer_expiration_handler+0x160>)
    7d30:	4838      	ldr	r0, [pc, #224]	; (7e14 <z_timer_expiration_handler+0x154>)
    7d32:	23ac      	movs	r3, #172	; 0xac
    7d34:	f000 faec 	bl	8310 <printk>
    7d38:	4933      	ldr	r1, [pc, #204]	; (7e08 <z_timer_expiration_handler+0x148>)
    7d3a:	483a      	ldr	r0, [pc, #232]	; (7e24 <z_timer_expiration_handler+0x164>)
    7d3c:	f000 fae8 	bl	8310 <printk>
    7d40:	4832      	ldr	r0, [pc, #200]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7d42:	21ac      	movs	r1, #172	; 0xac
    7d44:	f000 fbb0 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7d48:	f385 8811 	msr	BASEPRI, r5
    7d4c:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    7d50:	6a23      	ldr	r3, [r4, #32]
    7d52:	4620      	mov	r0, r4
    7d54:	4798      	blx	r3
	__asm__ volatile(
    7d56:	f04f 0320 	mov.w	r3, #32
    7d5a:	f3ef 8511 	mrs	r5, BASEPRI
    7d5e:	f383 8812 	msr	BASEPRI_MAX, r3
    7d62:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d66:	4828      	ldr	r0, [pc, #160]	; (7e08 <z_timer_expiration_handler+0x148>)
    7d68:	f7fe f820 	bl	5dac <z_spin_lock_valid>
    7d6c:	b968      	cbnz	r0, 7d8a <z_timer_expiration_handler+0xca>
    7d6e:	4a27      	ldr	r2, [pc, #156]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7d70:	4927      	ldr	r1, [pc, #156]	; (7e10 <z_timer_expiration_handler+0x150>)
    7d72:	4828      	ldr	r0, [pc, #160]	; (7e14 <z_timer_expiration_handler+0x154>)
    7d74:	2381      	movs	r3, #129	; 0x81
    7d76:	f000 facb 	bl	8310 <printk>
    7d7a:	4923      	ldr	r1, [pc, #140]	; (7e08 <z_timer_expiration_handler+0x148>)
    7d7c:	4826      	ldr	r0, [pc, #152]	; (7e18 <z_timer_expiration_handler+0x158>)
    7d7e:	f000 fac7 	bl	8310 <printk>
    7d82:	4822      	ldr	r0, [pc, #136]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7d84:	2181      	movs	r1, #129	; 0x81
    7d86:	f000 fb8f 	bl	84a8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d8a:	481f      	ldr	r0, [pc, #124]	; (7e08 <z_timer_expiration_handler+0x148>)
    7d8c:	f7fe f82c 	bl	5de8 <z_spin_lock_set_owner>
	return list->head == list;
    7d90:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7d94:	42a6      	cmp	r6, r4
    7d96:	d000      	beq.n	7d9a <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    7d98:	b9b6      	cbnz	r6, 7dc8 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d9a:	481b      	ldr	r0, [pc, #108]	; (7e08 <z_timer_expiration_handler+0x148>)
    7d9c:	f7fe f814 	bl	5dc8 <z_spin_unlock_valid>
    7da0:	b968      	cbnz	r0, 7dbe <z_timer_expiration_handler+0xfe>
    7da2:	4a1a      	ldr	r2, [pc, #104]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7da4:	491e      	ldr	r1, [pc, #120]	; (7e20 <z_timer_expiration_handler+0x160>)
    7da6:	481b      	ldr	r0, [pc, #108]	; (7e14 <z_timer_expiration_handler+0x154>)
    7da8:	23ac      	movs	r3, #172	; 0xac
    7daa:	f000 fab1 	bl	8310 <printk>
    7dae:	4916      	ldr	r1, [pc, #88]	; (7e08 <z_timer_expiration_handler+0x148>)
    7db0:	481c      	ldr	r0, [pc, #112]	; (7e24 <z_timer_expiration_handler+0x164>)
    7db2:	f000 faad 	bl	8310 <printk>
    7db6:	4815      	ldr	r0, [pc, #84]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7db8:	21ac      	movs	r1, #172	; 0xac
    7dba:	f000 fb75 	bl	84a8 <assert_post_action>
	__asm__ volatile(
    7dbe:	f385 8811 	msr	BASEPRI, r5
    7dc2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    7dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    7dc8:	4630      	mov	r0, r6
    7dca:	f7fe fb4d 	bl	6468 <z_unpend_thread_no_timeout>
    7dce:	2300      	movs	r3, #0
    7dd0:	480d      	ldr	r0, [pc, #52]	; (7e08 <z_timer_expiration_handler+0x148>)
    7dd2:	67b3      	str	r3, [r6, #120]	; 0x78
    7dd4:	f7fd fff8 	bl	5dc8 <z_spin_unlock_valid>
    7dd8:	b968      	cbnz	r0, 7df6 <z_timer_expiration_handler+0x136>
    7dda:	4a0c      	ldr	r2, [pc, #48]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7ddc:	4910      	ldr	r1, [pc, #64]	; (7e20 <z_timer_expiration_handler+0x160>)
    7dde:	480d      	ldr	r0, [pc, #52]	; (7e14 <z_timer_expiration_handler+0x154>)
    7de0:	23ac      	movs	r3, #172	; 0xac
    7de2:	f000 fa95 	bl	8310 <printk>
    7de6:	4908      	ldr	r1, [pc, #32]	; (7e08 <z_timer_expiration_handler+0x148>)
    7de8:	480e      	ldr	r0, [pc, #56]	; (7e24 <z_timer_expiration_handler+0x164>)
    7dea:	f000 fa91 	bl	8310 <printk>
    7dee:	4807      	ldr	r0, [pc, #28]	; (7e0c <z_timer_expiration_handler+0x14c>)
    7df0:	21ac      	movs	r1, #172	; 0xac
    7df2:	f000 fb59 	bl	84a8 <assert_post_action>
    7df6:	f385 8811 	msr	BASEPRI, r5
    7dfa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    7dfe:	4630      	mov	r0, r6
}
    7e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    7e04:	f7fe bdcc 	b.w	69a0 <z_ready_thread>
    7e08:	20000cec 	.word	0x20000cec
    7e0c:	0000966e 	.word	0x0000966e
    7e10:	000096c0 	.word	0x000096c0
    7e14:	00009128 	.word	0x00009128
    7e18:	000096d5 	.word	0x000096d5
    7e1c:	00007cc1 	.word	0x00007cc1
    7e20:	00009694 	.word	0x00009694
    7e24:	000096ab 	.word	0x000096ab

00007e28 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7e28:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    7e2c:	4619      	mov	r1, r3
    7e2e:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7e30:	1c4c      	adds	r4, r1, #1
{
    7e32:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7e34:	bf08      	it	eq
    7e36:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    7e3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    7e3e:	4680      	mov	r8, r0
    7e40:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7e42:	d04c      	beq.n	7ede <z_impl_k_timer_start+0xb6>
    7e44:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7e46:	1c6b      	adds	r3, r5, #1
    7e48:	bf08      	it	eq
    7e4a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    7e4e:	4614      	mov	r4, r2
    7e50:	d019      	beq.n	7e86 <z_impl_k_timer_start+0x5e>
    7e52:	ea54 0305 	orrs.w	r3, r4, r5
    7e56:	d016      	beq.n	7e86 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    7e58:	f06f 0301 	mvn.w	r3, #1
    7e5c:	ebb3 0a02 	subs.w	sl, r3, r2
    7e60:	f04f 33ff 	mov.w	r3, #4294967295
    7e64:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7e68:	f1ba 0f00 	cmp.w	sl, #0
    7e6c:	f17b 0300 	sbcs.w	r3, fp, #0
    7e70:	da09      	bge.n	7e86 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    7e72:	f112 34ff 	adds.w	r4, r2, #4294967295
    7e76:	f145 35ff 	adc.w	r5, r5, #4294967295
    7e7a:	2c01      	cmp	r4, #1
    7e7c:	f175 0300 	sbcs.w	r3, r5, #0
    7e80:	bfbc      	itt	lt
    7e82:	2401      	movlt	r4, #1
    7e84:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    7e86:	f06f 0301 	mvn.w	r3, #1
    7e8a:	1a1b      	subs	r3, r3, r0
    7e8c:	9300      	str	r3, [sp, #0]
    7e8e:	f04f 33ff 	mov.w	r3, #4294967295
    7e92:	eb63 0301 	sbc.w	r3, r3, r1
    7e96:	9301      	str	r3, [sp, #4]
    7e98:	e9dd 2300 	ldrd	r2, r3, [sp]
    7e9c:	2a00      	cmp	r2, #0
    7e9e:	f173 0300 	sbcs.w	r3, r3, #0
    7ea2:	da0c      	bge.n	7ebe <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    7ea4:	f110 38ff 	adds.w	r8, r0, #4294967295
    7ea8:	f141 39ff 	adc.w	r9, r1, #4294967295
    7eac:	f1b8 0f00 	cmp.w	r8, #0
    7eb0:	f179 0300 	sbcs.w	r3, r9, #0
    7eb4:	bfbc      	itt	lt
    7eb6:	f04f 0800 	movlt.w	r8, #0
    7eba:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    7ebe:	4630      	mov	r0, r6
    7ec0:	f7ff fcfc 	bl	78bc <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    7ec4:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7ec6:	4907      	ldr	r1, [pc, #28]	; (7ee4 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    7ec8:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7eca:	4642      	mov	r2, r8
    7ecc:	464b      	mov	r3, r9
    7ece:	4630      	mov	r0, r6
	timer->period = period;
    7ed0:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    7ed4:	b002      	add	sp, #8
    7ed6:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7eda:	f7ff bc1b 	b.w	7714 <z_add_timeout>
}
    7ede:	b002      	add	sp, #8
    7ee0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    7ee4:	00007cc1 	.word	0x00007cc1

00007ee8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    7ee8:	4a02      	ldr	r2, [pc, #8]	; (7ef4 <boot_banner+0xc>)
    7eea:	4903      	ldr	r1, [pc, #12]	; (7ef8 <boot_banner+0x10>)
    7eec:	4803      	ldr	r0, [pc, #12]	; (7efc <boot_banner+0x14>)
    7eee:	f000 ba0f 	b.w	8310 <printk>
    7ef2:	bf00      	nop
    7ef4:	0000a1fb 	.word	0x0000a1fb
    7ef8:	0000a3f2 	.word	0x0000a3f2
    7efc:	0000a401 	.word	0x0000a401

00007f00 <nrf_cc3xx_platform_init_no_rng>:
    7f00:	b510      	push	{r4, lr}
    7f02:	4c0a      	ldr	r4, [pc, #40]	; (7f2c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    7f04:	6823      	ldr	r3, [r4, #0]
    7f06:	b11b      	cbz	r3, 7f10 <nrf_cc3xx_platform_init_no_rng+0x10>
    7f08:	2301      	movs	r3, #1
    7f0a:	6023      	str	r3, [r4, #0]
    7f0c:	2000      	movs	r0, #0
    7f0e:	bd10      	pop	{r4, pc}
    7f10:	f000 f8d6 	bl	80c0 <CC_LibInitNoRng>
    7f14:	2800      	cmp	r0, #0
    7f16:	d0f7      	beq.n	7f08 <nrf_cc3xx_platform_init_no_rng+0x8>
    7f18:	3801      	subs	r0, #1
    7f1a:	2806      	cmp	r0, #6
    7f1c:	d803      	bhi.n	7f26 <nrf_cc3xx_platform_init_no_rng+0x26>
    7f1e:	4b04      	ldr	r3, [pc, #16]	; (7f30 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7f20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7f24:	bd10      	pop	{r4, pc}
    7f26:	4803      	ldr	r0, [pc, #12]	; (7f34 <nrf_cc3xx_platform_init_no_rng+0x34>)
    7f28:	bd10      	pop	{r4, pc}
    7f2a:	bf00      	nop
    7f2c:	20000cf0 	.word	0x20000cf0
    7f30:	00009030 	.word	0x00009030
    7f34:	ffff8ffe 	.word	0xffff8ffe

00007f38 <nrf_cc3xx_platform_abort>:
    7f38:	f3bf 8f4f 	dsb	sy
    7f3c:	4905      	ldr	r1, [pc, #20]	; (7f54 <nrf_cc3xx_platform_abort+0x1c>)
    7f3e:	4b06      	ldr	r3, [pc, #24]	; (7f58 <nrf_cc3xx_platform_abort+0x20>)
    7f40:	68ca      	ldr	r2, [r1, #12]
    7f42:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    7f46:	4313      	orrs	r3, r2
    7f48:	60cb      	str	r3, [r1, #12]
    7f4a:	f3bf 8f4f 	dsb	sy
    7f4e:	bf00      	nop
    7f50:	e7fd      	b.n	7f4e <nrf_cc3xx_platform_abort+0x16>
    7f52:	bf00      	nop
    7f54:	e000ed00 	.word	0xe000ed00
    7f58:	05fa0004 	.word	0x05fa0004

00007f5c <CC_PalAbort>:
    7f5c:	b4f0      	push	{r4, r5, r6, r7}
    7f5e:	4f09      	ldr	r7, [pc, #36]	; (7f84 <CC_PalAbort+0x28>)
    7f60:	4e09      	ldr	r6, [pc, #36]	; (7f88 <CC_PalAbort+0x2c>)
    7f62:	4c0a      	ldr	r4, [pc, #40]	; (7f8c <CC_PalAbort+0x30>)
    7f64:	4a0a      	ldr	r2, [pc, #40]	; (7f90 <CC_PalAbort+0x34>)
    7f66:	4d0b      	ldr	r5, [pc, #44]	; (7f94 <CC_PalAbort+0x38>)
    7f68:	490b      	ldr	r1, [pc, #44]	; (7f98 <CC_PalAbort+0x3c>)
    7f6a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    7f6e:	603b      	str	r3, [r7, #0]
    7f70:	6852      	ldr	r2, [r2, #4]
    7f72:	6033      	str	r3, [r6, #0]
    7f74:	6023      	str	r3, [r4, #0]
    7f76:	2400      	movs	r4, #0
    7f78:	602b      	str	r3, [r5, #0]
    7f7a:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    7f7e:	bcf0      	pop	{r4, r5, r6, r7}
    7f80:	4710      	bx	r2
    7f82:	bf00      	nop
    7f84:	5002b400 	.word	0x5002b400
    7f88:	5002b404 	.word	0x5002b404
    7f8c:	5002b408 	.word	0x5002b408
    7f90:	20000184 	.word	0x20000184
    7f94:	5002b40c 	.word	0x5002b40c
    7f98:	5002a000 	.word	0x5002a000

00007f9c <nrf_cc3xx_platform_set_abort>:
    7f9c:	e9d0 1200 	ldrd	r1, r2, [r0]
    7fa0:	4b01      	ldr	r3, [pc, #4]	; (7fa8 <nrf_cc3xx_platform_set_abort+0xc>)
    7fa2:	e9c3 1200 	strd	r1, r2, [r3]
    7fa6:	4770      	bx	lr
    7fa8:	20000184 	.word	0x20000184

00007fac <mutex_free>:
    7fac:	b510      	push	{r4, lr}
    7fae:	4604      	mov	r4, r0
    7fb0:	b130      	cbz	r0, 7fc0 <mutex_free+0x14>
    7fb2:	6863      	ldr	r3, [r4, #4]
    7fb4:	06db      	lsls	r3, r3, #27
    7fb6:	d502      	bpl.n	7fbe <mutex_free+0x12>
    7fb8:	2300      	movs	r3, #0
    7fba:	6023      	str	r3, [r4, #0]
    7fbc:	6063      	str	r3, [r4, #4]
    7fbe:	bd10      	pop	{r4, pc}
    7fc0:	4b02      	ldr	r3, [pc, #8]	; (7fcc <mutex_free+0x20>)
    7fc2:	4803      	ldr	r0, [pc, #12]	; (7fd0 <mutex_free+0x24>)
    7fc4:	685b      	ldr	r3, [r3, #4]
    7fc6:	4798      	blx	r3
    7fc8:	e7f3      	b.n	7fb2 <mutex_free+0x6>
    7fca:	bf00      	nop
    7fcc:	20000184 	.word	0x20000184
    7fd0:	0000904c 	.word	0x0000904c

00007fd4 <mutex_unlock>:
    7fd4:	b168      	cbz	r0, 7ff2 <mutex_unlock+0x1e>
    7fd6:	6843      	ldr	r3, [r0, #4]
    7fd8:	b13b      	cbz	r3, 7fea <mutex_unlock+0x16>
    7fda:	06db      	lsls	r3, r3, #27
    7fdc:	d507      	bpl.n	7fee <mutex_unlock+0x1a>
    7fde:	f3bf 8f5f 	dmb	sy
    7fe2:	2300      	movs	r3, #0
    7fe4:	6003      	str	r3, [r0, #0]
    7fe6:	4618      	mov	r0, r3
    7fe8:	4770      	bx	lr
    7fea:	4803      	ldr	r0, [pc, #12]	; (7ff8 <mutex_unlock+0x24>)
    7fec:	4770      	bx	lr
    7fee:	4803      	ldr	r0, [pc, #12]	; (7ffc <mutex_unlock+0x28>)
    7ff0:	4770      	bx	lr
    7ff2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7ff6:	4770      	bx	lr
    7ff8:	ffff8fea 	.word	0xffff8fea
    7ffc:	ffff8fe9 	.word	0xffff8fe9

00008000 <mutex_init>:
    8000:	b510      	push	{r4, lr}
    8002:	4604      	mov	r4, r0
    8004:	b120      	cbz	r0, 8010 <mutex_init+0x10>
    8006:	2200      	movs	r2, #0
    8008:	2311      	movs	r3, #17
    800a:	6022      	str	r2, [r4, #0]
    800c:	6063      	str	r3, [r4, #4]
    800e:	bd10      	pop	{r4, pc}
    8010:	4801      	ldr	r0, [pc, #4]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    8012:	f7ff ffa3 	bl	7f5c <CC_PalAbort>
    8016:	e7f6      	b.n	8006 <mutex_init+0x6>
    8018:	00009074 	.word	0x00009074

0000801c <mutex_lock>:
    801c:	b1c0      	cbz	r0, 8050 <mutex_lock+0x34>
    801e:	6843      	ldr	r3, [r0, #4]
    8020:	b1a3      	cbz	r3, 804c <mutex_lock+0x30>
    8022:	06db      	lsls	r3, r3, #27
    8024:	d510      	bpl.n	8048 <mutex_lock+0x2c>
    8026:	2201      	movs	r2, #1
    8028:	f3bf 8f5b 	dmb	ish
    802c:	e850 3f00 	ldrex	r3, [r0]
    8030:	e840 2100 	strex	r1, r2, [r0]
    8034:	2900      	cmp	r1, #0
    8036:	d1f9      	bne.n	802c <mutex_lock+0x10>
    8038:	f3bf 8f5b 	dmb	ish
    803c:	2b01      	cmp	r3, #1
    803e:	d0f3      	beq.n	8028 <mutex_lock+0xc>
    8040:	f3bf 8f5f 	dmb	sy
    8044:	2000      	movs	r0, #0
    8046:	4770      	bx	lr
    8048:	4803      	ldr	r0, [pc, #12]	; (8058 <mutex_lock+0x3c>)
    804a:	4770      	bx	lr
    804c:	4803      	ldr	r0, [pc, #12]	; (805c <mutex_lock+0x40>)
    804e:	4770      	bx	lr
    8050:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8054:	4770      	bx	lr
    8056:	bf00      	nop
    8058:	ffff8fe9 	.word	0xffff8fe9
    805c:	ffff8fea 	.word	0xffff8fea

00008060 <nrf_cc3xx_platform_set_mutexes>:
    8060:	b570      	push	{r4, r5, r6, lr}
    8062:	e9d0 2300 	ldrd	r2, r3, [r0]
    8066:	4c13      	ldr	r4, [pc, #76]	; (80b4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8068:	4d13      	ldr	r5, [pc, #76]	; (80b8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    806a:	e9c4 2300 	strd	r2, r3, [r4]
    806e:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    8072:	e9c4 6302 	strd	r6, r3, [r4, #8]
    8076:	4b11      	ldr	r3, [pc, #68]	; (80bc <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8078:	6808      	ldr	r0, [r1, #0]
    807a:	6018      	str	r0, [r3, #0]
    807c:	6848      	ldr	r0, [r1, #4]
    807e:	6058      	str	r0, [r3, #4]
    8080:	6888      	ldr	r0, [r1, #8]
    8082:	6098      	str	r0, [r3, #8]
    8084:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    8088:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    808c:	60de      	str	r6, [r3, #12]
    808e:	6118      	str	r0, [r3, #16]
    8090:	06cb      	lsls	r3, r1, #27
    8092:	d50d      	bpl.n	80b0 <nrf_cc3xx_platform_set_mutexes+0x50>
    8094:	2300      	movs	r3, #0
    8096:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    809a:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    809e:	f505 7088 	add.w	r0, r5, #272	; 0x110
    80a2:	4790      	blx	r2
    80a4:	6823      	ldr	r3, [r4, #0]
    80a6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    80aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80ae:	4718      	bx	r3
    80b0:	bd70      	pop	{r4, r5, r6, pc}
    80b2:	bf00      	nop
    80b4:	20000194 	.word	0x20000194
    80b8:	20000d10 	.word	0x20000d10
    80bc:	200001a4 	.word	0x200001a4

000080c0 <CC_LibInitNoRng>:
    80c0:	b510      	push	{r4, lr}
    80c2:	f000 f833 	bl	812c <CC_HalInit>
    80c6:	b120      	cbz	r0, 80d2 <CC_LibInitNoRng+0x12>
    80c8:	2403      	movs	r4, #3
    80ca:	f000 f867 	bl	819c <CC_PalTerminate>
    80ce:	4620      	mov	r0, r4
    80d0:	bd10      	pop	{r4, pc}
    80d2:	f000 f835 	bl	8140 <CC_PalInit>
    80d6:	b990      	cbnz	r0, 80fe <CC_LibInitNoRng+0x3e>
    80d8:	f000 f8b0 	bl	823c <CC_PalPowerSaveModeSelect>
    80dc:	b990      	cbnz	r0, 8104 <CC_LibInitNoRng+0x44>
    80de:	4b0f      	ldr	r3, [pc, #60]	; (811c <CC_LibInitNoRng+0x5c>)
    80e0:	681b      	ldr	r3, [r3, #0]
    80e2:	0e1b      	lsrs	r3, r3, #24
    80e4:	2bf0      	cmp	r3, #240	; 0xf0
    80e6:	d108      	bne.n	80fa <CC_LibInitNoRng+0x3a>
    80e8:	4a0d      	ldr	r2, [pc, #52]	; (8120 <CC_LibInitNoRng+0x60>)
    80ea:	4b0e      	ldr	r3, [pc, #56]	; (8124 <CC_LibInitNoRng+0x64>)
    80ec:	6812      	ldr	r2, [r2, #0]
    80ee:	429a      	cmp	r2, r3
    80f0:	d00a      	beq.n	8108 <CC_LibInitNoRng+0x48>
    80f2:	2407      	movs	r4, #7
    80f4:	f000 f81c 	bl	8130 <CC_HalTerminate>
    80f8:	e7e7      	b.n	80ca <CC_LibInitNoRng+0xa>
    80fa:	2406      	movs	r4, #6
    80fc:	e7fa      	b.n	80f4 <CC_LibInitNoRng+0x34>
    80fe:	2404      	movs	r4, #4
    8100:	4620      	mov	r0, r4
    8102:	bd10      	pop	{r4, pc}
    8104:	2400      	movs	r4, #0
    8106:	e7f5      	b.n	80f4 <CC_LibInitNoRng+0x34>
    8108:	2001      	movs	r0, #1
    810a:	f000 f897 	bl	823c <CC_PalPowerSaveModeSelect>
    810e:	4604      	mov	r4, r0
    8110:	2800      	cmp	r0, #0
    8112:	d1f7      	bne.n	8104 <CC_LibInitNoRng+0x44>
    8114:	4b04      	ldr	r3, [pc, #16]	; (8128 <CC_LibInitNoRng+0x68>)
    8116:	6018      	str	r0, [r3, #0]
    8118:	e7d9      	b.n	80ce <CC_LibInitNoRng+0xe>
    811a:	bf00      	nop
    811c:	5002b928 	.word	0x5002b928
    8120:	5002ba24 	.word	0x5002ba24
    8124:	20e00000 	.word	0x20e00000
    8128:	5002ba0c 	.word	0x5002ba0c

0000812c <CC_HalInit>:
    812c:	2000      	movs	r0, #0
    812e:	4770      	bx	lr

00008130 <CC_HalTerminate>:
    8130:	2000      	movs	r0, #0
    8132:	4770      	bx	lr

00008134 <CC_HalMaskInterrupt>:
    8134:	4b01      	ldr	r3, [pc, #4]	; (813c <CC_HalMaskInterrupt+0x8>)
    8136:	6018      	str	r0, [r3, #0]
    8138:	4770      	bx	lr
    813a:	bf00      	nop
    813c:	5002ba04 	.word	0x5002ba04

00008140 <CC_PalInit>:
    8140:	b510      	push	{r4, lr}
    8142:	4811      	ldr	r0, [pc, #68]	; (8188 <CC_PalInit+0x48>)
    8144:	f000 f848 	bl	81d8 <CC_PalMutexCreate>
    8148:	b100      	cbz	r0, 814c <CC_PalInit+0xc>
    814a:	bd10      	pop	{r4, pc}
    814c:	480f      	ldr	r0, [pc, #60]	; (818c <CC_PalInit+0x4c>)
    814e:	f000 f843 	bl	81d8 <CC_PalMutexCreate>
    8152:	2800      	cmp	r0, #0
    8154:	d1f9      	bne.n	814a <CC_PalInit+0xa>
    8156:	4c0e      	ldr	r4, [pc, #56]	; (8190 <CC_PalInit+0x50>)
    8158:	4620      	mov	r0, r4
    815a:	f000 f83d 	bl	81d8 <CC_PalMutexCreate>
    815e:	2800      	cmp	r0, #0
    8160:	d1f3      	bne.n	814a <CC_PalInit+0xa>
    8162:	4b0c      	ldr	r3, [pc, #48]	; (8194 <CC_PalInit+0x54>)
    8164:	480c      	ldr	r0, [pc, #48]	; (8198 <CC_PalInit+0x58>)
    8166:	601c      	str	r4, [r3, #0]
    8168:	f000 f836 	bl	81d8 <CC_PalMutexCreate>
    816c:	4601      	mov	r1, r0
    816e:	2800      	cmp	r0, #0
    8170:	d1eb      	bne.n	814a <CC_PalInit+0xa>
    8172:	f000 f82d 	bl	81d0 <CC_PalDmaInit>
    8176:	4604      	mov	r4, r0
    8178:	b108      	cbz	r0, 817e <CC_PalInit+0x3e>
    817a:	4620      	mov	r0, r4
    817c:	bd10      	pop	{r4, pc}
    817e:	f000 f83f 	bl	8200 <CC_PalPowerSaveModeInit>
    8182:	4620      	mov	r0, r4
    8184:	e7fa      	b.n	817c <CC_PalInit+0x3c>
    8186:	bf00      	nop
    8188:	200001dc 	.word	0x200001dc
    818c:	200001d0 	.word	0x200001d0
    8190:	200001d8 	.word	0x200001d8
    8194:	200001e0 	.word	0x200001e0
    8198:	200001d4 	.word	0x200001d4

0000819c <CC_PalTerminate>:
    819c:	b508      	push	{r3, lr}
    819e:	4808      	ldr	r0, [pc, #32]	; (81c0 <CC_PalTerminate+0x24>)
    81a0:	f000 f824 	bl	81ec <CC_PalMutexDestroy>
    81a4:	4807      	ldr	r0, [pc, #28]	; (81c4 <CC_PalTerminate+0x28>)
    81a6:	f000 f821 	bl	81ec <CC_PalMutexDestroy>
    81aa:	4807      	ldr	r0, [pc, #28]	; (81c8 <CC_PalTerminate+0x2c>)
    81ac:	f000 f81e 	bl	81ec <CC_PalMutexDestroy>
    81b0:	4806      	ldr	r0, [pc, #24]	; (81cc <CC_PalTerminate+0x30>)
    81b2:	f000 f81b 	bl	81ec <CC_PalMutexDestroy>
    81b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    81ba:	f000 b80b 	b.w	81d4 <CC_PalDmaTerminate>
    81be:	bf00      	nop
    81c0:	200001dc 	.word	0x200001dc
    81c4:	200001d0 	.word	0x200001d0
    81c8:	200001d8 	.word	0x200001d8
    81cc:	200001d4 	.word	0x200001d4

000081d0 <CC_PalDmaInit>:
    81d0:	2000      	movs	r0, #0
    81d2:	4770      	bx	lr

000081d4 <CC_PalDmaTerminate>:
    81d4:	4770      	bx	lr
    81d6:	bf00      	nop

000081d8 <CC_PalMutexCreate>:
    81d8:	b508      	push	{r3, lr}
    81da:	4b03      	ldr	r3, [pc, #12]	; (81e8 <CC_PalMutexCreate+0x10>)
    81dc:	6802      	ldr	r2, [r0, #0]
    81de:	681b      	ldr	r3, [r3, #0]
    81e0:	6810      	ldr	r0, [r2, #0]
    81e2:	4798      	blx	r3
    81e4:	2000      	movs	r0, #0
    81e6:	bd08      	pop	{r3, pc}
    81e8:	20000194 	.word	0x20000194

000081ec <CC_PalMutexDestroy>:
    81ec:	b508      	push	{r3, lr}
    81ee:	4b03      	ldr	r3, [pc, #12]	; (81fc <CC_PalMutexDestroy+0x10>)
    81f0:	6802      	ldr	r2, [r0, #0]
    81f2:	685b      	ldr	r3, [r3, #4]
    81f4:	6810      	ldr	r0, [r2, #0]
    81f6:	4798      	blx	r3
    81f8:	2000      	movs	r0, #0
    81fa:	bd08      	pop	{r3, pc}
    81fc:	20000194 	.word	0x20000194

00008200 <CC_PalPowerSaveModeInit>:
    8200:	b570      	push	{r4, r5, r6, lr}
    8202:	4c09      	ldr	r4, [pc, #36]	; (8228 <CC_PalPowerSaveModeInit+0x28>)
    8204:	4d09      	ldr	r5, [pc, #36]	; (822c <CC_PalPowerSaveModeInit+0x2c>)
    8206:	6920      	ldr	r0, [r4, #16]
    8208:	68ab      	ldr	r3, [r5, #8]
    820a:	4798      	blx	r3
    820c:	b118      	cbz	r0, 8216 <CC_PalPowerSaveModeInit+0x16>
    820e:	4b08      	ldr	r3, [pc, #32]	; (8230 <CC_PalPowerSaveModeInit+0x30>)
    8210:	4808      	ldr	r0, [pc, #32]	; (8234 <CC_PalPowerSaveModeInit+0x34>)
    8212:	685b      	ldr	r3, [r3, #4]
    8214:	4798      	blx	r3
    8216:	4a08      	ldr	r2, [pc, #32]	; (8238 <CC_PalPowerSaveModeInit+0x38>)
    8218:	68eb      	ldr	r3, [r5, #12]
    821a:	6920      	ldr	r0, [r4, #16]
    821c:	2100      	movs	r1, #0
    821e:	6011      	str	r1, [r2, #0]
    8220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8224:	4718      	bx	r3
    8226:	bf00      	nop
    8228:	200001a4 	.word	0x200001a4
    822c:	20000194 	.word	0x20000194
    8230:	20000184 	.word	0x20000184
    8234:	00009098 	.word	0x00009098
    8238:	20000d04 	.word	0x20000d04

0000823c <CC_PalPowerSaveModeSelect>:
    823c:	b570      	push	{r4, r5, r6, lr}
    823e:	4d1a      	ldr	r5, [pc, #104]	; (82a8 <CC_PalPowerSaveModeSelect+0x6c>)
    8240:	4e1a      	ldr	r6, [pc, #104]	; (82ac <CC_PalPowerSaveModeSelect+0x70>)
    8242:	4604      	mov	r4, r0
    8244:	68b2      	ldr	r2, [r6, #8]
    8246:	6928      	ldr	r0, [r5, #16]
    8248:	4790      	blx	r2
    824a:	b9f0      	cbnz	r0, 828a <CC_PalPowerSaveModeSelect+0x4e>
    824c:	b15c      	cbz	r4, 8266 <CC_PalPowerSaveModeSelect+0x2a>
    824e:	4c18      	ldr	r4, [pc, #96]	; (82b0 <CC_PalPowerSaveModeSelect+0x74>)
    8250:	6823      	ldr	r3, [r4, #0]
    8252:	b1ab      	cbz	r3, 8280 <CC_PalPowerSaveModeSelect+0x44>
    8254:	2b01      	cmp	r3, #1
    8256:	d01a      	beq.n	828e <CC_PalPowerSaveModeSelect+0x52>
    8258:	3b01      	subs	r3, #1
    825a:	6023      	str	r3, [r4, #0]
    825c:	6928      	ldr	r0, [r5, #16]
    825e:	68f3      	ldr	r3, [r6, #12]
    8260:	4798      	blx	r3
    8262:	2000      	movs	r0, #0
    8264:	bd70      	pop	{r4, r5, r6, pc}
    8266:	4c12      	ldr	r4, [pc, #72]	; (82b0 <CC_PalPowerSaveModeSelect+0x74>)
    8268:	6821      	ldr	r1, [r4, #0]
    826a:	b939      	cbnz	r1, 827c <CC_PalPowerSaveModeSelect+0x40>
    826c:	4b11      	ldr	r3, [pc, #68]	; (82b4 <CC_PalPowerSaveModeSelect+0x78>)
    826e:	4a12      	ldr	r2, [pc, #72]	; (82b8 <CC_PalPowerSaveModeSelect+0x7c>)
    8270:	2001      	movs	r0, #1
    8272:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    8276:	6813      	ldr	r3, [r2, #0]
    8278:	2b00      	cmp	r3, #0
    827a:	d1fc      	bne.n	8276 <CC_PalPowerSaveModeSelect+0x3a>
    827c:	3101      	adds	r1, #1
    827e:	6021      	str	r1, [r4, #0]
    8280:	68f3      	ldr	r3, [r6, #12]
    8282:	6928      	ldr	r0, [r5, #16]
    8284:	4798      	blx	r3
    8286:	2000      	movs	r0, #0
    8288:	bd70      	pop	{r4, r5, r6, pc}
    828a:	480c      	ldr	r0, [pc, #48]	; (82bc <CC_PalPowerSaveModeSelect+0x80>)
    828c:	bd70      	pop	{r4, r5, r6, pc}
    828e:	4a0a      	ldr	r2, [pc, #40]	; (82b8 <CC_PalPowerSaveModeSelect+0x7c>)
    8290:	6813      	ldr	r3, [r2, #0]
    8292:	2b00      	cmp	r3, #0
    8294:	d1fc      	bne.n	8290 <CC_PalPowerSaveModeSelect+0x54>
    8296:	4a07      	ldr	r2, [pc, #28]	; (82b4 <CC_PalPowerSaveModeSelect+0x78>)
    8298:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    829c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    82a0:	f7ff ff48 	bl	8134 <CC_HalMaskInterrupt>
    82a4:	6823      	ldr	r3, [r4, #0]
    82a6:	e7d7      	b.n	8258 <CC_PalPowerSaveModeSelect+0x1c>
    82a8:	200001a4 	.word	0x200001a4
    82ac:	20000194 	.word	0x20000194
    82b0:	20000d04 	.word	0x20000d04
    82b4:	5002a000 	.word	0x5002a000
    82b8:	5002b910 	.word	0x5002b910
    82bc:	ffff8fe9 	.word	0xffff8fe9

000082c0 <k_msleep>:
{
    82c0:	b538      	push	{r3, r4, r5, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    82c2:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    82c6:	f240 34e7 	movw	r4, #999	; 0x3e7
    82ca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    82ce:	2500      	movs	r5, #0
    82d0:	fbc0 4501 	smlal	r4, r5, r0, r1
    82d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    82d8:	2300      	movs	r3, #0
    82da:	4620      	mov	r0, r4
    82dc:	4629      	mov	r1, r5
    82de:	f7f8 fa29 	bl	734 <__aeabi_uldivmod>
}
    82e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return z_impl_k_sleep(timeout);
    82e6:	f7ff b8b9 	b.w	745c <z_impl_k_sleep>

000082ea <sys_notify_validate>:
	if (notify == NULL) {
    82ea:	4603      	mov	r3, r0
    82ec:	b158      	cbz	r0, 8306 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    82ee:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    82f0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    82f4:	2a01      	cmp	r2, #1
    82f6:	d003      	beq.n	8300 <sys_notify_validate+0x16>
    82f8:	2a03      	cmp	r2, #3
    82fa:	d104      	bne.n	8306 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    82fc:	6802      	ldr	r2, [r0, #0]
    82fe:	b112      	cbz	r2, 8306 <sys_notify_validate+0x1c>
		notify->result = 0;
    8300:	2000      	movs	r0, #0
    8302:	6098      	str	r0, [r3, #8]
    8304:	4770      	bx	lr
		return -EINVAL;
    8306:	f06f 0015 	mvn.w	r0, #21
}
    830a:	4770      	bx	lr

0000830c <arch_printk_char_out>:
}
    830c:	2000      	movs	r0, #0
    830e:	4770      	bx	lr

00008310 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    8310:	b40f      	push	{r0, r1, r2, r3}
    8312:	b507      	push	{r0, r1, r2, lr}
    8314:	a904      	add	r1, sp, #16
    8316:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    831a:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    831c:	f7f9 f832 	bl	1384 <vprintk>
	}
	va_end(ap);
}
    8320:	b003      	add	sp, #12
    8322:	f85d eb04 	ldr.w	lr, [sp], #4
    8326:	b004      	add	sp, #16
    8328:	4770      	bx	lr

0000832a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    832a:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    832c:	f013 0307 	ands.w	r3, r3, #7
    8330:	d105      	bne.n	833e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8332:	6803      	ldr	r3, [r0, #0]
    8334:	2b00      	cmp	r3, #0
		evt = EVT_START;
    8336:	bf0c      	ite	eq
    8338:	2000      	moveq	r0, #0
    833a:	2003      	movne	r0, #3
    833c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    833e:	2b02      	cmp	r3, #2
    8340:	d105      	bne.n	834e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8342:	8bc3      	ldrh	r3, [r0, #30]
    8344:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    8346:	bf14      	ite	ne
    8348:	2000      	movne	r0, #0
    834a:	2004      	moveq	r0, #4
    834c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    834e:	2b01      	cmp	r3, #1
    8350:	d105      	bne.n	835e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8352:	6803      	ldr	r3, [r0, #0]
    8354:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    8356:	bf0c      	ite	eq
    8358:	2000      	moveq	r0, #0
    835a:	2005      	movne	r0, #5
    835c:	4770      	bx	lr
	int evt = EVT_NOP;
    835e:	2000      	movs	r0, #0
}
    8360:	4770      	bx	lr

00008362 <notify_one>:
{
    8362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8366:	460d      	mov	r5, r1
    8368:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    836a:	4619      	mov	r1, r3
    836c:	1d28      	adds	r0, r5, #4
{
    836e:	4690      	mov	r8, r2
    8370:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8372:	f7f8 ffd9 	bl	1328 <sys_notify_finalize>
	if (cb) {
    8376:	4604      	mov	r4, r0
    8378:	b138      	cbz	r0, 838a <notify_one+0x28>
		cb(mgr, cli, state, res);
    837a:	4633      	mov	r3, r6
    837c:	4642      	mov	r2, r8
    837e:	4629      	mov	r1, r5
    8380:	4638      	mov	r0, r7
    8382:	46a4      	mov	ip, r4
}
    8384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8388:	4760      	bx	ip
}
    838a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000838e <validate_args>:
{
    838e:	b510      	push	{r4, lr}
    8390:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8392:	b140      	cbz	r0, 83a6 <validate_args+0x18>
    8394:	b139      	cbz	r1, 83a6 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8396:	1d08      	adds	r0, r1, #4
    8398:	f7ff ffa7 	bl	82ea <sys_notify_validate>
	if ((rv == 0)
    839c:	b928      	cbnz	r0, 83aa <validate_args+0x1c>
	    && ((cli->notify.flags
    839e:	68a3      	ldr	r3, [r4, #8]
    83a0:	f033 0303 	bics.w	r3, r3, #3
    83a4:	d001      	beq.n	83aa <validate_args+0x1c>
		rv = -EINVAL;
    83a6:	f06f 0015 	mvn.w	r0, #21
}
    83aa:	bd10      	pop	{r4, pc}

000083ac <onoff_manager_init>:
{
    83ac:	b538      	push	{r3, r4, r5, lr}
    83ae:	460c      	mov	r4, r1
	if ((mgr == NULL)
    83b0:	4605      	mov	r5, r0
    83b2:	b158      	cbz	r0, 83cc <onoff_manager_init+0x20>
	    || (transitions == NULL)
    83b4:	b151      	cbz	r1, 83cc <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    83b6:	680b      	ldr	r3, [r1, #0]
    83b8:	b143      	cbz	r3, 83cc <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    83ba:	684b      	ldr	r3, [r1, #4]
    83bc:	b133      	cbz	r3, 83cc <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    83be:	2220      	movs	r2, #32
    83c0:	2100      	movs	r1, #0
    83c2:	f000 f8ba 	bl	853a <memset>
    83c6:	612c      	str	r4, [r5, #16]
	return 0;
    83c8:	2000      	movs	r0, #0
}
    83ca:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    83cc:	f06f 0015 	mvn.w	r0, #21
    83d0:	e7fb      	b.n	83ca <onoff_manager_init+0x1e>

000083d2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    83d2:	4604      	mov	r4, r0
    83d4:	b508      	push	{r3, lr}
    83d6:	4608      	mov	r0, r1
    83d8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    83da:	461a      	mov	r2, r3
    83dc:	47a0      	blx	r4
	return z_impl_z_current_get();
    83de:	f7ff f875 	bl	74cc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    83e2:	f7fa fbad 	bl	2b40 <z_impl_k_thread_abort>

000083e6 <encode_uint>:
{
    83e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    83ea:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    83ec:	78d3      	ldrb	r3, [r2, #3]
{
    83ee:	4614      	mov	r4, r2
	switch (specifier) {
    83f0:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    83f2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    83f6:	4606      	mov	r6, r0
    83f8:	460f      	mov	r7, r1
    83fa:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    83fc:	d02d      	beq.n	845a <encode_uint+0x74>
    83fe:	d828      	bhi.n	8452 <encode_uint+0x6c>
		return 16;
    8400:	2b58      	cmp	r3, #88	; 0x58
    8402:	bf14      	ite	ne
    8404:	250a      	movne	r5, #10
    8406:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    8408:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    840c:	46aa      	mov	sl, r5
    840e:	f04f 0b00 	mov.w	fp, #0
    8412:	4652      	mov	r2, sl
    8414:	465b      	mov	r3, fp
    8416:	4630      	mov	r0, r6
    8418:	4639      	mov	r1, r7
    841a:	f7f8 f98b 	bl	734 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    841e:	2a09      	cmp	r2, #9
    8420:	b2d3      	uxtb	r3, r2
    8422:	d81f      	bhi.n	8464 <encode_uint+0x7e>
    8424:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8426:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8428:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    842a:	bf08      	it	eq
    842c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    842e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    8432:	d301      	bcc.n	8438 <encode_uint+0x52>
    8434:	45c8      	cmp	r8, r9
    8436:	d812      	bhi.n	845e <encode_uint+0x78>
	if (conv->flag_hash) {
    8438:	7823      	ldrb	r3, [r4, #0]
    843a:	069b      	lsls	r3, r3, #26
    843c:	d505      	bpl.n	844a <encode_uint+0x64>
		if (radix == 8) {
    843e:	2d08      	cmp	r5, #8
    8440:	d116      	bne.n	8470 <encode_uint+0x8a>
			conv->altform_0 = true;
    8442:	78a3      	ldrb	r3, [r4, #2]
    8444:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8448:	70a3      	strb	r3, [r4, #2]
}
    844a:	4640      	mov	r0, r8
    844c:	b003      	add	sp, #12
    844e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8452:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8456:	2b70      	cmp	r3, #112	; 0x70
    8458:	e7d3      	b.n	8402 <encode_uint+0x1c>
	switch (specifier) {
    845a:	2508      	movs	r5, #8
    845c:	e7d4      	b.n	8408 <encode_uint+0x22>
		value /= radix;
    845e:	4606      	mov	r6, r0
    8460:	460f      	mov	r7, r1
    8462:	e7d6      	b.n	8412 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8464:	9a01      	ldr	r2, [sp, #4]
    8466:	2a19      	cmp	r2, #25
    8468:	bf94      	ite	ls
    846a:	3337      	addls	r3, #55	; 0x37
    846c:	3357      	addhi	r3, #87	; 0x57
    846e:	e7da      	b.n	8426 <encode_uint+0x40>
		} else if (radix == 16) {
    8470:	2d10      	cmp	r5, #16
    8472:	d1ea      	bne.n	844a <encode_uint+0x64>
			conv->altform_0c = true;
    8474:	78a3      	ldrb	r3, [r4, #2]
    8476:	f043 0310 	orr.w	r3, r3, #16
    847a:	e7e5      	b.n	8448 <encode_uint+0x62>

0000847c <outs>:
{
    847c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8480:	4607      	mov	r7, r0
    8482:	4688      	mov	r8, r1
    8484:	4615      	mov	r5, r2
    8486:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8488:	4614      	mov	r4, r2
    848a:	42b4      	cmp	r4, r6
    848c:	eba4 0005 	sub.w	r0, r4, r5
    8490:	d302      	bcc.n	8498 <outs+0x1c>
    8492:	b93e      	cbnz	r6, 84a4 <outs+0x28>
    8494:	7823      	ldrb	r3, [r4, #0]
    8496:	b12b      	cbz	r3, 84a4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8498:	f814 0b01 	ldrb.w	r0, [r4], #1
    849c:	4641      	mov	r1, r8
    849e:	47b8      	blx	r7
		if (rc < 0) {
    84a0:	2800      	cmp	r0, #0
    84a2:	daf2      	bge.n	848a <outs+0xe>
}
    84a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000084a8 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    84a8:	4040      	eors	r0, r0
    84aa:	f380 8811 	msr	BASEPRI, r0
    84ae:	f04f 0004 	mov.w	r0, #4
    84b2:	df02      	svc	2
}
    84b4:	4770      	bx	lr

000084b6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    84b6:	4770      	bx	lr

000084b8 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    84b8:	2200      	movs	r2, #0
    84ba:	e9c0 2200 	strd	r2, r2, [r0]
    84be:	6082      	str	r2, [r0, #8]
}
    84c0:	4770      	bx	lr

000084c2 <abort_function>:
{
    84c2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    84c4:	2000      	movs	r0, #0
    84c6:	f7f9 fdef 	bl	20a8 <sys_reboot>

000084ca <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    84ca:	f7fd b92d 	b.w	5728 <z_fatal_error>

000084ce <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    84ce:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    84d0:	6800      	ldr	r0, [r0, #0]
    84d2:	f7fd b929 	b.w	5728 <z_fatal_error>

000084d6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    84d6:	2100      	movs	r1, #0
    84d8:	2001      	movs	r0, #1
    84da:	f7ff bff6 	b.w	84ca <z_arm_fatal_error>

000084de <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    84de:	b508      	push	{r3, lr}
	handler();
    84e0:	f7fa f876 	bl	25d0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    84e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    84e8:	f7fa b952 	b.w	2790 <z_arm_exc_exit>

000084ec <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    84ec:	4603      	mov	r3, r0
	size_t n = 0;
    84ee:	2000      	movs	r0, #0

	while (*s != '\0') {
    84f0:	5c1a      	ldrb	r2, [r3, r0]
    84f2:	b902      	cbnz	r2, 84f6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    84f4:	4770      	bx	lr
		n++;
    84f6:	3001      	adds	r0, #1
    84f8:	e7fa      	b.n	84f0 <strlen+0x4>

000084fa <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    84fa:	4603      	mov	r3, r0
	size_t n = 0;
    84fc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    84fe:	5c1a      	ldrb	r2, [r3, r0]
    8500:	b10a      	cbz	r2, 8506 <strnlen+0xc>
    8502:	4288      	cmp	r0, r1
    8504:	d100      	bne.n	8508 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8506:	4770      	bx	lr
		n++;
    8508:	3001      	adds	r0, #1
    850a:	e7f8      	b.n	84fe <strnlen+0x4>

0000850c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    850c:	1e43      	subs	r3, r0, #1
    850e:	3901      	subs	r1, #1
    8510:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    8514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    8518:	4282      	cmp	r2, r0
    851a:	d101      	bne.n	8520 <strcmp+0x14>
    851c:	2a00      	cmp	r2, #0
    851e:	d1f7      	bne.n	8510 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    8520:	1a10      	subs	r0, r2, r0
    8522:	4770      	bx	lr

00008524 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8524:	b510      	push	{r4, lr}
    8526:	1e43      	subs	r3, r0, #1
    8528:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    852a:	4291      	cmp	r1, r2
    852c:	d100      	bne.n	8530 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    852e:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8530:	f811 4b01 	ldrb.w	r4, [r1], #1
    8534:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    8538:	e7f7      	b.n	852a <memcpy+0x6>

0000853a <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    853a:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    853c:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    853e:	4603      	mov	r3, r0
	while (n > 0) {
    8540:	4293      	cmp	r3, r2
    8542:	d100      	bne.n	8546 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8544:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8546:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    854a:	e7f9      	b.n	8540 <memset+0x6>

0000854c <_stdout_hook_default>:
}
    854c:	f04f 30ff 	mov.w	r0, #4294967295
    8550:	4770      	bx	lr

00008552 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    8552:	f7fa bc33 	b.w	2dbc <z_impl_zephyr_fputc>

00008556 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    8556:	b084      	sub	sp, #16
    8558:	ab04      	add	r3, sp, #16
    855a:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    855e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8562:	2b06      	cmp	r3, #6
    8564:	d108      	bne.n	8578 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    856a:	2201      	movs	r2, #1
    856c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8570:	f3bf 8f4f 	dsb	sy
        __WFE();
    8574:	bf20      	wfe
    while (true)
    8576:	e7fd      	b.n	8574 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    8578:	b004      	add	sp, #16
    857a:	4770      	bx	lr

0000857c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    857c:	b084      	sub	sp, #16
    857e:	ab04      	add	r3, sp, #16
    8580:	e903 0007 	stmdb	r3, {r0, r1, r2}
    8584:	2300      	movs	r3, #0
    8586:	f383 8811 	msr	BASEPRI, r3
    858a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    858e:	b004      	add	sp, #16
    8590:	4770      	bx	lr

00008592 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    8592:	f1a0 0308 	sub.w	r3, r0, #8
    8596:	f3bf 8f5b 	dmb	ish
    859a:	e853 2f00 	ldrex	r2, [r3]
    859e:	1c51      	adds	r1, r2, #1
    85a0:	e843 1c00 	strex	ip, r1, [r3]
    85a4:	f1bc 0f00 	cmp.w	ip, #0
    85a8:	d1f7      	bne.n	859a <adc_context_on_timer_expired+0x8>
    85aa:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    85ae:	b91a      	cbnz	r2, 85b8 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    85b0:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    85b4:	f7fa bc72 	b.w	2e9c <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    85b8:	f06f 030f 	mvn.w	r3, #15
    85bc:	6583      	str	r3, [r0, #88]	; 0x58
}
    85be:	4770      	bx	lr

000085c0 <set_starting_state>:
{
    85c0:	b510      	push	{r4, lr}
	__asm__ volatile(
    85c2:	f04f 0320 	mov.w	r3, #32
    85c6:	f3ef 8211 	mrs	r2, BASEPRI
    85ca:	f383 8812 	msr	BASEPRI_MAX, r3
    85ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    85d2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    85d4:	f003 0407 	and.w	r4, r3, #7
    85d8:	2c01      	cmp	r4, #1
    85da:	d106      	bne.n	85ea <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    85dc:	6001      	str	r1, [r0, #0]
	int err = 0;
    85de:	2000      	movs	r0, #0
	__asm__ volatile(
    85e0:	f382 8811 	msr	BASEPRI, r2
    85e4:	f3bf 8f6f 	isb	sy
}
    85e8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    85ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    85ee:	428b      	cmp	r3, r1
		err = -EALREADY;
    85f0:	bf14      	ite	ne
    85f2:	f04f 30ff 	movne.w	r0, #4294967295
    85f6:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    85fa:	e7f1      	b.n	85e0 <set_starting_state+0x20>

000085fc <set_on_state>:
	__asm__ volatile(
    85fc:	f04f 0320 	mov.w	r3, #32
    8600:	f3ef 8211 	mrs	r2, BASEPRI
    8604:	f383 8812 	msr	BASEPRI_MAX, r3
    8608:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    860c:	6803      	ldr	r3, [r0, #0]
    860e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8612:	f043 0302 	orr.w	r3, r3, #2
    8616:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    8618:	f382 8811 	msr	BASEPRI, r2
    861c:	f3bf 8f6f 	isb	sy
}
    8620:	4770      	bx	lr

00008622 <onoff_started_callback>:
	return &data->mgr[type];
    8622:	6900      	ldr	r0, [r0, #16]
    8624:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8626:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    862a:	2100      	movs	r1, #0
    862c:	4710      	bx	r2

0000862e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    862e:	2000      	movs	r0, #0
    8630:	f7fc b904 	b.w	483c <nrfx_clock_start>

00008634 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8634:	2000      	movs	r0, #0
    8636:	f7fc b955 	b.w	48e4 <nrfx_clock_stop>

0000863a <api_stop>:
	return stop(dev, subsys, CTX_API);
    863a:	2280      	movs	r2, #128	; 0x80
    863c:	f7fa be48 	b.w	32d0 <stop>

00008640 <blocking_start_callback>:
{
    8640:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    8642:	f7fd bdcd 	b.w	61e0 <z_impl_k_sem_give>

00008646 <api_start>:
{
    8646:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    864a:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    864c:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    864e:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    8650:	436f      	muls	r7, r5
{
    8652:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    8654:	f107 0048 	add.w	r0, r7, #72	; 0x48
    8658:	2180      	movs	r1, #128	; 0x80
    865a:	4420      	add	r0, r4
{
    865c:	4690      	mov	r8, r2
    865e:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    8660:	f7ff ffae 	bl	85c0 <set_starting_state>
	if (err < 0) {
    8664:	2800      	cmp	r0, #0
    8666:	db07      	blt.n	8678 <api_start+0x32>
	subdata->cb = cb;
    8668:	443c      	add	r4, r7
	subdata->user_data = user_data;
    866a:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    866e:	6873      	ldr	r3, [r6, #4]
    8670:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    8674:	4798      	blx	r3
	return 0;
    8676:	2000      	movs	r0, #0
}
    8678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000867c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    867c:	6843      	ldr	r3, [r0, #4]
    867e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    8680:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    8684:	600b      	str	r3, [r1, #0]
}
    8686:	2000      	movs	r0, #0
    8688:	4770      	bx	lr

0000868a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    868a:	6843      	ldr	r3, [r0, #4]
    868c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    868e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    8692:	4042      	eors	r2, r0
    8694:	400a      	ands	r2, r1
    8696:	4042      	eors	r2, r0
    p_reg->OUT = value;
    8698:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    869c:	2000      	movs	r0, #0
    869e:	4770      	bx	lr

000086a0 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86a0:	6843      	ldr	r3, [r0, #4]
    86a2:	685b      	ldr	r3, [r3, #4]
}
    86a4:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    86a6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    86aa:	4770      	bx	lr

000086ac <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86ac:	6843      	ldr	r3, [r0, #4]
    86ae:	685b      	ldr	r3, [r3, #4]
}
    86b0:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    86b2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    86b6:	4770      	bx	lr

000086b8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86b8:	6843      	ldr	r3, [r0, #4]
    86ba:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    86bc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    86c0:	404b      	eors	r3, r1
    p_reg->OUT = value;
    86c2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    86c6:	2000      	movs	r0, #0
    86c8:	4770      	bx	lr

000086ca <any_other_channel_is_active>:
{
    86ca:	b530      	push	{r4, r5, lr}
    86cc:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    86ce:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    86d0:	b2da      	uxtb	r2, r3
    86d2:	4282      	cmp	r2, r0
    86d4:	d007      	beq.n	86e6 <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    86d6:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    86da:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    86de:	b112      	cbz	r2, 86e6 <any_other_channel_is_active+0x1c>
    86e0:	898d      	ldrh	r5, [r1, #12]
    86e2:	4295      	cmp	r5, r2
    86e4:	d804      	bhi.n	86f0 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    86e6:	3301      	adds	r3, #1
    86e8:	2b04      	cmp	r3, #4
    86ea:	d1f1      	bne.n	86d0 <any_other_channel_is_active+0x6>
	return false;
    86ec:	2000      	movs	r0, #0
}
    86ee:	bd30      	pop	{r4, r5, pc}
			return true;
    86f0:	2001      	movs	r0, #1
    86f2:	e7fc      	b.n	86ee <any_other_channel_is_active+0x24>

000086f4 <pwm_nrfx_pin_set>:
{
    86f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86f8:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    86fc:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    86fe:	6904      	ldr	r4, [r0, #16]
{
    8700:	4688      	mov	r8, r1
    8702:	4616      	mov	r6, r2
    8704:	4699      	mov	r9, r3
	if (flags) {
    8706:	2d00      	cmp	r5, #0
    8708:	d140      	bne.n	878c <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    870a:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    870c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    8710:	2bff      	cmp	r3, #255	; 0xff
    8712:	d003      	beq.n	871c <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    8714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    8718:	4598      	cmp	r8, r3
    871a:	d03a      	beq.n	8792 <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    871c:	3501      	adds	r5, #1
    871e:	b2ed      	uxtb	r5, r5
    8720:	2d04      	cmp	r5, #4
    8722:	d1f3      	bne.n	870c <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    8724:	f06f 0015 	mvn.w	r0, #21
    8728:	e009      	b.n	873e <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    872a:	2000      	movs	r0, #0
    872c:	e042      	b.n	87b4 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    872e:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8730:	2b08      	cmp	r3, #8
		countertop >>= 1;
    8732:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    8736:	d158      	bne.n	87ea <pwm_nrfx_pin_set+0xf6>
    8738:	e7f4      	b.n	8724 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    873a:	b9d0      	cbnz	r0, 8772 <pwm_nrfx_pin_set+0x7e>
	return 0;
    873c:	2000      	movs	r0, #0
}
    873e:	b003      	add	sp, #12
    8740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    8744:	454e      	cmp	r6, r9
    8746:	d87f      	bhi.n	8848 <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    8748:	a801      	add	r0, sp, #4
    874a:	f8cd 8004 	str.w	r8, [sp, #4]
    874e:	f7fb f9f3 	bl	3b38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8752:	9a01      	ldr	r2, [sp, #4]
    8754:	2301      	movs	r3, #1
    8756:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    8758:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    875c:	4621      	mov	r1, r4
    875e:	4628      	mov	r0, r5
    8760:	f7ff ffb3 	bl	86ca <any_other_channel_is_active>
    8764:	2800      	cmp	r0, #0
    8766:	d1e9      	bne.n	873c <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    8768:	4601      	mov	r1, r0
    876a:	4638      	mov	r0, r7
    876c:	f7fc ff5e 	bl	562c <nrfx_pwm_stop>
    8770:	e7e4      	b.n	873c <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    8772:	4638      	mov	r0, r7
    8774:	f7fc ff2c 	bl	55d0 <nrfx_pwm_is_stopped>
    8778:	2800      	cmp	r0, #0
    877a:	d0fa      	beq.n	8772 <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    877c:	2302      	movs	r3, #2
    877e:	2201      	movs	r2, #1
    8780:	f107 0118 	add.w	r1, r7, #24
    8784:	4638      	mov	r0, r7
    8786:	f7fc feaf 	bl	54e8 <nrfx_pwm_simple_playback>
    878a:	e7d7      	b.n	873c <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    878c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8790:	e7d5      	b.n	873e <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    8792:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    8796:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    879a:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    879e:	b113      	cbz	r3, 87a6 <pwm_nrfx_pin_set+0xb2>
    87a0:	89a2      	ldrh	r2, [r4, #12]
    87a2:	429a      	cmp	r2, r3
    87a4:	d8c1      	bhi.n	872a <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    87a6:	4621      	mov	r1, r4
    87a8:	4628      	mov	r0, r5
    87aa:	f7ff ff8e 	bl	86ca <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    87ae:	f080 0001 	eor.w	r0, r0, #1
    87b2:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    87b4:	7bb9      	ldrb	r1, [r7, #14]
    87b6:	2901      	cmp	r1, #1
		period_cycles /= 2;
    87b8:	bf04      	itt	eq
    87ba:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    87bc:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    87c0:	b326      	cbz	r6, 880c <pwm_nrfx_pin_set+0x118>
    87c2:	6823      	ldr	r3, [r4, #0]
    87c4:	42b3      	cmp	r3, r6
    87c6:	d021      	beq.n	880c <pwm_nrfx_pin_set+0x118>
    87c8:	2300      	movs	r3, #0
				data->current[i]
    87ca:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    87ce:	b2da      	uxtb	r2, r3
    87d0:	42aa      	cmp	r2, r5
    87d2:	d005      	beq.n	87e0 <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    87d4:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    87d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
    87dc:	2a00      	cmp	r2, #0
    87de:	d1a1      	bne.n	8724 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    87e0:	3301      	adds	r3, #1
    87e2:	2b04      	cmp	r3, #4
    87e4:	d1f3      	bne.n	87ce <pwm_nrfx_pin_set+0xda>
    87e6:	4632      	mov	r2, r6
    87e8:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    87ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    87ee:	fa5f fc83 	uxtb.w	ip, r3
    87f2:	d29c      	bcs.n	872e <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    87f4:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    87f8:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    87fc:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    87fe:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    8800:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    8804:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    8808:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    880c:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    880e:	454e      	cmp	r6, r9
    8810:	4633      	mov	r3, r6
    8812:	bf28      	it	cs
    8814:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    8816:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    881a:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    881e:	ea42 020b 	orr.w	r2, r2, fp
    8822:	b292      	uxth	r2, r2
	data->current[channel] = (
    8824:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    8828:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    882c:	b112      	cbz	r2, 8834 <pwm_nrfx_pin_set+0x140>
    882e:	89a1      	ldrh	r1, [r4, #12]
    8830:	4291      	cmp	r1, r2
    8832:	d882      	bhi.n	873a <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    8834:	197a      	adds	r2, r7, r5
    8836:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    883a:	2b00      	cmp	r3, #0
    883c:	d082      	beq.n	8744 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    883e:	454e      	cmp	r6, r9
    8840:	d805      	bhi.n	884e <pwm_nrfx_pin_set+0x15a>
    8842:	2a00      	cmp	r2, #0
    8844:	db80      	blt.n	8748 <pwm_nrfx_pin_set+0x54>
    8846:	e002      	b.n	884e <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    8848:	2a00      	cmp	r2, #0
    884a:	f6bf af7d 	bge.w	8748 <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    884e:	a801      	add	r0, sp, #4
    8850:	f8cd 8004 	str.w	r8, [sp, #4]
    8854:	f7fb f970 	bl	3b38 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8858:	9a01      	ldr	r2, [sp, #4]
    885a:	2301      	movs	r3, #1
    885c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    885e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    8862:	e77b      	b.n	875c <pwm_nrfx_pin_set+0x68>

00008864 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    8864:	6843      	ldr	r3, [r0, #4]
    8866:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    8868:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    886c:	05d1      	lsls	r1, r2, #23
    886e:	d518      	bpl.n	88a2 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8870:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    8874:	b1aa      	cbz	r2, 88a2 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    8876:	f04f 0120 	mov.w	r1, #32
    887a:	f3ef 8211 	mrs	r2, BASEPRI
    887e:	f381 8812 	msr	BASEPRI_MAX, r1
    8882:	f3bf 8f6f 	isb	sy
    8886:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    888a:	b131      	cbz	r1, 889a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    888c:	2100      	movs	r1, #0
    888e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    8892:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8896:	2101      	movs	r1, #1
    8898:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    889a:	f382 8811 	msr	BASEPRI, r2
    889e:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    88a2:	6842      	ldr	r2, [r0, #4]
    88a4:	6852      	ldr	r2, [r2, #4]
    88a6:	06d2      	lsls	r2, r2, #27
    88a8:	d515      	bpl.n	88d6 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    88aa:	f04f 0120 	mov.w	r1, #32
    88ae:	f3ef 8211 	mrs	r2, BASEPRI
    88b2:	f381 8812 	msr	BASEPRI_MAX, r1
    88b6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88ba:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    88be:	b111      	cbz	r1, 88c6 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    88c0:	2100      	movs	r1, #0
    88c2:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    88c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    88ca:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    88ce:	f382 8811 	msr	BASEPRI, r2
    88d2:	f3bf 8f6f 	isb	sy
}
    88d6:	4770      	bx	lr

000088d8 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    88d8:	6902      	ldr	r2, [r0, #16]
{
    88da:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    88dc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    88e0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    88e4:	2000      	movs	r0, #0
    88e6:	4770      	bx	lr

000088e8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    88e8:	6843      	ldr	r3, [r0, #4]
    88ea:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    88ec:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    88f0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    88f4:	4770      	bx	lr

000088f6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    88f6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    88f8:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    88fa:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    88fe:	b940      	cbnz	r0, 8912 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    8900:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    8902:	0792      	lsls	r2, r2, #30
    8904:	d406      	bmi.n	8914 <is_tx_ready+0x1e>
    8906:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    890a:	3800      	subs	r0, #0
    890c:	bf18      	it	ne
    890e:	2001      	movne	r0, #1
    8910:	4770      	bx	lr
    8912:	2001      	movs	r0, #1
}
    8914:	4770      	bx	lr

00008916 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    8916:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    8918:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    891a:	681b      	ldr	r3, [r3, #0]
    891c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    8920:	b148      	cbz	r0, 8936 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    8922:	7c52      	ldrb	r2, [r2, #17]
    8924:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8926:	2000      	movs	r0, #0
    8928:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    892c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8930:	2201      	movs	r2, #1
    8932:	601a      	str	r2, [r3, #0]
	return 0;
    8934:	4770      	bx	lr
		return -1;
    8936:	f04f 30ff 	mov.w	r0, #4294967295
}
    893a:	4770      	bx	lr

0000893c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    893c:	b510      	push	{r4, lr}
    893e:	2200      	movs	r2, #0
    8940:	4604      	mov	r4, r0
    8942:	2101      	movs	r1, #1
    8944:	2002      	movs	r0, #2
    8946:	f7f9 fe0f 	bl	2568 <z_arm_irq_priority_set>
    894a:	2002      	movs	r0, #2
    894c:	f7f9 fdee 	bl	252c <arch_irq_enable>
    8950:	4620      	mov	r0, r4
    8952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8956:	f7fb ba87 	b.w	3e68 <uarte_instance_init.isra.0>

0000895a <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    895a:	b510      	push	{r4, lr}
    895c:	2200      	movs	r2, #0
    895e:	4604      	mov	r4, r0
    8960:	2101      	movs	r1, #1
    8962:	2028      	movs	r0, #40	; 0x28
    8964:	f7f9 fe00 	bl	2568 <z_arm_irq_priority_set>
    8968:	2028      	movs	r0, #40	; 0x28
    896a:	f7f9 fddf 	bl	252c <arch_irq_enable>
    896e:	4620      	mov	r0, r4
    8970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8974:	f7fb ba78 	b.w	3e68 <uarte_instance_init.isra.0>

00008978 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8978:	4770      	bx	lr

0000897a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    897a:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    897c:	2000      	movs	r0, #0
    897e:	f7fa fa6d 	bl	2e5c <sys_arch_reboot>

00008982 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    8982:	f7ff babd 	b.w	7f00 <nrf_cc3xx_platform_init_no_rng>

00008986 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    8986:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    8988:	f7f9 fce8 	bl	235c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    898c:	f7f9 fd9a 	bl	24c4 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    8990:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    8994:	f7ff bab4 	b.w	7f00 <nrf_cc3xx_platform_init_no_rng>

00008998 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8998:	4700      	bx	r0

0000899a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    899a:	f000 b8ff 	b.w	8b9c <z_impl_k_busy_wait>

0000899e <nrf_gpio_pin_present_check>:
    switch (port)
    899e:	0943      	lsrs	r3, r0, #5
    89a0:	d00b      	beq.n	89ba <nrf_gpio_pin_present_check+0x1c>
    89a2:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    89a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    89a8:	bf18      	it	ne
    89aa:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    89ac:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    89b0:	fa23 f000 	lsr.w	r0, r3, r0
}
    89b4:	f000 0001 	and.w	r0, r0, #1
    89b8:	4770      	bx	lr
    switch (port)
    89ba:	f04f 33ff 	mov.w	r3, #4294967295
    89be:	e7f5      	b.n	89ac <nrf_gpio_pin_present_check+0xe>

000089c0 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    89c0:	0080      	lsls	r0, r0, #2
}
    89c2:	f500 7080 	add.w	r0, r0, #256	; 0x100
    89c6:	4770      	bx	lr

000089c8 <nrf_gpio_reconfigure>:
{
    89c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    89cc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89ce:	a801      	add	r0, sp, #4
{
    89d0:	460e      	mov	r6, r1
    89d2:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    89d6:	4690      	mov	r8, r2
    89d8:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    89da:	f7fc f8ab 	bl	4b34 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    89de:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    89e0:	f1b8 0f00 	cmp.w	r8, #0
    89e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    89e8:	bf14      	ite	ne
    89ea:	2302      	movne	r3, #2
    89ec:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    89ee:	2e00      	cmp	r6, #0
    89f0:	bf18      	it	ne
    89f2:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    89f6:	2d00      	cmp	r5, #0
    89f8:	bf14      	ite	ne
    89fa:	210c      	movne	r1, #12
    89fc:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    89fe:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    8a00:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    8a04:	bf14      	ite	ne
    8a06:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    8a0a:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8a0c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    8a0e:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8a12:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    8a16:	bf14      	ite	ne
    8a18:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    8a1c:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    8a1e:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    8a20:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8a24:	b106      	cbz	r6, 8a28 <nrf_gpio_reconfigure+0x60>
    8a26:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8a28:	f1b8 0f00 	cmp.w	r8, #0
    8a2c:	d003      	beq.n	8a36 <nrf_gpio_reconfigure+0x6e>
    8a2e:	f898 8000 	ldrb.w	r8, [r8]
    8a32:	ea4f 0848 	mov.w	r8, r8, lsl #1
    8a36:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8a38:	b10d      	cbz	r5, 8a3e <nrf_gpio_reconfigure+0x76>
    8a3a:	782d      	ldrb	r5, [r5, #0]
    8a3c:	00ad      	lsls	r5, r5, #2
    8a3e:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8a42:	b10c      	cbz	r4, 8a48 <nrf_gpio_reconfigure+0x80>
    8a44:	7822      	ldrb	r2, [r4, #0]
    8a46:	0214      	lsls	r4, r2, #8
    8a48:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    8a4a:	b10f      	cbz	r7, 8a50 <nrf_gpio_reconfigure+0x88>
    8a4c:	783f      	ldrb	r7, [r7, #0]
    8a4e:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8a50:	432c      	orrs	r4, r5
    8a52:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    8a54:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    8a58:	b002      	add	sp, #8
    8a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008a5e <nrf_gpio_cfg_sense_set>:
{
    8a5e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8a60:	f10d 030f 	add.w	r3, sp, #15
    8a64:	9301      	str	r3, [sp, #4]
    8a66:	2300      	movs	r3, #0
{
    8a68:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    8a6c:	9300      	str	r3, [sp, #0]
    8a6e:	461a      	mov	r2, r3
    8a70:	4619      	mov	r1, r3
    8a72:	f7ff ffa9 	bl	89c8 <nrf_gpio_reconfigure>
}
    8a76:	b005      	add	sp, #20
    8a78:	f85d fb04 	ldr.w	pc, [sp], #4

00008a7c <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    8a7c:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    8a7e:	2402      	movs	r4, #2
    8a80:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    8a82:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    8a84:	6809      	ldr	r1, [r1, #0]
    8a86:	b171      	cbz	r1, 8aa6 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    8a88:	f012 0f04 	tst.w	r2, #4
    8a8c:	bf0c      	ite	eq
    8a8e:	2182      	moveq	r1, #130	; 0x82
    8a90:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    8a92:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    8a94:	bf48      	it	mi
    8a96:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    8a9a:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    8a9c:	bf48      	it	mi
    8a9e:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    8aa2:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    8aa6:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8aa8:	f04f 0100 	mov.w	r1, #0
    8aac:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ab0:	bf58      	it	pl
    8ab2:	2201      	movpl	r2, #1
    8ab4:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    8ab8:	bf56      	itet	pl
    8aba:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    8abc:	18c0      	addmi	r0, r0, r3
    return 0;
    8abe:	4608      	movpl	r0, r1
}
    8ac0:	bd10      	pop	{r4, pc}

00008ac2 <z_device_state_init>:
}
    8ac2:	4770      	bx	lr

00008ac4 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8ac4:	b138      	cbz	r0, 8ad6 <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8ac6:	68c3      	ldr	r3, [r0, #12]
    8ac8:	8818      	ldrh	r0, [r3, #0]
    8aca:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8ace:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    8ad2:	4258      	negs	r0, r3
    8ad4:	4158      	adcs	r0, r3
}
    8ad6:	4770      	bx	lr

00008ad8 <k_mem_slab_init>:
{
    8ad8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    8ada:	2400      	movs	r4, #0
    8adc:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    8ade:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8ae0:	ea41 0402 	orr.w	r4, r1, r2
    8ae4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    8ae8:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    8aec:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8aee:	d10c      	bne.n	8b0a <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    8af0:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    8af2:	42a3      	cmp	r3, r4
    8af4:	d103      	bne.n	8afe <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    8af6:	e9c0 0000 	strd	r0, r0, [r0]
}
    8afa:	2000      	movs	r0, #0
}
    8afc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    8afe:	6985      	ldr	r5, [r0, #24]
    8b00:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8b02:	3401      	adds	r4, #1
		slab->free_list = p;
    8b04:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    8b06:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    8b08:	e7f3      	b.n	8af2 <k_mem_slab_init+0x1a>
		return -EINVAL;
    8b0a:	f06f 0015 	mvn.w	r0, #21
	return rc;
    8b0e:	e7f5      	b.n	8afc <k_mem_slab_init+0x24>

00008b10 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8b10:	f3ef 8005 	mrs	r0, IPSR
}
    8b14:	3800      	subs	r0, #0
    8b16:	bf18      	it	ne
    8b18:	2001      	movne	r0, #1
    8b1a:	4770      	bx	lr

00008b1c <z_pm_save_idle_exit>:
{
    8b1c:	b508      	push	{r3, lr}
	pm_system_resume();
    8b1e:	f7f9 fb59 	bl	21d4 <pm_system_resume>
}
    8b22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8b26:	f7ff bf27 	b.w	8978 <sys_clock_idle_exit>

00008b2a <z_impl_k_mutex_init>:
{
    8b2a:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8b2c:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    8b2e:	e9c3 0002 	strd	r0, r0, [r3, #8]
    8b32:	e9c3 3300 	strd	r3, r3, [r3]
}
    8b36:	4770      	bx	lr

00008b38 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8b38:	b13a      	cbz	r2, 8b4a <z_impl_k_sem_init+0x12>
    8b3a:	428a      	cmp	r2, r1
    8b3c:	d305      	bcc.n	8b4a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    8b3e:	e9c0 1202 	strd	r1, r2, [r0, #8]
    8b42:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    8b46:	2000      	movs	r0, #0
    8b48:	4770      	bx	lr
		return -EINVAL;
    8b4a:	f06f 0015 	mvn.w	r0, #21
}
    8b4e:	4770      	bx	lr

00008b50 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8b50:	4603      	mov	r3, r0
    8b52:	b920      	cbnz	r0, 8b5e <z_reschedule_irqlock+0xe>
    8b54:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8b58:	b90a      	cbnz	r2, 8b5e <z_reschedule_irqlock+0xe>
    8b5a:	f7f9 bd59 	b.w	2610 <arch_swap>
    8b5e:	f383 8811 	msr	BASEPRI, r3
    8b62:	f3bf 8f6f 	isb	sy
}
    8b66:	4770      	bx	lr

00008b68 <z_reschedule_unlocked>:
	__asm__ volatile(
    8b68:	f04f 0320 	mov.w	r3, #32
    8b6c:	f3ef 8011 	mrs	r0, BASEPRI
    8b70:	f383 8812 	msr	BASEPRI_MAX, r3
    8b74:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8b78:	f7ff bfea 	b.w	8b50 <z_reschedule_irqlock>

00008b7c <z_priq_dumb_best>:
{
    8b7c:	4603      	mov	r3, r0
	return list->head == list;
    8b7e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8b80:	4283      	cmp	r3, r0
    8b82:	d003      	beq.n	8b8c <z_priq_dumb_best+0x10>
	if (n != NULL) {
    8b84:	2800      	cmp	r0, #0
    8b86:	bf38      	it	cc
    8b88:	2000      	movcc	r0, #0
    8b8a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    8b8c:	2000      	movs	r0, #0
}
    8b8e:	4770      	bx	lr

00008b90 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8b90:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8b92:	f7ff f845 	bl	7c20 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8b96:	bd08      	pop	{r3, pc}

00008b98 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8b98:	f7ff b842 	b.w	7c20 <sys_clock_tick_get>

00008b9c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8b9c:	b108      	cbz	r0, 8ba2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8b9e:	f7fa b973 	b.w	2e88 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8ba2:	4770      	bx	lr

00008ba4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8ba4:	b510      	push	{r4, lr}
    8ba6:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    8ba8:	f7fe fe88 	bl	78bc <z_abort_timeout>

	if (inactive) {
    8bac:	b9b0      	cbnz	r0, 8bdc <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    8bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8bb0:	b10b      	cbz	r3, 8bb6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8bb2:	4620      	mov	r0, r4
    8bb4:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8bb6:	f104 0018 	add.w	r0, r4, #24
    8bba:	f7fe fa55 	bl	7068 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    8bbe:	b168      	cbz	r0, 8bdc <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    8bc0:	f7fd feee 	bl	69a0 <z_ready_thread>
    8bc4:	f04f 0320 	mov.w	r3, #32
    8bc8:	f3ef 8011 	mrs	r0, BASEPRI
    8bcc:	f383 8812 	msr	BASEPRI_MAX, r3
    8bd0:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    8bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8bd8:	f7ff bfba 	b.w	8b50 <z_reschedule_irqlock>
    8bdc:	bd10      	pop	{r4, pc}

00008bde <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8bde:	4770      	bx	lr

00008be0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8be0:	f7fb bc86 	b.w	44f0 <SystemInit>
